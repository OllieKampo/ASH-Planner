[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033993s with result Unsatisfiable.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09607559999949444, Incremental time limit = None
Running cumulative time = 0.994893600000978, Cumulative time limit = 1800
Used memory = (RSS = 2260.210938Mb, VMS = 2278.644531Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      1 : Maximum =    300

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)])]

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.062799s.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055160s with result Unsatisfiable.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11795859999983804, Incremental time limit = None
Running cumulative time = 1.112852200000816, Cumulative time limit = 1800
Used memory = (RSS = 2260.289062Mb, VMS = 2278.718750Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      1 : Maximum =    300

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)])]

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.063135s.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.102245s with result Unsatisfiable.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.165379899999607, Incremental time limit = None
Running cumulative time = 1.278232100000423, Cumulative time limit = 1800
Used memory = (RSS = 2260.363281Mb, VMS = 2278.792969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =      1 : Maximum =    300

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)])]

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.063962s.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.158641s with result Unsatisfiable.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22260309999910532, Incremental time limit = None
Running cumulative time = 1.5008351999995284, Cumulative time limit = 1800
Used memory = (RSS = 2260.441406Mb, VMS = 2278.871094Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =      1 : Maximum =    300

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)])]

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.067999s.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.303463s with result Unsatisfiable.

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3714613999991343, Incremental time limit = None
Running cumulative time = 1.8722965999986627, Cumulative time limit = 1800
Used memory = (RSS = 2260.515625Mb, VMS = 2278.945312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =      1 : Maximum =    300

[22-02-2022_03-42-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)])]

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.066819s.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067269s with result Satisfiable.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13408819999949628, Incremental time limit = None
Running cumulative time = 2.006384799998159, Cumulative time limit = 1800
Used memory = (RSS = 2262.656250Mb, VMS = 2281.023438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.147837s, Solving = 0.858548s, Total = 2.006385s, Memory = (RSS = 2262.656250Mb, VMS = 2281.023438Mb), Step range = [0-20]), Calls = 20
Final Model :: Total atoms = 22453, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.057837s, Solving = 0.005557s, Total = 0.063394s, Memory = (RSS = 2259.179688Mb, VMS = 2277.621094Mb), Step range = [0-1]
2 : Statistics :: Grounding = 0.046231s, Solving = 0.002718s, Total = 0.048950s, Memory = (RSS = 2259.179688Mb, VMS = 2277.621094Mb), Step range = [2-2]
3 : Statistics :: Grounding = 0.048035s, Solving = 0.004929s, Total = 0.052965s, Memory = (RSS = 2259.179688Mb, VMS = 2277.621094Mb), Step range = [3-3]
4 : Statistics :: Grounding = 0.049577s, Solving = 0.005660s, Total = 0.055237s, Memory = (RSS = 2259.179688Mb, VMS = 2277.621094Mb), Step range = [4-4]
5 : Statistics :: Grounding = 0.050707s, Solving = 0.005923s, Total = 0.056630s, Memory = (RSS = 2259.183594Mb, VMS = 2277.621094Mb), Step range = [5-5]
6 : Statistics :: Grounding = 0.051835s, Solving = 0.006133s, Total = 0.057967s, Memory = (RSS = 2259.183594Mb, VMS = 2277.621094Mb), Step range = [6-6]
7 : Statistics :: Grounding = 0.053282s, Solving = 0.007761s, Total = 0.061043s, Memory = (RSS = 2259.183594Mb, VMS = 2277.621094Mb), Step range = [7-7]
8 : Statistics :: Grounding = 0.054202s, Solving = 0.006790s, Total = 0.060991s, Memory = (RSS = 2259.183594Mb, VMS = 2277.621094Mb), Step range = [8-8]
9 : Statistics :: Grounding = 0.055232s, Solving = 0.009599s, Total = 0.064831s, Memory = (RSS = 2259.183594Mb, VMS = 2277.621094Mb), Step range = [9-9]
10 : Statistics :: Grounding = 0.056505s, Solving = 0.009596s, Total = 0.066101s, Memory = (RSS = 2259.187500Mb, VMS = 2277.621094Mb), Step range = [10-10]
11 : Statistics :: Grounding = 0.058655s, Solving = 0.012048s, Total = 0.070703s, Memory = (RSS = 2259.187500Mb, VMS = 2277.621094Mb), Step range = [11-11]
12 : Statistics :: Grounding = 0.058490s, Solving = 0.015496s, Total = 0.073986s, Memory = (RSS = 2259.187500Mb, VMS = 2277.621094Mb), Step range = [12-12]
13 : Statistics :: Grounding = 0.059169s, Solving = 0.019230s, Total = 0.078400s, Memory = (RSS = 2259.187500Mb, VMS = 2277.621094Mb), Step range = [13-13]
14 : Statistics :: Grounding = 0.061284s, Solving = 0.026337s, Total = 0.087621s, Memory = (RSS = 2259.187500Mb, VMS = 2277.621094Mb), Step range = [14-14]
15 : Statistics :: Grounding = 0.062083s, Solving = 0.033993s, Total = 0.096076s, Memory = (RSS = 2260.210938Mb, VMS = 2278.644531Mb), Step range = [15-15]
16 : Statistics :: Grounding = 0.062799s, Solving = 0.055160s, Total = 0.117959s, Memory = (RSS = 2260.289062Mb, VMS = 2278.718750Mb), Step range = [16-16]
17 : Statistics :: Grounding = 0.063135s, Solving = 0.102245s, Total = 0.165380s, Memory = (RSS = 2260.363281Mb, VMS = 2278.792969Mb), Step range = [17-17]
18 : Statistics :: Grounding = 0.063962s, Solving = 0.158641s, Total = 0.222603s, Memory = (RSS = 2260.441406Mb, VMS = 2278.871094Mb), Step range = [18-18]
19 : Statistics :: Grounding = 0.067999s, Solving = 0.303463s, Total = 0.371461s, Memory = (RSS = 2260.515625Mb, VMS = 2278.945312Mb), Step range = [19-19]
20 : Statistics :: Grounding = 0.066819s, Solving = 0.067269s, Total = 0.134088s, Memory = (RSS = 2262.656250Mb, VMS = 2281.023438Mb), Step range = [20-20]

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 2.006385s due to: Stop condition reached.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 1, Last requested goal index = 1, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.147837s, Solving = 0.858548s, Total = 2.006385s, Memory = (RSS = 2262.656250Mb, VMS = 2281.023438Mb), Step range = [0-20]), Calls = 20
Model :: Total atoms = 22453, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 3                 
          ========================================          
                 Steps = 20 :: Actions = 20                 
                ----------------------------                

Step 1:
    Planned actions:
        talos : move(store_room)
Step 2:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 3:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 4:
    Planned actions:
        talos : move(puzzle_room)
Step 5:
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 6:
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 7:
    Planned actions:
        talos : move(store_room)
Step 8:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 9:
    Planned actions:
        talos : move(puzzle_room)
Step 10:
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 11:
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 12:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 13:
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 14:
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 15:
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 16:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 17:
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 18:
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 19:
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 20:
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 0, Total actions = 0, Produced sub-goal stages = 0
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.25s, ST =   0.88s, OT = 0.00s, TT =   2.13s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)

[22-02-2022_03-42-14] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=2, plan_length=20, start_step=0, blend=Blend(left=0, right=0)

[22-02-2022_03-42-14] DEBUG :: core.Strategies >> Decided: number_small_problems=2, number_large_problems=0, small_group_size=10, large_group_size=11

[22-02-2022_03-42-14] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=10, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 3 solved.

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 1 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-10]

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [1-10], problem number = 1, increment number = 1

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 10)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [1-10] : Concurrency disabled : Minimum search length bound enabled with value 9

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 10
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 9

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-42-14] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-42-14] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(3, complete_tower(blue,puzzle_room_table), false, 0).
holds(3, complete_tower(red,puzzle_room_table), false, 0).
holds(3, grasping(manipulator_arm_1), nothing, 0).
holds(3, grasping(manipulator_arm_2), nothing, 0).
holds(3, in((block,1)), puzzle_room, 0).
holds(3, in((block,2)), puzzle_room, 0).
holds(3, in((block,3)), puzzle_room, 0).
holds(3, in((block,4)), store_room, 0).
holds(3, in((block,5)), store_room, 0).
holds(3, in((block,6)), store_room, 0).
holds(3, in(manipulator_arm_1), starting_room, 0).
holds(3, in(manipulator_arm_2), starting_room, 0).
holds(3, in(puzzle_room_table), puzzle_room, 0).
holds(3, in(talos), starting_room, 0).
holds(3, in_tower((block,1),(block,1)), true, 0).
holds(3, in_tower((block,1),(block,2)), false, 0).
holds(3, in_tower((block,1),(block,3)), true, 0).
holds(3, in_tower((block,1),(block,4)), false, 0).
holds(3, in_tower((block,1),(block,5)), false, 0).
holds(3, in_tower((block,1),(block,6)), false, 0).
holds(3, in_tower((block,2),(block,1)), false, 0).
holds(3, in_tower((block,2),(block,2)), true, 0).
holds(3, in_tower((block,2),(block,3)), false, 0).
holds(3, in_tower((block,2),(block,4)), false, 0).
holds(3, in_tower((block,2),(block,5)), false, 0).
holds(3, in_tower((block,2),(block,6)), false, 0).
holds(3, in_tower((block,3),(block,1)), false, 0).
holds(3, in_tower((block,3),(block,2)), false, 0).
holds(3, in_tower((block,3),(block,3)), false, 0).
holds(3, in_tower((block,3),(block,4)), false, 0).
holds(3, in_tower((block,3),(block,5)), false, 0).
holds(3, in_tower((block,3),(block,6)), false, 0).
holds(3, in_tower((block,4),(block,1)), false, 0).
holds(3, in_tower((block,4),(block,2)), false, 0).
holds(3, in_tower((block,4),(block,3)), false, 0).
holds(3, in_tower((block,4),(block,4)), false, 0).
holds(3, in_tower((block,4),(block,5)), false, 0).
holds(3, in_tower((block,4),(block,6)), false, 0).
holds(3, in_tower((block,5),(block,1)), false, 0).
holds(3, in_tower((block,5),(block,2)), false, 0).
holds(3, in_tower((block,5),(block,3)), false, 0).
holds(3, in_tower((block,5),(block,4)), false, 0).
holds(3, in_tower((block,5),(block,5)), false, 0).
holds(3, in_tower((block,5),(block,6)), false, 0).
holds(3, in_tower((block,6),(block,1)), false, 0).
holds(3, in_tower((block,6),(block,2)), false, 0).
holds(3, in_tower((block,6),(block,3)), false, 0).
holds(3, in_tower((block,6),(block,4)), false, 0).
holds(3, in_tower((block,6),(block,5)), false, 0).
holds(3, in_tower((block,6),(block,6)), false, 0).
holds(3, on((block,1)), puzzle_room_table, 0).
holds(3, on((block,2)), puzzle_room_table, 0).
holds(3, on((block,3)), (block,1), 0).
holds(3, on((block,4)), nothing, 0).
holds(3, on((block,5)), nothing, 0).
holds(3, on((block,6)), nothing, 0).
holds(3, tower_base((block,1),puzzle_room_table), true, 0).
holds(3, tower_base((block,2),puzzle_room_table), true, 0).
holds(3, tower_base((block,3),puzzle_room_table), false, 0).
holds(3, tower_base((block,4),puzzle_room_table), false, 0).
holds(3, tower_base((block,5),puzzle_room_table), false, 0).
holds(3, tower_base((block,6),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 0).

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=9']

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 1})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 2})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 3})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 4})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 5})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 6})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 7})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 8})
SubGoal({'L': 3, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 9})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 10})

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, move(store_room), in(talos), store_room, 1).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 2).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 3).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 4).
sub_goal(3, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 5).
sub_goal(3, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 6).
sub_goal(3, talos, move(store_room), in(talos), store_room, 7).
sub_goal(3, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 8).
sub_goal(3, talos, move(puzzle_room), in(talos), puzzle_room, 9).
sub_goal(3, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 10).

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=9']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF14DD2CA0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=10, step_end_min=10, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 10, 'sequential', 'false'), range_=None)]

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 800 rules

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004882100000031642s

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108949s.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.018630s with result Satisfiable.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF16B5E040>

[22-02-2022_03-42-14] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 0)
	('last_sgoals', 10)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF16B5E040>)

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 10, sequential, false). %* None *%

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      9
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.346515s.

[22-02-2022_03-42-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.134490s with result Satisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4810050999994928, Incremental time limit = None
Running cumulative time = 0.4810050999994928, Cumulative time limit = 1800
Used memory = (RSS = 2265.660156Mb, VMS = 2284.332031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.346515s, Solving = 0.134490s, Total = 0.481005s, Memory = (RSS = 2265.660156Mb, VMS = 2284.332031Mb), Step range = [0-9]), Calls = 1
Final Model :: Total atoms = 19137, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080393s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013727s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09412009999959992, Incremental time limit = None
Running cumulative time = 0.5751251999990927, Cumulative time limit = 1800
Used memory = (RSS = 2269.832031Mb, VMS = 2289.796875Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.077201s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.012583s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.08978490000026795, Incremental time limit = None
Running cumulative time = 0.6649100999993607, Cumulative time limit = 1800
Used memory = (RSS = 2270.644531Mb, VMS = 2289.988281Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080635s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013277s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.09391229999982897, Incremental time limit = None
Running cumulative time = 0.7588223999991897, Cumulative time limit = 1800
Used memory = (RSS = 2271.277344Mb, VMS = 2290.425781Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.082144s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.013798s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0959420000008322, Incremental time limit = None
Running cumulative time = 0.8547644000000219, Cumulative time limit = 1800
Used memory = (RSS = 2271.843750Mb, VMS = 2290.609375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.083652s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017755s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10140719999981229, Incremental time limit = None
Running cumulative time = 0.9561715999998341, Cumulative time limit = 1800
Used memory = (RSS = 2272.628906Mb, VMS = 2293.957031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.086324s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015560s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1018833000007362, Incremental time limit = None
Running cumulative time = 1.0580549000005703, Cumulative time limit = 1800
Used memory = (RSS = 2273.371094Mb, VMS = 2294.148438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088811s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.016607s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1054175999997824, Incremental time limit = None
Running cumulative time = 1.1634725000003527, Cumulative time limit = 1800
Used memory = (RSS = 2274.128906Mb, VMS = 2294.335938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.088265s.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.017768s with result Unsatisfiable.

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.10603350000110368, Incremental time limit = None
Running cumulative time = 1.2695060000014564, Cumulative time limit = 1800
Used memory = (RSS = 2274.687500Mb, VMS = 2294.519531Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     17 : Current =     18
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(18)]), ('state_module', [Number(18), Number(0)]), ('plan_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.093717s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020098s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1138148000000001, Incremental time limit = None
Running cumulative time = 1.3833208000014565, Cumulative time limit = 1800
Used memory = (RSS = 2275.437500Mb, VMS = 2294.707031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     18 : Current =     19
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(19)]), ('state_module', [Number(19), Number(0)]), ('plan_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094264s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.019992s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11425680000047578, Incremental time limit = None
Running cumulative time = 1.4975776000019323, Cumulative time limit = 1800
Used memory = (RSS = 2276.093750Mb, VMS = 2294.894531Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     19 : Current =     20
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(20)]), ('state_module', [Number(20), Number(0)]), ('plan_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.094920s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023444s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.11836410000069009, Incremental time limit = None
Running cumulative time = 1.6159417000026224, Cumulative time limit = 1800
Used memory = (RSS = 2276.617188Mb, VMS = 2295.082031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     20 : Current =     21
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(21), Number(0)]), ('plan_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.095151s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032570s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12772060000042984, Incremental time limit = None
Running cumulative time = 1.7436623000030522, Cumulative time limit = 1800
Used memory = (RSS = 2277.445312Mb, VMS = 2300.027344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(0)]), ('plan_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.098417s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032195s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1306114000008165, Incremental time limit = None
Running cumulative time = 1.8742737000038687, Cumulative time limit = 1800
Used memory = (RSS = 2278.218750Mb, VMS = 2300.210938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(0)]), ('plan_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.100366s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.032241s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1326060999999754, Incremental time limit = None
Running cumulative time = 2.006879800003844, Cumulative time limit = 1800
Used memory = (RSS = 2278.867188Mb, VMS = 2300.406250Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(0)]), ('plan_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.102256s.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.027891s with result Unsatisfiable.

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.13014649999968242, Incremental time limit = None
Running cumulative time = 2.1370263000035266, Cumulative time limit = 1800
Used memory = (RSS = 2279.539062Mb, VMS = 2300.835938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(0)]), ('plan_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.109572s.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.038175s with result Unsatisfiable.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.14774769999985438, Incremental time limit = None
Running cumulative time = 2.284774000003381, Cumulative time limit = 1800
Used memory = (RSS = 2280.125000Mb, VMS = 2301.031250Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(0)]), ('plan_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.111726s.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049284s with result Unsatisfiable.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.16100980000010168, Incremental time limit = None
Running cumulative time = 2.4457838000034826, Cumulative time limit = 1800
Used memory = (RSS = 2280.957031Mb, VMS = 2301.207031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(0)]), ('plan_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.112788s.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.068016s with result Unsatisfiable.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1808035000003656, Incremental time limit = None
Running cumulative time = 2.626587300003848, Cumulative time limit = 1800
Used memory = (RSS = 2281.718750Mb, VMS = 2301.402344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(0)]), ('plan_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.116449s.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.110625s with result Unsatisfiable.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.22707340000033582, Incremental time limit = None
Running cumulative time = 2.853660700004184, Cumulative time limit = 1800
Used memory = (RSS = 2282.273438Mb, VMS = 2301.582031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(0)]), ('plan_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119192s.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.138362s with result Unsatisfiable.

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2575546999996732, Incremental time limit = None
Running cumulative time = 3.111215400003857, Cumulative time limit = 1800
Used memory = (RSS = 2283.011719Mb, VMS = 2301.777344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(0)]), ('plan_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119573s.

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.189202s with result Unsatisfiable.

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30877460000101564, Incremental time limit = None
Running cumulative time = 3.419990000004873, Cumulative time limit = 1800
Used memory = (RSS = 2288.714844Mb, VMS = 2316.226562Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     10 : Maximum =    300

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(0)]), ('plan_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(0), Number(1), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.126958s.

[22-02-2022_03-42-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.828431s with result Satisfiable.

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.955388700000185, Incremental time limit = None
Running cumulative time = 5.375378700005058, Cumulative time limit = 1800
Used memory = (RSS = 2293.832031Mb, VMS = 2321.234375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.509289s, Solving = 2.866090s, Total = 5.375379s, Memory = (RSS = 2293.832031Mb, VMS = 2321.234375Mb), Step range = [0-31]), Calls = 23
Final Model :: Total atoms = 26630, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.346515s, Solving = 0.134490s, Total = 0.481005s, Memory = (RSS = 2265.660156Mb, VMS = 2284.332031Mb), Step range = [0-9]
2 : Statistics :: Grounding = 0.080393s, Solving = 0.013727s, Total = 0.094120s, Memory = (RSS = 2269.832031Mb, VMS = 2289.796875Mb), Step range = [10-10]
3 : Statistics :: Grounding = 0.077201s, Solving = 0.012583s, Total = 0.089785s, Memory = (RSS = 2270.644531Mb, VMS = 2289.988281Mb), Step range = [11-11]
4 : Statistics :: Grounding = 0.080635s, Solving = 0.013277s, Total = 0.093912s, Memory = (RSS = 2271.277344Mb, VMS = 2290.425781Mb), Step range = [12-12]
5 : Statistics :: Grounding = 0.082144s, Solving = 0.013798s, Total = 0.095942s, Memory = (RSS = 2271.843750Mb, VMS = 2290.609375Mb), Step range = [13-13]
6 : Statistics :: Grounding = 0.083652s, Solving = 0.017755s, Total = 0.101407s, Memory = (RSS = 2272.628906Mb, VMS = 2293.957031Mb), Step range = [14-14]
7 : Statistics :: Grounding = 0.086324s, Solving = 0.015560s, Total = 0.101883s, Memory = (RSS = 2273.371094Mb, VMS = 2294.148438Mb), Step range = [15-15]
8 : Statistics :: Grounding = 0.088811s, Solving = 0.016607s, Total = 0.105418s, Memory = (RSS = 2274.128906Mb, VMS = 2294.335938Mb), Step range = [16-16]
9 : Statistics :: Grounding = 0.088265s, Solving = 0.017768s, Total = 0.106034s, Memory = (RSS = 2274.687500Mb, VMS = 2294.519531Mb), Step range = [17-17]
10 : Statistics :: Grounding = 0.093717s, Solving = 0.020098s, Total = 0.113815s, Memory = (RSS = 2275.437500Mb, VMS = 2294.707031Mb), Step range = [18-18]
11 : Statistics :: Grounding = 0.094264s, Solving = 0.019992s, Total = 0.114257s, Memory = (RSS = 2276.093750Mb, VMS = 2294.894531Mb), Step range = [19-19]
12 : Statistics :: Grounding = 0.094920s, Solving = 0.023444s, Total = 0.118364s, Memory = (RSS = 2276.617188Mb, VMS = 2295.082031Mb), Step range = [20-20]
13 : Statistics :: Grounding = 0.095151s, Solving = 0.032570s, Total = 0.127721s, Memory = (RSS = 2277.445312Mb, VMS = 2300.027344Mb), Step range = [21-21]
14 : Statistics :: Grounding = 0.098417s, Solving = 0.032195s, Total = 0.130611s, Memory = (RSS = 2278.218750Mb, VMS = 2300.210938Mb), Step range = [22-22]
15 : Statistics :: Grounding = 0.100366s, Solving = 0.032241s, Total = 0.132606s, Memory = (RSS = 2278.867188Mb, VMS = 2300.406250Mb), Step range = [23-23]
16 : Statistics :: Grounding = 0.102256s, Solving = 0.027891s, Total = 0.130146s, Memory = (RSS = 2279.539062Mb, VMS = 2300.835938Mb), Step range = [24-24]
17 : Statistics :: Grounding = 0.109572s, Solving = 0.038175s, Total = 0.147748s, Memory = (RSS = 2280.125000Mb, VMS = 2301.031250Mb), Step range = [25-25]
18 : Statistics :: Grounding = 0.111726s, Solving = 0.049284s, Total = 0.161010s, Memory = (RSS = 2280.957031Mb, VMS = 2301.207031Mb), Step range = [26-26]
19 : Statistics :: Grounding = 0.112788s, Solving = 0.068016s, Total = 0.180804s, Memory = (RSS = 2281.718750Mb, VMS = 2301.402344Mb), Step range = [27-27]
20 : Statistics :: Grounding = 0.116449s, Solving = 0.110625s, Total = 0.227073s, Memory = (RSS = 2282.273438Mb, VMS = 2301.582031Mb), Step range = [28-28]
21 : Statistics :: Grounding = 0.119192s, Solving = 0.138362s, Total = 0.257555s, Memory = (RSS = 2283.011719Mb, VMS = 2301.777344Mb), Step range = [29-29]
22 : Statistics :: Grounding = 0.119573s, Solving = 0.189202s, Total = 0.308775s, Memory = (RSS = 2288.714844Mb, VMS = 2316.226562Mb), Step range = [30-30]
23 : Statistics :: Grounding = 0.126958s, Solving = 1.828431s, Total = 1.955389s, Memory = (RSS = 2293.832031Mb, VMS = 2321.234375Mb), Step range = [31-31]

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.375379s due to: Stop condition reached.

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-42-20] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 2.509289s, Solving = 2.866090s, Total = 5.375379s, Memory = (RSS = 2293.832031Mb, VMS = 2321.234375Mb), Step range = [0-31]), Calls = 23
Model :: Total atoms = 26630, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 31 :: Actions = 31                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 14:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 15:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 23:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 25:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 27:
    Current Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 29:
    Current Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 30:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=31, step_range=range(0, 32)

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 31, Total actions = 31, Produced sub-goal stages = 31
Level [1]: Length = 0, Total actions = 0, Produced sub-goal stages = 0

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  31, AC =  31, CF = 1.0, GT =   2.62s, ST =   2.88s, OT = 0.00s, TT =   5.50s, EF = (LE = 3.1, AC = 3.1), ED = (LE = 2.7, AC = 2.7), EB = (LE = 0.9, AC = 0.9)

[22-02-2022_03-42-21] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=6, plan_length=31, start_step=0, blend=Blend(left=0, right=0)

[22-02-2022_03-42-21] DEBUG :: core.Strategies >> Decided: number_small_problems=5, number_large_problems=1, small_group_size=5, large_group_size=6

[22-02-2022_03-42-21] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=5, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=10, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=15, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=20, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=25, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 2 solved.

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 1 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [1-5]

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [1-5], problem number = 1, increment number = 1

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 1)
	('last_sgoals', 5)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [1-5] : Concurrency disabled : Minimum search length bound enabled with value 4

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 1
last_sgoals = 5
start_step = 0
is_initial = True
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 4

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-42-21] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-42-21] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Adding initial state as problem start state.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(starting_room,0,0)', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 0})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'starting_room', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 0})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 0})

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 0).
holds(1, complete_tower(red,puzzle_room_table), false, 0).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 0).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 0).
holds(1, configuration(manipulator_limb_1), retracted, 0).
holds(1, configuration(manipulator_limb_2), retracted, 0).
holds(1, configuration(puzzle_room_door), closed, 0).
holds(1, configuration(starting_room_door), closed, 0).
holds(1, configuration(store_room_door), closed, 0).
holds(1, grasping(manipulator_arm_1), nothing, 0).
holds(1, grasping(manipulator_arm_2), nothing, 0).
holds(1, grasping(manipulator_end_1), nothing, 0).
holds(1, grasping(manipulator_end_2), nothing, 0).
holds(1, in((block,1)), (puzzle_room,5,0), 0).
holds(1, in((block,2)), (puzzle_room,5,0), 0).
holds(1, in((block,3)), (puzzle_room,5,0), 0).
holds(1, in((block,4)), (store_room,0,0), 0).
holds(1, in((block,5)), (store_room,0,0), 0).
holds(1, in((block,6)), (store_room,0,0), 0).
holds(1, in(manipulator_arm_1), (starting_room,0,0), 0).
holds(1, in(manipulator_arm_2), (starting_room,0,0), 0).
holds(1, in(manipulator_end_1), (starting_room,0,0), 0).
holds(1, in(manipulator_end_2), (starting_room,0,0), 0).
holds(1, in(manipulator_limb_1), (starting_room,0,0), 0).
holds(1, in(manipulator_limb_2), (starting_room,0,0), 0).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 0).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 0).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 0).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 0).
holds(1, in(talos), (starting_room,0,0), 0).
holds(1, in_tower((block,1),(block,1)), true, 0).
holds(1, in_tower((block,1),(block,2)), false, 0).
holds(1, in_tower((block,1),(block,3)), true, 0).
holds(1, in_tower((block,1),(block,4)), false, 0).
holds(1, in_tower((block,1),(block,5)), false, 0).
holds(1, in_tower((block,1),(block,6)), false, 0).
holds(1, in_tower((block,2),(block,1)), false, 0).
holds(1, in_tower((block,2),(block,2)), true, 0).
holds(1, in_tower((block,2),(block,3)), false, 0).
holds(1, in_tower((block,2),(block,4)), false, 0).
holds(1, in_tower((block,2),(block,5)), false, 0).
holds(1, in_tower((block,2),(block,6)), false, 0).
holds(1, in_tower((block,3),(block,1)), false, 0).
holds(1, in_tower((block,3),(block,2)), false, 0).
holds(1, in_tower((block,3),(block,3)), false, 0).
holds(1, in_tower((block,3),(block,4)), false, 0).
holds(1, in_tower((block,3),(block,5)), false, 0).
holds(1, in_tower((block,3),(block,6)), false, 0).
holds(1, in_tower((block,4),(block,1)), false, 0).
holds(1, in_tower((block,4),(block,2)), false, 0).
holds(1, in_tower((block,4),(block,3)), false, 0).
holds(1, in_tower((block,4),(block,4)), false, 0).
holds(1, in_tower((block,4),(block,5)), false, 0).
holds(1, in_tower((block,4),(block,6)), false, 0).
holds(1, in_tower((block,5),(block,1)), false, 0).
holds(1, in_tower((block,5),(block,2)), false, 0).
holds(1, in_tower((block,5),(block,3)), false, 0).
holds(1, in_tower((block,5),(block,4)), false, 0).
holds(1, in_tower((block,5),(block,5)), false, 0).
holds(1, in_tower((block,5),(block,6)), false, 0).
holds(1, in_tower((block,6),(block,1)), false, 0).
holds(1, in_tower((block,6),(block,2)), false, 0).
holds(1, in_tower((block,6),(block,3)), false, 0).
holds(1, in_tower((block,6),(block,4)), false, 0).
holds(1, in_tower((block,6),(block,5)), false, 0).
holds(1, in_tower((block,6),(block,6)), false, 0).
holds(1, on((block,1)), puzzle_room_table_left, 0).
holds(1, on((block,2)), puzzle_room_table_right, 0).
holds(1, on((block,3)), (block,1), 0).
holds(1, on((block,4)), nothing, 0).
holds(1, on((block,5)), nothing, 0).
holds(1, on((block,6)), nothing, 0).
holds(1, tower_base((block,1),puzzle_room_table), true, 0).
holds(1, tower_base((block,2),puzzle_room_table), true, 0).
holds(1, tower_base((block,3),puzzle_room_table), false, 0).
holds(1, tower_base((block,4),puzzle_room_table), false, 0).
holds(1, tower_base((block,5),puzzle_room_table), false, 0).
holds(1, tower_base((block,6),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 0).
holds(2, complete_tower(blue,puzzle_room_table), false, 0).
holds(2, complete_tower(red,puzzle_room_table), false, 0).
holds(2, configuration(manipulator_arm_1), retracted, 0).
holds(2, configuration(manipulator_arm_2), retracted, 0).
holds(2, configuration(puzzle_room_door), closed, 0).
holds(2, configuration(starting_room_door), closed, 0).
holds(2, configuration(store_room_door), closed, 0).
holds(2, grasping(manipulator_arm_1), nothing, 0).
holds(2, grasping(manipulator_arm_2), nothing, 0).
holds(2, in((block,1)), puzzle_room, 0).
holds(2, in((block,2)), puzzle_room, 0).
holds(2, in((block,3)), puzzle_room, 0).
holds(2, in((block,4)), store_room, 0).
holds(2, in((block,5)), store_room, 0).
holds(2, in((block,6)), store_room, 0).
holds(2, in(manipulator_arm_1), starting_room, 0).
holds(2, in(manipulator_arm_2), starting_room, 0).
holds(2, in(puzzle_room_table), puzzle_room, 0).
holds(2, in(talos), starting_room, 0).
holds(2, in_tower((block,1),(block,1)), true, 0).
holds(2, in_tower((block,1),(block,2)), false, 0).
holds(2, in_tower((block,1),(block,3)), true, 0).
holds(2, in_tower((block,1),(block,4)), false, 0).
holds(2, in_tower((block,1),(block,5)), false, 0).
holds(2, in_tower((block,1),(block,6)), false, 0).
holds(2, in_tower((block,2),(block,1)), false, 0).
holds(2, in_tower((block,2),(block,2)), true, 0).
holds(2, in_tower((block,2),(block,3)), false, 0).
holds(2, in_tower((block,2),(block,4)), false, 0).
holds(2, in_tower((block,2),(block,5)), false, 0).
holds(2, in_tower((block,2),(block,6)), false, 0).
holds(2, in_tower((block,3),(block,1)), false, 0).
holds(2, in_tower((block,3),(block,2)), false, 0).
holds(2, in_tower((block,3),(block,3)), false, 0).
holds(2, in_tower((block,3),(block,4)), false, 0).
holds(2, in_tower((block,3),(block,5)), false, 0).
holds(2, in_tower((block,3),(block,6)), false, 0).
holds(2, in_tower((block,4),(block,1)), false, 0).
holds(2, in_tower((block,4),(block,2)), false, 0).
holds(2, in_tower((block,4),(block,3)), false, 0).
holds(2, in_tower((block,4),(block,4)), false, 0).
holds(2, in_tower((block,4),(block,5)), false, 0).
holds(2, in_tower((block,4),(block,6)), false, 0).
holds(2, in_tower((block,5),(block,1)), false, 0).
holds(2, in_tower((block,5),(block,2)), false, 0).
holds(2, in_tower((block,5),(block,3)), false, 0).
holds(2, in_tower((block,5),(block,4)), false, 0).
holds(2, in_tower((block,5),(block,5)), false, 0).
holds(2, in_tower((block,5),(block,6)), false, 0).
holds(2, in_tower((block,6),(block,1)), false, 0).
holds(2, in_tower((block,6),(block,2)), false, 0).
holds(2, in_tower((block,6),(block,3)), false, 0).
holds(2, in_tower((block,6),(block,4)), false, 0).
holds(2, in_tower((block,6),(block,5)), false, 0).
holds(2, in_tower((block,6),(block,6)), false, 0).
holds(2, on((block,1)), puzzle_room_table, 0).
holds(2, on((block,2)), puzzle_room_table, 0).
holds(2, on((block,3)), (block,1), 0).
holds(2, on((block,4)), nothing, 0).
holds(2, on((block,5)), nothing, 0).
holds(2, on((block,6)), nothing, 0).
holds(2, tower_base((block,1),puzzle_room_table), true, 0).
holds(2, tower_base((block,2),puzzle_room_table), true, 0).
holds(2, tower_base((block,3),puzzle_room_table), false, 0).
holds(2, tower_base((block,4),puzzle_room_table), false, 0).
holds(2, tower_base((block,5),puzzle_room_table), false, 0).
holds(2, tower_base((block,6),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 0).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 0).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 0).

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=4']

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 1})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 2})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'puzzle_room_door_handle_outer', 'I': 3})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,puzzle_room_door)', 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'I': 4})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,puzzle_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 5})

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, move(hallway), in(talos), hallway, 1).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 2).
sub_goal(2, talos, grasp(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), puzzle_room_door_handle_outer, 3).
sub_goal(2, talos, actuate(manipulator_arm_2,puzzle_room_door), configuration(puzzle_room_door), open, 4).
sub_goal(2, talos, release(manipulator_arm_2,puzzle_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 5).

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=4']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF14DD2EE0>]
	incrementor = SolveIncrementor(step_start=0, step_increase=1, step_increase_initial=5, step_end_min=5, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 0), range_=None), IncPart(name='plan_module', args=('#inc', 0, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 0, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 0, 1, 5, 'sequential', 'false'), range_=None)]

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 823 rules

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004752599999847007s

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122808s.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024130s with result Satisfiable.

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF169ECCC0>

[22-02-2022_03-42-21] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 0)
	('last_sgoals', 5)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 1)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF169ECCC0>)

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 0). %* None *%
#program plan_module(#inc, 0, false, false). %* None *%
#program optimisation_module(#inc, 0, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 0, 1, 5, sequential, false). %* None *%

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     -1 : Current =      4
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(4)]), ('state_module', [Number(0), Number(0)]), ('plan_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(0), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(0)]), ('action_preconditions', [Number(0)]), ('variable_relations', [Number(0)]), ('abstraction_mappings', [Number(0)]), ('conformance_module', [Number(0), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(1), Number(0)]), ('plan_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(1), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(1)]), ('action_preconditions', [Number(1)]), ('variable_relations', [Number(1)]), ('abstraction_mappings', [Number(1)]), ('conformance_module', [Number(1), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(2), Number(0)]), ('plan_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(2), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(2)]), ('action_preconditions', [Number(2)]), ('variable_relations', [Number(2)]), ('abstraction_mappings', [Number(2)]), ('conformance_module', [Number(2), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(3), Number(0)]), ('plan_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(3), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(3)]), ('action_preconditions', [Number(3)]), ('variable_relations', [Number(3)]), ('abstraction_mappings', [Number(3)]), ('conformance_module', [Number(3), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(4), Number(0)]), ('plan_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(4), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(4)]), ('action_preconditions', [Number(4)]), ('variable_relations', [Number(4)]), ('abstraction_mappings', [Number(4)]), ('conformance_module', [Number(4), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.962251s.

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.346917s with result Satisfiable.

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3091676000003645, Incremental time limit = None
Running cumulative time = 1.3091676000003645, Cumulative time limit = 1800
Used memory = (RSS = 2278.285156Mb, VMS = 2297.312500Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.962251s, Solving = 0.346917s, Total = 1.309168s, Memory = (RSS = 2278.285156Mb, VMS = 2297.312500Mb), Step range = [0-4]), Calls = 1
Final Model :: Total atoms = 21827, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =      4 : Current =      5
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(5)]), ('state_module', [Number(5), Number(0)]), ('plan_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(5), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(5)]), ('action_preconditions', [Number(5)]), ('variable_relations', [Number(5)]), ('abstraction_mappings', [Number(5)]), ('conformance_module', [Number(5), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.267409s.

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042765s with result Unsatisfiable.

[22-02-2022_03-42-22] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31017399999927875, Incremental time limit = None
Running cumulative time = 1.6193415999996432, Cumulative time limit = 1800
Used memory = (RSS = 2281.808594Mb, VMS = 2303.039062Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =      5 : Current =      6
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(6)]), ('state_module', [Number(6), Number(0)]), ('plan_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(6), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(6)]), ('action_preconditions', [Number(6)]), ('variable_relations', [Number(6)]), ('abstraction_mappings', [Number(6)]), ('conformance_module', [Number(6), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273664s.

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.047706s with result Unsatisfiable.

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32136979999995674, Incremental time limit = None
Running cumulative time = 1.9407113999996, Cumulative time limit = 1800
Used memory = (RSS = 2283.835938Mb, VMS = 2303.546875Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =      6 : Current =      7
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(7)]), ('state_module', [Number(7), Number(0)]), ('plan_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(7), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(7)]), ('action_preconditions', [Number(7)]), ('variable_relations', [Number(7)]), ('abstraction_mappings', [Number(7)]), ('conformance_module', [Number(7), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296030s.

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.062483s with result Unsatisfiable.

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35851330000059534, Incremental time limit = None
Running cumulative time = 2.2992247000001953, Cumulative time limit = 1800
Used memory = (RSS = 2286.039062Mb, VMS = 2309.148438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =      7 : Current =      8
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(8)]), ('state_module', [Number(8), Number(0)]), ('plan_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(8), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(8)]), ('action_preconditions', [Number(8)]), ('variable_relations', [Number(8)]), ('abstraction_mappings', [Number(8)]), ('conformance_module', [Number(8), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.295092s.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061718s with result Unsatisfiable.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35681020000083663, Incremental time limit = None
Running cumulative time = 2.656034900001032, Cumulative time limit = 1800
Used memory = (RSS = 2288.296875Mb, VMS = 2310.945312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =      8 : Current =      9
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(9)]), ('state_module', [Number(9), Number(0)]), ('plan_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(9), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(9)]), ('action_preconditions', [Number(9)]), ('variable_relations', [Number(9)]), ('abstraction_mappings', [Number(9)]), ('conformance_module', [Number(9), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.328917s.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059788s with result Unsatisfiable.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3887052999998559, Incremental time limit = None
Running cumulative time = 3.044740200000888, Cumulative time limit = 1800
Used memory = (RSS = 2290.605469Mb, VMS = 2311.503906Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =      9 : Current =     10
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(10)]), ('state_module', [Number(10), Number(0)]), ('plan_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(10), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(10)]), ('action_preconditions', [Number(10)]), ('variable_relations', [Number(10)]), ('abstraction_mappings', [Number(10)]), ('conformance_module', [Number(10), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317641s.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078557s with result Unsatisfiable.

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3961983999997756, Incremental time limit = None
Running cumulative time = 3.4409386000006634, Cumulative time limit = 1800
Used memory = (RSS = 2293.964844Mb, VMS = 2313.472656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     10 : Current =     11
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-24] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(11)]), ('state_module', [Number(11), Number(0)]), ('plan_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(11), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(11)]), ('action_preconditions', [Number(11)]), ('variable_relations', [Number(11)]), ('abstraction_mappings', [Number(11)]), ('conformance_module', [Number(11), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.315337s.

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.092901s with result Unsatisfiable.

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4082382000005964, Incremental time limit = None
Running cumulative time = 3.84917680000126, Cumulative time limit = 1800
Used memory = (RSS = 2302.093750Mb, VMS = 2329.179688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     11 : Current =     12
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(12)]), ('state_module', [Number(12), Number(0)]), ('plan_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(12), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(12)]), ('action_preconditions', [Number(12)]), ('variable_relations', [Number(12)]), ('abstraction_mappings', [Number(12)]), ('conformance_module', [Number(12), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310456s.

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103386s with result Unsatisfiable.

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41384259999995265, Incremental time limit = None
Running cumulative time = 4.2630194000012125, Cumulative time limit = 1800
Used memory = (RSS = 2304.921875Mb, VMS = 2330.800781Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     12 : Current =     13
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(13)]), ('state_module', [Number(13), Number(0)]), ('plan_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(13), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(13)]), ('action_preconditions', [Number(13)]), ('variable_relations', [Number(13)]), ('abstraction_mappings', [Number(13)]), ('conformance_module', [Number(13), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.333801s.

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.135762s with result Unsatisfiable.

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4695635999996739, Incremental time limit = None
Running cumulative time = 4.732583000000886, Cumulative time limit = 1800
Used memory = (RSS = 2307.953125Mb, VMS = 2331.359375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     13 : Current =     14
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(14)]), ('state_module', [Number(14), Number(0)]), ('plan_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(14), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(14)]), ('action_preconditions', [Number(14)]), ('variable_relations', [Number(14)]), ('abstraction_mappings', [Number(14)]), ('conformance_module', [Number(14), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.338850s.

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.154265s with result Unsatisfiable.

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4931148999994548, Incremental time limit = None
Running cumulative time = 5.225697900000341, Cumulative time limit = 1800
Used memory = (RSS = 2310.464844Mb, VMS = 2332.707031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     14 : Current =     15
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(15)]), ('state_module', [Number(15), Number(0)]), ('plan_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(15), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(15)]), ('action_preconditions', [Number(15)]), ('variable_relations', [Number(15)]), ('abstraction_mappings', [Number(15)]), ('conformance_module', [Number(15), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.336912s.

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.119118s with result Unsatisfiable.

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4560303999996904, Incremental time limit = None
Running cumulative time = 5.681728300000032, Cumulative time limit = 1800
Used memory = (RSS = 2313.390625Mb, VMS = 2333.976562Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     15 : Current =     16
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(16)]), ('state_module', [Number(16), Number(0)]), ('plan_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(16), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(16)]), ('action_preconditions', [Number(16)]), ('variable_relations', [Number(16)]), ('abstraction_mappings', [Number(16)]), ('conformance_module', [Number(16), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.332486s.

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.153044s with result Unsatisfiable.

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4855292999991434, Incremental time limit = None
Running cumulative time = 6.167257599999175, Cumulative time limit = 1800
Used memory = (RSS = 2316.257812Mb, VMS = 2349.660156Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     16 : Current =     17
Incrementor step ends | Minimum  =      5 : Maximum =    300

[22-02-2022_03-42-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(17)]), ('state_module', [Number(17), Number(0)]), ('plan_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(0), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(0), Number(1), Number(5), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.339075s.

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.228177s with result Satisfiable.

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5672514999996565, Incremental time limit = None
Running cumulative time = 6.7345090999988315, Cumulative time limit = 1800
Used memory = (RSS = 2323.601562Mb, VMS = 2355.023438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.047922s, Solving = 1.686587s, Total = 6.734509s, Memory = (RSS = 2323.601562Mb, VMS = 2355.023438Mb), Step range = [0-17]), Calls = 14
Final Model :: Total atoms = 27021, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.962251s, Solving = 0.346917s, Total = 1.309168s, Memory = (RSS = 2278.285156Mb, VMS = 2297.312500Mb), Step range = [0-4]
2 : Statistics :: Grounding = 0.267409s, Solving = 0.042765s, Total = 0.310174s, Memory = (RSS = 2281.808594Mb, VMS = 2303.039062Mb), Step range = [5-5]
3 : Statistics :: Grounding = 0.273664s, Solving = 0.047706s, Total = 0.321370s, Memory = (RSS = 2283.835938Mb, VMS = 2303.546875Mb), Step range = [6-6]
4 : Statistics :: Grounding = 0.296030s, Solving = 0.062483s, Total = 0.358513s, Memory = (RSS = 2286.039062Mb, VMS = 2309.148438Mb), Step range = [7-7]
5 : Statistics :: Grounding = 0.295092s, Solving = 0.061718s, Total = 0.356810s, Memory = (RSS = 2288.296875Mb, VMS = 2310.945312Mb), Step range = [8-8]
6 : Statistics :: Grounding = 0.328917s, Solving = 0.059788s, Total = 0.388705s, Memory = (RSS = 2290.605469Mb, VMS = 2311.503906Mb), Step range = [9-9]
7 : Statistics :: Grounding = 0.317641s, Solving = 0.078557s, Total = 0.396198s, Memory = (RSS = 2293.964844Mb, VMS = 2313.472656Mb), Step range = [10-10]
8 : Statistics :: Grounding = 0.315337s, Solving = 0.092901s, Total = 0.408238s, Memory = (RSS = 2302.093750Mb, VMS = 2329.179688Mb), Step range = [11-11]
9 : Statistics :: Grounding = 0.310456s, Solving = 0.103386s, Total = 0.413843s, Memory = (RSS = 2304.921875Mb, VMS = 2330.800781Mb), Step range = [12-12]
10 : Statistics :: Grounding = 0.333801s, Solving = 0.135762s, Total = 0.469564s, Memory = (RSS = 2307.953125Mb, VMS = 2331.359375Mb), Step range = [13-13]
11 : Statistics :: Grounding = 0.338850s, Solving = 0.154265s, Total = 0.493115s, Memory = (RSS = 2310.464844Mb, VMS = 2332.707031Mb), Step range = [14-14]
12 : Statistics :: Grounding = 0.336912s, Solving = 0.119118s, Total = 0.456030s, Memory = (RSS = 2313.390625Mb, VMS = 2333.976562Mb), Step range = [15-15]
13 : Statistics :: Grounding = 0.332486s, Solving = 0.153044s, Total = 0.485529s, Memory = (RSS = 2316.257812Mb, VMS = 2349.660156Mb), Step range = [16-16]
14 : Statistics :: Grounding = 0.339075s, Solving = 0.228177s, Total = 0.567251s, Memory = (RSS = 2323.601562Mb, VMS = 2355.023438Mb), Step range = [17-17]

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 6.734509s due to: Stop condition reached.

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-28] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-42-28] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {}
Sub-goal achievement steps: {}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 5, Last requested goal index = 5, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.047922s, Solving = 1.686587s, Total = 6.734509s, Memory = (RSS = 2323.601562Mb, VMS = 2355.023438Mb), Step range = [0-17]), Calls = 14
Model :: Total atoms = 27021, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 17 :: Actions = 17                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Monolevel problem 1 at level 1 solved.

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Online planning increment 1 finished.

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 1 : Total constraining sub-goal stages = 31 : Goals achieved = 5 : Goals unachieved = 26 : Complete = False

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 2 by method ground-first is [1-1].

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 2 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [6-10]

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [6-10], problem number = 2, increment number = 2

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 6)
	('last_sgoals', 10)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [6-10] : Concurrency disabled : Minimum search length bound enabled with value 21

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 6
last_sgoals = 10
start_step = 17
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 21

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-42-29] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-42-29] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 17 as problem start state.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 17})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(hallway,8,1)', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'closed', 'S': 17})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 17})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'hallway', 'S': 17})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'hallway', 'S': 17})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 17})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'hallway', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 17})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 17})

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 17).
holds(1, complete_tower(red,puzzle_room_table), false, 17).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 17).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 17).
holds(1, configuration(manipulator_limb_1), retracted, 17).
holds(1, configuration(manipulator_limb_2), extended, 17).
holds(1, configuration(puzzle_room_door), open, 17).
holds(1, configuration(starting_room_door), closed, 17).
holds(1, configuration(store_room_door), closed, 17).
holds(1, grasping(manipulator_arm_1), nothing, 17).
holds(1, grasping(manipulator_arm_2), nothing, 17).
holds(1, grasping(manipulator_end_1), nothing, 17).
holds(1, grasping(manipulator_end_2), nothing, 17).
holds(1, in((block,1)), (puzzle_room,5,0), 17).
holds(1, in((block,2)), (puzzle_room,5,0), 17).
holds(1, in((block,3)), (puzzle_room,5,0), 17).
holds(1, in((block,4)), (store_room,0,0), 17).
holds(1, in((block,5)), (store_room,0,0), 17).
holds(1, in((block,6)), (store_room,0,0), 17).
holds(1, in(manipulator_arm_1), (hallway,8,1), 17).
holds(1, in(manipulator_arm_2), (hallway,8,1), 17).
holds(1, in(manipulator_end_1), (hallway,8,1), 17).
holds(1, in(manipulator_end_2), (hallway,8,1), 17).
holds(1, in(manipulator_limb_1), (hallway,8,1), 17).
holds(1, in(manipulator_limb_2), (hallway,8,1), 17).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 17).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 17).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 17).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 17).
holds(1, in(talos), (hallway,8,1), 17).
holds(1, in_tower((block,1),(block,1)), true, 17).
holds(1, in_tower((block,1),(block,2)), false, 17).
holds(1, in_tower((block,1),(block,3)), true, 17).
holds(1, in_tower((block,1),(block,4)), false, 17).
holds(1, in_tower((block,1),(block,5)), false, 17).
holds(1, in_tower((block,1),(block,6)), false, 17).
holds(1, in_tower((block,2),(block,1)), false, 17).
holds(1, in_tower((block,2),(block,2)), true, 17).
holds(1, in_tower((block,2),(block,3)), false, 17).
holds(1, in_tower((block,2),(block,4)), false, 17).
holds(1, in_tower((block,2),(block,5)), false, 17).
holds(1, in_tower((block,2),(block,6)), false, 17).
holds(1, in_tower((block,3),(block,1)), false, 17).
holds(1, in_tower((block,3),(block,2)), false, 17).
holds(1, in_tower((block,3),(block,3)), false, 17).
holds(1, in_tower((block,3),(block,4)), false, 17).
holds(1, in_tower((block,3),(block,5)), false, 17).
holds(1, in_tower((block,3),(block,6)), false, 17).
holds(1, in_tower((block,4),(block,1)), false, 17).
holds(1, in_tower((block,4),(block,2)), false, 17).
holds(1, in_tower((block,4),(block,3)), false, 17).
holds(1, in_tower((block,4),(block,4)), false, 17).
holds(1, in_tower((block,4),(block,5)), false, 17).
holds(1, in_tower((block,4),(block,6)), false, 17).
holds(1, in_tower((block,5),(block,1)), false, 17).
holds(1, in_tower((block,5),(block,2)), false, 17).
holds(1, in_tower((block,5),(block,3)), false, 17).
holds(1, in_tower((block,5),(block,4)), false, 17).
holds(1, in_tower((block,5),(block,5)), false, 17).
holds(1, in_tower((block,5),(block,6)), false, 17).
holds(1, in_tower((block,6),(block,1)), false, 17).
holds(1, in_tower((block,6),(block,2)), false, 17).
holds(1, in_tower((block,6),(block,3)), false, 17).
holds(1, in_tower((block,6),(block,4)), false, 17).
holds(1, in_tower((block,6),(block,5)), false, 17).
holds(1, in_tower((block,6),(block,6)), false, 17).
holds(1, on((block,1)), puzzle_room_table_left, 17).
holds(1, on((block,2)), puzzle_room_table_right, 17).
holds(1, on((block,3)), (block,1), 17).
holds(1, on((block,4)), nothing, 17).
holds(1, on((block,5)), nothing, 17).
holds(1, on((block,6)), nothing, 17).
holds(1, tower_base((block,1),puzzle_room_table), true, 17).
holds(1, tower_base((block,2),puzzle_room_table), true, 17).
holds(1, tower_base((block,3),puzzle_room_table), false, 17).
holds(1, tower_base((block,4),puzzle_room_table), false, 17).
holds(1, tower_base((block,5),puzzle_room_table), false, 17).
holds(1, tower_base((block,6),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 17).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 17).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 17).
holds(2, complete_tower(blue,puzzle_room_table), false, 17).
holds(2, complete_tower(red,puzzle_room_table), false, 17).
holds(2, configuration(manipulator_arm_1), retracted, 17).
holds(2, configuration(manipulator_arm_2), extended, 17).
holds(2, configuration(puzzle_room_door), open, 17).
holds(2, configuration(starting_room_door), closed, 17).
holds(2, configuration(store_room_door), closed, 17).
holds(2, grasping(manipulator_arm_1), nothing, 17).
holds(2, grasping(manipulator_arm_2), nothing, 17).
holds(2, in((block,1)), puzzle_room, 17).
holds(2, in((block,2)), puzzle_room, 17).
holds(2, in((block,3)), puzzle_room, 17).
holds(2, in((block,4)), store_room, 17).
holds(2, in((block,5)), store_room, 17).
holds(2, in((block,6)), store_room, 17).
holds(2, in(manipulator_arm_1), hallway, 17).
holds(2, in(manipulator_arm_2), hallway, 17).
holds(2, in(puzzle_room_table), puzzle_room, 17).
holds(2, in(talos), hallway, 17).
holds(2, in_tower((block,1),(block,1)), true, 17).
holds(2, in_tower((block,1),(block,2)), false, 17).
holds(2, in_tower((block,1),(block,3)), true, 17).
holds(2, in_tower((block,1),(block,4)), false, 17).
holds(2, in_tower((block,1),(block,5)), false, 17).
holds(2, in_tower((block,1),(block,6)), false, 17).
holds(2, in_tower((block,2),(block,1)), false, 17).
holds(2, in_tower((block,2),(block,2)), true, 17).
holds(2, in_tower((block,2),(block,3)), false, 17).
holds(2, in_tower((block,2),(block,4)), false, 17).
holds(2, in_tower((block,2),(block,5)), false, 17).
holds(2, in_tower((block,2),(block,6)), false, 17).
holds(2, in_tower((block,3),(block,1)), false, 17).
holds(2, in_tower((block,3),(block,2)), false, 17).
holds(2, in_tower((block,3),(block,3)), false, 17).
holds(2, in_tower((block,3),(block,4)), false, 17).
holds(2, in_tower((block,3),(block,5)), false, 17).
holds(2, in_tower((block,3),(block,6)), false, 17).
holds(2, in_tower((block,4),(block,1)), false, 17).
holds(2, in_tower((block,4),(block,2)), false, 17).
holds(2, in_tower((block,4),(block,3)), false, 17).
holds(2, in_tower((block,4),(block,4)), false, 17).
holds(2, in_tower((block,4),(block,5)), false, 17).
holds(2, in_tower((block,4),(block,6)), false, 17).
holds(2, in_tower((block,5),(block,1)), false, 17).
holds(2, in_tower((block,5),(block,2)), false, 17).
holds(2, in_tower((block,5),(block,3)), false, 17).
holds(2, in_tower((block,5),(block,4)), false, 17).
holds(2, in_tower((block,5),(block,5)), false, 17).
holds(2, in_tower((block,5),(block,6)), false, 17).
holds(2, in_tower((block,6),(block,1)), false, 17).
holds(2, in_tower((block,6),(block,2)), false, 17).
holds(2, in_tower((block,6),(block,3)), false, 17).
holds(2, in_tower((block,6),(block,4)), false, 17).
holds(2, in_tower((block,6),(block,5)), false, 17).
holds(2, in_tower((block,6),(block,6)), false, 17).
holds(2, on((block,1)), puzzle_room_table, 17).
holds(2, on((block,2)), puzzle_room_table, 17).
holds(2, on((block,3)), (block,1), 17).
holds(2, on((block,4)), nothing, 17).
holds(2, on((block,5)), nothing, 17).
holds(2, on((block,6)), nothing, 17).
holds(2, tower_base((block,1),puzzle_room_table), true, 17).
holds(2, tower_base((block,2),puzzle_room_table), true, 17).
holds(2, tower_base((block,3),puzzle_room_table), false, 17).
holds(2, tower_base((block,4),puzzle_room_table), false, 17).
holds(2, tower_base((block,5),puzzle_room_table), false, 17).
holds(2, tower_base((block,6),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 17).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 17).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 17).

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=21']

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'store_room_door_handle_outer', 'I': 6})
SubGoal({'L': 2, 'R': 'talos', 'A': 'actuate(manipulator_arm_2,store_room_door)', 'F': 'configuration(store_room_door)', 'V': 'open', 'I': 7})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,store_room_door_handle_outer)', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 8})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 9})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 10})

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), store_room_door_handle_outer, 6).
sub_goal(2, talos, actuate(manipulator_arm_2,store_room_door), configuration(store_room_door), open, 7).
sub_goal(2, talos, release(manipulator_arm_2,store_room_door_handle_outer), grasping(manipulator_arm_2), nothing, 8).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 9).
sub_goal(2, talos, move(store_room), in(talos), store_room, 10).

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=21']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF14DD2430>]
	incrementor = SolveIncrementor(step_start=17, step_increase=1, step_increase_initial=5, step_end_min=22, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 17), range_=None), IncPart(name='plan_module', args=('#inc', 17, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 17, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 17, 6, 10, 'sequential', 'false'), range_=None)]

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 823 rules

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004949000000124215s

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.123008s.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024570s with result Satisfiable.

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF169C9630>

[22-02-2022_03-42-29] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 17)
	('last_sgoals', 10)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 6)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF169C9630>)

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 17). %* None *%
#program plan_module(#inc, 17, false, false). %* None *%
#program optimisation_module(#inc, 17, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 17, 6, 10, sequential, false). %* None *%

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     16 : Current =     21
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(21)]), ('state_module', [Number(17), Number(17)]), ('plan_module', [Number(17), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(17), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(17)]), ('action_preconditions', [Number(17)]), ('variable_relations', [Number(17)]), ('abstraction_mappings', [Number(17)]), ('conformance_module', [Number(17), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(18), Number(17)]), ('plan_module', [Number(18), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(18), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(18)]), ('action_preconditions', [Number(18)]), ('variable_relations', [Number(18)]), ('abstraction_mappings', [Number(18)]), ('conformance_module', [Number(18), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(19), Number(17)]), ('plan_module', [Number(19), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(19), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(19)]), ('action_preconditions', [Number(19)]), ('variable_relations', [Number(19)]), ('abstraction_mappings', [Number(19)]), ('conformance_module', [Number(19), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(20), Number(17)]), ('plan_module', [Number(20), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(20), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(20)]), ('action_preconditions', [Number(20)]), ('variable_relations', [Number(20)]), ('abstraction_mappings', [Number(20)]), ('conformance_module', [Number(20), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(21), Number(17)]), ('plan_module', [Number(21), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(21), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(21)]), ('action_preconditions', [Number(21)]), ('variable_relations', [Number(21)]), ('abstraction_mappings', [Number(21)]), ('conformance_module', [Number(21), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.958722s.

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.305621s with result Satisfiable.

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2643428999999742, Incremental time limit = None
Running cumulative time = 1.2643428999999742, Cumulative time limit = 1800
Used memory = (RSS = 2280.183594Mb, VMS = 2299.093750Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.958722s, Solving = 0.305621s, Total = 1.264343s, Memory = (RSS = 2280.183594Mb, VMS = 2299.093750Mb), Step range = [17-21]), Calls = 1
Final Model :: Total atoms = 21829, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     21 : Current =     22
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(22)]), ('state_module', [Number(22), Number(17)]), ('plan_module', [Number(22), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(22), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(22)]), ('action_preconditions', [Number(22)]), ('variable_relations', [Number(22)]), ('abstraction_mappings', [Number(22)]), ('conformance_module', [Number(22), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.246112s.

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.039204s with result Unsatisfiable.

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.28531650000059017, Incremental time limit = None
Running cumulative time = 1.5496594000005643, Cumulative time limit = 1800
Used memory = (RSS = 2283.679688Mb, VMS = 2304.820312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     22 : Current =     23
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(23)]), ('state_module', [Number(23), Number(17)]), ('plan_module', [Number(23), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(23), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(23)]), ('action_preconditions', [Number(23)]), ('variable_relations', [Number(23)]), ('abstraction_mappings', [Number(23)]), ('conformance_module', [Number(23), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.292184s.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045466s with result Unsatisfiable.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33765049999965413, Incremental time limit = None
Running cumulative time = 1.8873099000002185, Cumulative time limit = 1800
Used memory = (RSS = 2285.695312Mb, VMS = 2305.320312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     23 : Current =     24
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(24)]), ('state_module', [Number(24), Number(17)]), ('plan_module', [Number(24), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(24), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(24)]), ('action_preconditions', [Number(24)]), ('variable_relations', [Number(24)]), ('abstraction_mappings', [Number(24)]), ('conformance_module', [Number(24), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305949s.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044054s with result Unsatisfiable.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.350002800000766, Incremental time limit = None
Running cumulative time = 2.2373127000009845, Cumulative time limit = 1800
Used memory = (RSS = 2288.015625Mb, VMS = 2310.929688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     24 : Current =     25
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(25)]), ('state_module', [Number(25), Number(17)]), ('plan_module', [Number(25), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(25), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(25)]), ('action_preconditions', [Number(25)]), ('variable_relations', [Number(25)]), ('abstraction_mappings', [Number(25)]), ('conformance_module', [Number(25), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.282145s.

[22-02-2022_03-42-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050299s with result Unsatisfiable.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3324442999992243, Incremental time limit = None
Running cumulative time = 2.569757000000209, Cumulative time limit = 1800
Used memory = (RSS = 2290.257812Mb, VMS = 2312.726562Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     25 : Current =     26
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(26)]), ('state_module', [Number(26), Number(17)]), ('plan_module', [Number(26), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(26), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(26)]), ('action_preconditions', [Number(26)]), ('variable_relations', [Number(26)]), ('abstraction_mappings', [Number(26)]), ('conformance_module', [Number(26), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.296739s.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048676s with result Unsatisfiable.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.345415700000558, Incremental time limit = None
Running cumulative time = 2.915172700000767, Cumulative time limit = 1800
Used memory = (RSS = 2292.492188Mb, VMS = 2313.292969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     26 : Current =     27
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(27)]), ('state_module', [Number(27), Number(17)]), ('plan_module', [Number(27), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(27), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(27)]), ('action_preconditions', [Number(27)]), ('variable_relations', [Number(27)]), ('abstraction_mappings', [Number(27)]), ('conformance_module', [Number(27), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.318195s.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064223s with result Unsatisfiable.

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38241889999972045, Incremental time limit = None
Running cumulative time = 3.2975916000004872, Cumulative time limit = 1800
Used memory = (RSS = 2295.695312Mb, VMS = 2315.265625Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     27 : Current =     28
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-32] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(28)]), ('state_module', [Number(28), Number(17)]), ('plan_module', [Number(28), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(28), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(28)]), ('action_preconditions', [Number(28)]), ('variable_relations', [Number(28)]), ('abstraction_mappings', [Number(28)]), ('conformance_module', [Number(28), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.320921s.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065698s with result Unsatisfiable.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3866195999999036, Incremental time limit = None
Running cumulative time = 3.684211200000391, Cumulative time limit = 1800
Used memory = (RSS = 2303.613281Mb, VMS = 2330.984375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     28 : Current =     29
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(29)]), ('state_module', [Number(29), Number(17)]), ('plan_module', [Number(29), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(29), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(29)]), ('action_preconditions', [Number(29)]), ('variable_relations', [Number(29)]), ('abstraction_mappings', [Number(29)]), ('conformance_module', [Number(29), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.322155s.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.072929s with result Unsatisfiable.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39508349999960046, Incremental time limit = None
Running cumulative time = 4.079294699999991, Cumulative time limit = 1800
Used memory = (RSS = 2306.695312Mb, VMS = 2332.601562Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     29 : Current =     30
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(30)]), ('state_module', [Number(30), Number(17)]), ('plan_module', [Number(30), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(30), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(30)]), ('action_preconditions', [Number(30)]), ('variable_relations', [Number(30)]), ('abstraction_mappings', [Number(30)]), ('conformance_module', [Number(30), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.345853s.

[22-02-2022_03-42-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.103642s with result Unsatisfiable.

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.44949460000043473, Incremental time limit = None
Running cumulative time = 4.528789300000426, Cumulative time limit = 1800
Used memory = (RSS = 2309.703125Mb, VMS = 2333.167969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     30 : Current =     31
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(31)]), ('state_module', [Number(31), Number(17)]), ('plan_module', [Number(31), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(31), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.335393s.

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.104756s with result Unsatisfiable.

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4401489000001675, Incremental time limit = None
Running cumulative time = 4.9689382000005935, Cumulative time limit = 1800
Used memory = (RSS = 2312.484375Mb, VMS = 2335.222656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     31 : Current =     32
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(32)]), ('state_module', [Number(32), Number(17)]), ('plan_module', [Number(32), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(32), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.334701s.

[22-02-2022_03-42-34] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108474s with result Unsatisfiable.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4431750000003376, Incremental time limit = None
Running cumulative time = 5.412113200000931, Cumulative time limit = 1800
Used memory = (RSS = 2315.210938Mb, VMS = 2335.781250Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     32 : Current =     33
Incrementor step ends | Minimum  =     22 : Maximum =    300

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(33)]), ('state_module', [Number(33), Number(17)]), ('plan_module', [Number(33), Number(17), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(17), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(17), Number(6), Number(10), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.346299s.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.232728s with result Satisfiable.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5790265999994517, Incremental time limit = None
Running cumulative time = 5.991139800000383, Cumulative time limit = 1800
Used memory = (RSS = 2321.777344Mb, VMS = 2355.296875Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.705370s, Solving = 1.285770s, Total = 5.991140s, Memory = (RSS = 2321.777344Mb, VMS = 2355.296875Mb), Step range = [17-33]), Calls = 13
Final Model :: Total atoms = 26626, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.958722s, Solving = 0.305621s, Total = 1.264343s, Memory = (RSS = 2280.183594Mb, VMS = 2299.093750Mb), Step range = [17-21]
2 : Statistics :: Grounding = 0.246112s, Solving = 0.039204s, Total = 0.285317s, Memory = (RSS = 2283.679688Mb, VMS = 2304.820312Mb), Step range = [22-22]
3 : Statistics :: Grounding = 0.292184s, Solving = 0.045466s, Total = 0.337650s, Memory = (RSS = 2285.695312Mb, VMS = 2305.320312Mb), Step range = [23-23]
4 : Statistics :: Grounding = 0.305949s, Solving = 0.044054s, Total = 0.350003s, Memory = (RSS = 2288.015625Mb, VMS = 2310.929688Mb), Step range = [24-24]
5 : Statistics :: Grounding = 0.282145s, Solving = 0.050299s, Total = 0.332444s, Memory = (RSS = 2290.257812Mb, VMS = 2312.726562Mb), Step range = [25-25]
6 : Statistics :: Grounding = 0.296739s, Solving = 0.048676s, Total = 0.345416s, Memory = (RSS = 2292.492188Mb, VMS = 2313.292969Mb), Step range = [26-26]
7 : Statistics :: Grounding = 0.318195s, Solving = 0.064223s, Total = 0.382419s, Memory = (RSS = 2295.695312Mb, VMS = 2315.265625Mb), Step range = [27-27]
8 : Statistics :: Grounding = 0.320921s, Solving = 0.065698s, Total = 0.386620s, Memory = (RSS = 2303.613281Mb, VMS = 2330.984375Mb), Step range = [28-28]
9 : Statistics :: Grounding = 0.322155s, Solving = 0.072929s, Total = 0.395083s, Memory = (RSS = 2306.695312Mb, VMS = 2332.601562Mb), Step range = [29-29]
10 : Statistics :: Grounding = 0.345853s, Solving = 0.103642s, Total = 0.449495s, Memory = (RSS = 2309.703125Mb, VMS = 2333.167969Mb), Step range = [30-30]
11 : Statistics :: Grounding = 0.335393s, Solving = 0.104756s, Total = 0.440149s, Memory = (RSS = 2312.484375Mb, VMS = 2335.222656Mb), Step range = [31-31]
12 : Statistics :: Grounding = 0.334701s, Solving = 0.108474s, Total = 0.443175s, Memory = (RSS = 2315.210938Mb, VMS = 2335.781250Mb), Step range = [32-32]
13 : Statistics :: Grounding = 0.346299s, Solving = 0.232728s, Total = 0.579027s, Memory = (RSS = 2321.777344Mb, VMS = 2355.296875Mb), Step range = [33-33]

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 5.991140s due to: Stop condition reached.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-35] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 10, Last requested goal index = 10, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 4.705370s, Solving = 1.285770s, Total = 5.991140s, Memory = (RSS = 2321.777344Mb, VMS = 2355.296875Mb), Step range = [17-33]), Calls = 13
Model :: Total atoms = 26626, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 16 :: Actions = 16                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 1 solved.

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Online planning increment 2 finished.

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 2 : Total constraining sub-goal stages = 31 : Goals achieved = 10 : Goals unachieved = 21 : Complete = False

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 3 by method ground-first is [1-1].

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 3 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-15]

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [11-15], problem number = 3, increment number = 3

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 15)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [11-15] : Concurrency disabled : Minimum search length bound enabled with value 37

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 15
start_step = 33
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 37

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-42-36] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-42-36] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 33 as problem start state.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 33})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 33})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,5,1)', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 33})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 33})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 33})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 33})

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 33).
holds(1, complete_tower(red,puzzle_room_table), false, 33).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 33).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 33).
holds(1, configuration(manipulator_limb_1), retracted, 33).
holds(1, configuration(manipulator_limb_2), retracted, 33).
holds(1, configuration(puzzle_room_door), open, 33).
holds(1, configuration(starting_room_door), closed, 33).
holds(1, configuration(store_room_door), open, 33).
holds(1, grasping(manipulator_arm_1), nothing, 33).
holds(1, grasping(manipulator_arm_2), nothing, 33).
holds(1, grasping(manipulator_end_1), nothing, 33).
holds(1, grasping(manipulator_end_2), nothing, 33).
holds(1, in((block,1)), (puzzle_room,5,0), 33).
holds(1, in((block,2)), (puzzle_room,5,0), 33).
holds(1, in((block,3)), (puzzle_room,5,0), 33).
holds(1, in((block,4)), (store_room,0,0), 33).
holds(1, in((block,5)), (store_room,0,0), 33).
holds(1, in((block,6)), (store_room,0,0), 33).
holds(1, in(manipulator_arm_1), (store_room,5,1), 33).
holds(1, in(manipulator_arm_2), (store_room,5,1), 33).
holds(1, in(manipulator_end_1), (store_room,5,1), 33).
holds(1, in(manipulator_end_2), (store_room,5,1), 33).
holds(1, in(manipulator_limb_1), (store_room,5,1), 33).
holds(1, in(manipulator_limb_2), (store_room,5,1), 33).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 33).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 33).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 33).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 33).
holds(1, in(talos), (store_room,5,1), 33).
holds(1, in_tower((block,1),(block,1)), true, 33).
holds(1, in_tower((block,1),(block,2)), false, 33).
holds(1, in_tower((block,1),(block,3)), true, 33).
holds(1, in_tower((block,1),(block,4)), false, 33).
holds(1, in_tower((block,1),(block,5)), false, 33).
holds(1, in_tower((block,1),(block,6)), false, 33).
holds(1, in_tower((block,2),(block,1)), false, 33).
holds(1, in_tower((block,2),(block,2)), true, 33).
holds(1, in_tower((block,2),(block,3)), false, 33).
holds(1, in_tower((block,2),(block,4)), false, 33).
holds(1, in_tower((block,2),(block,5)), false, 33).
holds(1, in_tower((block,2),(block,6)), false, 33).
holds(1, in_tower((block,3),(block,1)), false, 33).
holds(1, in_tower((block,3),(block,2)), false, 33).
holds(1, in_tower((block,3),(block,3)), false, 33).
holds(1, in_tower((block,3),(block,4)), false, 33).
holds(1, in_tower((block,3),(block,5)), false, 33).
holds(1, in_tower((block,3),(block,6)), false, 33).
holds(1, in_tower((block,4),(block,1)), false, 33).
holds(1, in_tower((block,4),(block,2)), false, 33).
holds(1, in_tower((block,4),(block,3)), false, 33).
holds(1, in_tower((block,4),(block,4)), false, 33).
holds(1, in_tower((block,4),(block,5)), false, 33).
holds(1, in_tower((block,4),(block,6)), false, 33).
holds(1, in_tower((block,5),(block,1)), false, 33).
holds(1, in_tower((block,5),(block,2)), false, 33).
holds(1, in_tower((block,5),(block,3)), false, 33).
holds(1, in_tower((block,5),(block,4)), false, 33).
holds(1, in_tower((block,5),(block,5)), false, 33).
holds(1, in_tower((block,5),(block,6)), false, 33).
holds(1, in_tower((block,6),(block,1)), false, 33).
holds(1, in_tower((block,6),(block,2)), false, 33).
holds(1, in_tower((block,6),(block,3)), false, 33).
holds(1, in_tower((block,6),(block,4)), false, 33).
holds(1, in_tower((block,6),(block,5)), false, 33).
holds(1, in_tower((block,6),(block,6)), false, 33).
holds(1, on((block,1)), puzzle_room_table_left, 33).
holds(1, on((block,2)), puzzle_room_table_right, 33).
holds(1, on((block,3)), (block,1), 33).
holds(1, on((block,4)), nothing, 33).
holds(1, on((block,5)), nothing, 33).
holds(1, on((block,6)), nothing, 33).
holds(1, tower_base((block,1),puzzle_room_table), true, 33).
holds(1, tower_base((block,2),puzzle_room_table), true, 33).
holds(1, tower_base((block,3),puzzle_room_table), false, 33).
holds(1, tower_base((block,4),puzzle_room_table), false, 33).
holds(1, tower_base((block,5),puzzle_room_table), false, 33).
holds(1, tower_base((block,6),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 33).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 33).
holds(2, complete_tower(blue,puzzle_room_table), false, 33).
holds(2, complete_tower(red,puzzle_room_table), false, 33).
holds(2, configuration(manipulator_arm_1), retracted, 33).
holds(2, configuration(manipulator_arm_2), retracted, 33).
holds(2, configuration(puzzle_room_door), open, 33).
holds(2, configuration(starting_room_door), closed, 33).
holds(2, configuration(store_room_door), open, 33).
holds(2, grasping(manipulator_arm_1), nothing, 33).
holds(2, grasping(manipulator_arm_2), nothing, 33).
holds(2, in((block,1)), puzzle_room, 33).
holds(2, in((block,2)), puzzle_room, 33).
holds(2, in((block,3)), puzzle_room, 33).
holds(2, in((block,4)), store_room, 33).
holds(2, in((block,5)), store_room, 33).
holds(2, in((block,6)), store_room, 33).
holds(2, in(manipulator_arm_1), store_room, 33).
holds(2, in(manipulator_arm_2), store_room, 33).
holds(2, in(puzzle_room_table), puzzle_room, 33).
holds(2, in(talos), store_room, 33).
holds(2, in_tower((block,1),(block,1)), true, 33).
holds(2, in_tower((block,1),(block,2)), false, 33).
holds(2, in_tower((block,1),(block,3)), true, 33).
holds(2, in_tower((block,1),(block,4)), false, 33).
holds(2, in_tower((block,1),(block,5)), false, 33).
holds(2, in_tower((block,1),(block,6)), false, 33).
holds(2, in_tower((block,2),(block,1)), false, 33).
holds(2, in_tower((block,2),(block,2)), true, 33).
holds(2, in_tower((block,2),(block,3)), false, 33).
holds(2, in_tower((block,2),(block,4)), false, 33).
holds(2, in_tower((block,2),(block,5)), false, 33).
holds(2, in_tower((block,2),(block,6)), false, 33).
holds(2, in_tower((block,3),(block,1)), false, 33).
holds(2, in_tower((block,3),(block,2)), false, 33).
holds(2, in_tower((block,3),(block,3)), false, 33).
holds(2, in_tower((block,3),(block,4)), false, 33).
holds(2, in_tower((block,3),(block,5)), false, 33).
holds(2, in_tower((block,3),(block,6)), false, 33).
holds(2, in_tower((block,4),(block,1)), false, 33).
holds(2, in_tower((block,4),(block,2)), false, 33).
holds(2, in_tower((block,4),(block,3)), false, 33).
holds(2, in_tower((block,4),(block,4)), false, 33).
holds(2, in_tower((block,4),(block,5)), false, 33).
holds(2, in_tower((block,4),(block,6)), false, 33).
holds(2, in_tower((block,5),(block,1)), false, 33).
holds(2, in_tower((block,5),(block,2)), false, 33).
holds(2, in_tower((block,5),(block,3)), false, 33).
holds(2, in_tower((block,5),(block,4)), false, 33).
holds(2, in_tower((block,5),(block,5)), false, 33).
holds(2, in_tower((block,5),(block,6)), false, 33).
holds(2, in_tower((block,6),(block,1)), false, 33).
holds(2, in_tower((block,6),(block,2)), false, 33).
holds(2, in_tower((block,6),(block,3)), false, 33).
holds(2, in_tower((block,6),(block,4)), false, 33).
holds(2, in_tower((block,6),(block,5)), false, 33).
holds(2, in_tower((block,6),(block,6)), false, 33).
holds(2, on((block,1)), puzzle_room_table, 33).
holds(2, on((block,2)), puzzle_room_table, 33).
holds(2, on((block,3)), (block,1), 33).
holds(2, on((block,4)), nothing, 33).
holds(2, on((block,5)), nothing, 33).
holds(2, on((block,6)), nothing, 33).
holds(2, tower_base((block,1),puzzle_room_table), true, 33).
holds(2, tower_base((block,2),puzzle_room_table), true, 33).
holds(2, tower_base((block,3),puzzle_room_table), false, 33).
holds(2, tower_base((block,4),puzzle_room_table), false, 33).
holds(2, tower_base((block,5),puzzle_room_table), false, 33).
holds(2, tower_base((block,6),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 33).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 33).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 33).

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=37']

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 11})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 12})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'I': 13})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 14})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'I': 15})

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 11).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 12).
sub_goal(2, talos, grasp(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), (block,6), 13).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 14).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), (block,5), 15).

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=37']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EEA6BFAEE0>]
	incrementor = SolveIncrementor(step_start=33, step_increase=1, step_increase_initial=5, step_end_min=38, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 33), range_=None), IncPart(name='plan_module', args=('#inc', 33, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 33, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 33, 11, 15, 'sequential', 'false'), range_=None)]

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 823 rules

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.005466499999783991s

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.140269s.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024181s with result Satisfiable.

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF169B79A0>

[22-02-2022_03-42-36] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 33)
	('last_sgoals', 15)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF169B79A0>)

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 33). %* None *%
#program plan_module(#inc, 33, false, false). %* None *%
#program optimisation_module(#inc, 33, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 33, 11, 15, sequential, false). %* None *%

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     32 : Current =     37
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(37)]), ('state_module', [Number(33), Number(33)]), ('plan_module', [Number(33), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(33), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(33)]), ('plan_module', [Number(34), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(34), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(33)]), ('plan_module', [Number(35), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(35), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(33)]), ('plan_module', [Number(36), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(36), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(33)]), ('plan_module', [Number(37), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(37), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.945335s.

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.345646s with result Satisfiable.

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2909807000005458, Incremental time limit = None
Running cumulative time = 1.2909807000005458, Cumulative time limit = 1800
Used memory = (RSS = 2281.753906Mb, VMS = 2300.824219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.945335s, Solving = 0.345646s, Total = 1.290981s, Memory = (RSS = 2281.753906Mb, VMS = 2300.824219Mb), Step range = [33-37]), Calls = 1
Final Model :: Total atoms = 21829, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     37 : Current =     38
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(38)]), ('state_module', [Number(38), Number(33)]), ('plan_module', [Number(38), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(38), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.292921s.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.046559s with result Unsatisfiable.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3394793000006757, Incremental time limit = None
Running cumulative time = 1.6304600000012215, Cumulative time limit = 1800
Used memory = (RSS = 2285.500000Mb, VMS = 2306.546875Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     38 : Current =     39
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(39)]), ('state_module', [Number(39), Number(33)]), ('plan_module', [Number(39), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(39), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.288219s.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048858s with result Unsatisfiable.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3370766999996704, Incremental time limit = None
Running cumulative time = 1.9675367000008919, Cumulative time limit = 1800
Used memory = (RSS = 2287.355469Mb, VMS = 2307.050781Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     39 : Current =     40
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(40), Number(33)]), ('plan_module', [Number(40), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(40), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.282156s.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.049460s with result Unsatisfiable.

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3316162000000986, Incremental time limit = None
Running cumulative time = 2.2991529000009905, Cumulative time limit = 1800
Used memory = (RSS = 2289.648438Mb, VMS = 2312.652344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-38] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(33)]), ('plan_module', [Number(41), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(41), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.299703s.

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053279s with result Unsatisfiable.

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3529828999999154, Incremental time limit = None
Running cumulative time = 2.652135800000906, Cumulative time limit = 1800
Used memory = (RSS = 2291.835938Mb, VMS = 2314.449219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(33)]), ('plan_module', [Number(42), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(42), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.338912s.

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061076s with result Unsatisfiable.

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3999883000005866, Incremental time limit = None
Running cumulative time = 3.0521241000014925, Cumulative time limit = 1800
Used memory = (RSS = 2294.156250Mb, VMS = 2315.011719Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     42 : Current =     43
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-39] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(43)]), ('state_module', [Number(43), Number(33)]), ('plan_module', [Number(43), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(43), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(43)]), ('action_preconditions', [Number(43)]), ('variable_relations', [Number(43)]), ('abstraction_mappings', [Number(43)]), ('conformance_module', [Number(43), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.341934s.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.061831s with result Unsatisfiable.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4037646999995559, Incremental time limit = None
Running cumulative time = 3.4558888000010484, Cumulative time limit = 1800
Used memory = (RSS = 2297.449219Mb, VMS = 2316.980469Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     43 : Current =     44
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(44)]), ('state_module', [Number(44), Number(33)]), ('plan_module', [Number(44), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(44), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(44)]), ('action_preconditions', [Number(44)]), ('variable_relations', [Number(44)]), ('abstraction_mappings', [Number(44)]), ('conformance_module', [Number(44), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310192s.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.081278s with result Unsatisfiable.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39146960000016406, Incremental time limit = None
Running cumulative time = 3.8473584000012124, Cumulative time limit = 1800
Used memory = (RSS = 2305.484375Mb, VMS = 2332.714844Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     44 : Current =     45
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(45)]), ('state_module', [Number(45), Number(33)]), ('plan_module', [Number(45), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(45), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(45)]), ('action_preconditions', [Number(45)]), ('variable_relations', [Number(45)]), ('abstraction_mappings', [Number(45)]), ('conformance_module', [Number(45), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.359636s.

[22-02-2022_03-42-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.092826s with result Unsatisfiable.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.452462000000196, Incremental time limit = None
Running cumulative time = 4.299820400001408, Cumulative time limit = 1800
Used memory = (RSS = 2308.515625Mb, VMS = 2334.332031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     45 : Current =     46
Incrementor step ends | Minimum  =     38 : Maximum =    300

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(46)]), ('state_module', [Number(46), Number(33)]), ('plan_module', [Number(46), Number(33), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(33), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(33), Number(11), Number(15), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.362961s.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.118172s with result Satisfiable.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4811327000006713, Incremental time limit = None
Running cumulative time = 4.78095310000208, Cumulative time limit = 1800
Used memory = (RSS = 2314.828125Mb, VMS = 2338.398438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.821969s, Solving = 0.958984s, Total = 4.780953s, Memory = (RSS = 2314.828125Mb, VMS = 2338.398438Mb), Step range = [33-46]), Calls = 10
Final Model :: Total atoms = 25420, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.945335s, Solving = 0.345646s, Total = 1.290981s, Memory = (RSS = 2281.753906Mb, VMS = 2300.824219Mb), Step range = [33-37]
2 : Statistics :: Grounding = 0.292921s, Solving = 0.046559s, Total = 0.339479s, Memory = (RSS = 2285.500000Mb, VMS = 2306.546875Mb), Step range = [38-38]
3 : Statistics :: Grounding = 0.288219s, Solving = 0.048858s, Total = 0.337077s, Memory = (RSS = 2287.355469Mb, VMS = 2307.050781Mb), Step range = [39-39]
4 : Statistics :: Grounding = 0.282156s, Solving = 0.049460s, Total = 0.331616s, Memory = (RSS = 2289.648438Mb, VMS = 2312.652344Mb), Step range = [40-40]
5 : Statistics :: Grounding = 0.299703s, Solving = 0.053279s, Total = 0.352983s, Memory = (RSS = 2291.835938Mb, VMS = 2314.449219Mb), Step range = [41-41]
6 : Statistics :: Grounding = 0.338912s, Solving = 0.061076s, Total = 0.399988s, Memory = (RSS = 2294.156250Mb, VMS = 2315.011719Mb), Step range = [42-42]
7 : Statistics :: Grounding = 0.341934s, Solving = 0.061831s, Total = 0.403765s, Memory = (RSS = 2297.449219Mb, VMS = 2316.980469Mb), Step range = [43-43]
8 : Statistics :: Grounding = 0.310192s, Solving = 0.081278s, Total = 0.391470s, Memory = (RSS = 2305.484375Mb, VMS = 2332.714844Mb), Step range = [44-44]
9 : Statistics :: Grounding = 0.359636s, Solving = 0.092826s, Total = 0.452462s, Memory = (RSS = 2308.515625Mb, VMS = 2334.332031Mb), Step range = [45-45]
10 : Statistics :: Grounding = 0.362961s, Solving = 0.118172s, Total = 0.481133s, Memory = (RSS = 2314.828125Mb, VMS = 2338.398438Mb), Step range = [46-46]

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 4.780953s due to: Stop condition reached.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-41] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 15, Last requested goal index = 15, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 3.821969s, Solving = 0.958984s, Total = 4.780953s, Memory = (RSS = 2314.828125Mb, VMS = 2338.398438Mb), Step range = [33-46]), Calls = 10
Model :: Total atoms = 25420, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 13 :: Actions = 13                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Monolevel problem 3 at level 1 solved.

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Online planning increment 3 finished.

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 3 : Total constraining sub-goal stages = 31 : Goals achieved = 15 : Goals unachieved = 16 : Complete = False

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 4 by method ground-first is [1-1].

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 4 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [16-20]

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [16-20], problem number = 4, increment number = 4

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 16)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [16-20] : Concurrency disabled : Minimum search length bound enabled with value 50

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 16
last_sgoals = 20
start_step = 46
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 50

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-42-42] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-42-42] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 46 as problem start state.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,6))', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 46})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 46})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,6)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,0,0)', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 46})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 46})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 46})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 46})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'store_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 46})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 46})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 46})

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 46).
holds(1, complete_tower(red,puzzle_room_table), false, 46).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 46).
holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 46).
holds(1, configuration(manipulator_limb_1), extended, 46).
holds(1, configuration(manipulator_limb_2), retracted, 46).
holds(1, configuration(puzzle_room_door), open, 46).
holds(1, configuration(starting_room_door), closed, 46).
holds(1, configuration(store_room_door), open, 46).
holds(1, grasping(manipulator_arm_1), (block,5), 46).
holds(1, grasping(manipulator_arm_2), (block,6), 46).
holds(1, grasping(manipulator_end_1), (block,5), 46).
holds(1, grasping(manipulator_end_2), (block,6), 46).
holds(1, in((block,1)), (puzzle_room,5,0), 46).
holds(1, in((block,2)), (puzzle_room,5,0), 46).
holds(1, in((block,3)), (puzzle_room,5,0), 46).
holds(1, in((block,4)), (store_room,0,0), 46).
holds(1, in((block,5)), (store_room,0,0), 46).
holds(1, in((block,6)), (store_room,0,0), 46).
holds(1, in(manipulator_arm_1), (store_room,0,0), 46).
holds(1, in(manipulator_arm_2), (store_room,0,0), 46).
holds(1, in(manipulator_end_1), (store_room,0,0), 46).
holds(1, in(manipulator_end_2), (store_room,0,0), 46).
holds(1, in(manipulator_limb_1), (store_room,0,0), 46).
holds(1, in(manipulator_limb_2), (store_room,0,0), 46).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 46).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 46).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 46).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 46).
holds(1, in(talos), (store_room,0,0), 46).
holds(1, in_tower((block,1),(block,1)), true, 46).
holds(1, in_tower((block,1),(block,2)), false, 46).
holds(1, in_tower((block,1),(block,3)), true, 46).
holds(1, in_tower((block,1),(block,4)), false, 46).
holds(1, in_tower((block,1),(block,5)), false, 46).
holds(1, in_tower((block,1),(block,6)), false, 46).
holds(1, in_tower((block,2),(block,1)), false, 46).
holds(1, in_tower((block,2),(block,2)), true, 46).
holds(1, in_tower((block,2),(block,3)), false, 46).
holds(1, in_tower((block,2),(block,4)), false, 46).
holds(1, in_tower((block,2),(block,5)), false, 46).
holds(1, in_tower((block,2),(block,6)), false, 46).
holds(1, in_tower((block,3),(block,1)), false, 46).
holds(1, in_tower((block,3),(block,2)), false, 46).
holds(1, in_tower((block,3),(block,3)), false, 46).
holds(1, in_tower((block,3),(block,4)), false, 46).
holds(1, in_tower((block,3),(block,5)), false, 46).
holds(1, in_tower((block,3),(block,6)), false, 46).
holds(1, in_tower((block,4),(block,1)), false, 46).
holds(1, in_tower((block,4),(block,2)), false, 46).
holds(1, in_tower((block,4),(block,3)), false, 46).
holds(1, in_tower((block,4),(block,4)), false, 46).
holds(1, in_tower((block,4),(block,5)), false, 46).
holds(1, in_tower((block,4),(block,6)), false, 46).
holds(1, in_tower((block,5),(block,1)), false, 46).
holds(1, in_tower((block,5),(block,2)), false, 46).
holds(1, in_tower((block,5),(block,3)), false, 46).
holds(1, in_tower((block,5),(block,4)), false, 46).
holds(1, in_tower((block,5),(block,5)), false, 46).
holds(1, in_tower((block,5),(block,6)), false, 46).
holds(1, in_tower((block,6),(block,1)), false, 46).
holds(1, in_tower((block,6),(block,2)), false, 46).
holds(1, in_tower((block,6),(block,3)), false, 46).
holds(1, in_tower((block,6),(block,4)), false, 46).
holds(1, in_tower((block,6),(block,5)), false, 46).
holds(1, in_tower((block,6),(block,6)), false, 46).
holds(1, on((block,1)), puzzle_room_table_left, 46).
holds(1, on((block,2)), puzzle_room_table_right, 46).
holds(1, on((block,3)), (block,1), 46).
holds(1, on((block,4)), nothing, 46).
holds(1, on((block,5)), nothing, 46).
holds(1, on((block,6)), nothing, 46).
holds(1, tower_base((block,1),puzzle_room_table), true, 46).
holds(1, tower_base((block,2),puzzle_room_table), true, 46).
holds(1, tower_base((block,3),puzzle_room_table), false, 46).
holds(1, tower_base((block,4),puzzle_room_table), false, 46).
holds(1, tower_base((block,5),puzzle_room_table), false, 46).
holds(1, tower_base((block,6),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 46).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 46).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 46).
holds(2, complete_tower(blue,puzzle_room_table), false, 46).
holds(2, complete_tower(red,puzzle_room_table), false, 46).
holds(2, configuration(manipulator_arm_1), extended, 46).
holds(2, configuration(manipulator_arm_2), retracted, 46).
holds(2, configuration(puzzle_room_door), open, 46).
holds(2, configuration(starting_room_door), closed, 46).
holds(2, configuration(store_room_door), open, 46).
holds(2, grasping(manipulator_arm_1), (block,5), 46).
holds(2, grasping(manipulator_arm_2), (block,6), 46).
holds(2, in((block,1)), puzzle_room, 46).
holds(2, in((block,2)), puzzle_room, 46).
holds(2, in((block,3)), puzzle_room, 46).
holds(2, in((block,4)), store_room, 46).
holds(2, in((block,5)), store_room, 46).
holds(2, in((block,6)), store_room, 46).
holds(2, in(manipulator_arm_1), store_room, 46).
holds(2, in(manipulator_arm_2), store_room, 46).
holds(2, in(puzzle_room_table), puzzle_room, 46).
holds(2, in(talos), store_room, 46).
holds(2, in_tower((block,1),(block,1)), true, 46).
holds(2, in_tower((block,1),(block,2)), false, 46).
holds(2, in_tower((block,1),(block,3)), true, 46).
holds(2, in_tower((block,1),(block,4)), false, 46).
holds(2, in_tower((block,1),(block,5)), false, 46).
holds(2, in_tower((block,1),(block,6)), false, 46).
holds(2, in_tower((block,2),(block,1)), false, 46).
holds(2, in_tower((block,2),(block,2)), true, 46).
holds(2, in_tower((block,2),(block,3)), false, 46).
holds(2, in_tower((block,2),(block,4)), false, 46).
holds(2, in_tower((block,2),(block,5)), false, 46).
holds(2, in_tower((block,2),(block,6)), false, 46).
holds(2, in_tower((block,3),(block,1)), false, 46).
holds(2, in_tower((block,3),(block,2)), false, 46).
holds(2, in_tower((block,3),(block,3)), false, 46).
holds(2, in_tower((block,3),(block,4)), false, 46).
holds(2, in_tower((block,3),(block,5)), false, 46).
holds(2, in_tower((block,3),(block,6)), false, 46).
holds(2, in_tower((block,4),(block,1)), false, 46).
holds(2, in_tower((block,4),(block,2)), false, 46).
holds(2, in_tower((block,4),(block,3)), false, 46).
holds(2, in_tower((block,4),(block,4)), false, 46).
holds(2, in_tower((block,4),(block,5)), false, 46).
holds(2, in_tower((block,4),(block,6)), false, 46).
holds(2, in_tower((block,5),(block,1)), false, 46).
holds(2, in_tower((block,5),(block,2)), false, 46).
holds(2, in_tower((block,5),(block,3)), false, 46).
holds(2, in_tower((block,5),(block,4)), false, 46).
holds(2, in_tower((block,5),(block,5)), false, 46).
holds(2, in_tower((block,5),(block,6)), false, 46).
holds(2, in_tower((block,6),(block,1)), false, 46).
holds(2, in_tower((block,6),(block,2)), false, 46).
holds(2, in_tower((block,6),(block,3)), false, 46).
holds(2, in_tower((block,6),(block,4)), false, 46).
holds(2, in_tower((block,6),(block,5)), false, 46).
holds(2, in_tower((block,6),(block,6)), false, 46).
holds(2, on((block,1)), puzzle_room_table, 46).
holds(2, on((block,2)), puzzle_room_table, 46).
holds(2, on((block,3)), (block,1), 46).
holds(2, on((block,4)), nothing, 46).
holds(2, on((block,5)), nothing, 46).
holds(2, on((block,6)), nothing, 46).
holds(2, tower_base((block,1),puzzle_room_table), true, 46).
holds(2, tower_base((block,2),puzzle_room_table), true, 46).
holds(2, tower_base((block,3),puzzle_room_table), false, 46).
holds(2, tower_base((block,4),puzzle_room_table), false, 46).
holds(2, tower_base((block,5),puzzle_room_table), false, 46).
holds(2, tower_base((block,6),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 46).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 46).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 46).

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=50']

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,retracted)', 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'I': 16})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 17})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 18})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 19})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,6),puzzle_room_table)', 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'I': 20})

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_1,retracted), configuration(manipulator_arm_1), retracted, 16).
sub_goal(2, talos, move(hallway), in(talos), hallway, 17).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 18).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 19).
sub_goal(2, talos, put(manipulator_arm_2,(block,6),puzzle_room_table), on((block,6)), puzzle_room_table, 20).

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=50']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EEA8ED54C0>]
	incrementor = SolveIncrementor(step_start=46, step_increase=1, step_increase_initial=5, step_end_min=51, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 46), range_=None), IncPart(name='plan_module', args=('#inc', 46, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 46, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 46, 16, 20, 'sequential', 'false'), range_=None)]

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 823 rules

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004786700000295241s

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122579s.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023081s with result Satisfiable.

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF169C7D10>

[22-02-2022_03-42-42] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 46)
	('last_sgoals', 20)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 16)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF169C7D10>)

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 46). %* None *%
#program plan_module(#inc, 46, false, false). %* None *%
#program optimisation_module(#inc, 46, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 46, 16, 20, sequential, false). %* None *%

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     45 : Current =     50
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-42] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(50)]), ('state_module', [Number(46), Number(46)]), ('plan_module', [Number(46), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(46), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(46)]), ('action_preconditions', [Number(46)]), ('variable_relations', [Number(46)]), ('abstraction_mappings', [Number(46)]), ('conformance_module', [Number(46), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(47), Number(46)]), ('plan_module', [Number(47), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(47), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(47)]), ('action_preconditions', [Number(47)]), ('variable_relations', [Number(47)]), ('abstraction_mappings', [Number(47)]), ('conformance_module', [Number(47), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(48), Number(46)]), ('plan_module', [Number(48), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(48), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(48)]), ('action_preconditions', [Number(48)]), ('variable_relations', [Number(48)]), ('abstraction_mappings', [Number(48)]), ('conformance_module', [Number(48), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(49), Number(46)]), ('plan_module', [Number(49), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(49), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(49)]), ('action_preconditions', [Number(49)]), ('variable_relations', [Number(49)]), ('abstraction_mappings', [Number(49)]), ('conformance_module', [Number(49), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(50), Number(46)]), ('plan_module', [Number(50), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(50), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(50)]), ('action_preconditions', [Number(50)]), ('variable_relations', [Number(50)]), ('abstraction_mappings', [Number(50)]), ('conformance_module', [Number(50), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.953050s.

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.287323s with result Satisfiable.

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.240373699999509, Incremental time limit = None
Running cumulative time = 1.240373699999509, Cumulative time limit = 1800
Used memory = (RSS = 2283.031250Mb, VMS = 2301.941406Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.953050s, Solving = 0.287323s, Total = 1.240374s, Memory = (RSS = 2283.031250Mb, VMS = 2301.941406Mb), Step range = [46-50]), Calls = 1
Final Model :: Total atoms = 21820, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     50 : Current =     51
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(51)]), ('state_module', [Number(51), Number(46)]), ('plan_module', [Number(51), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(51), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(51)]), ('action_preconditions', [Number(51)]), ('variable_relations', [Number(51)]), ('abstraction_mappings', [Number(51)]), ('conformance_module', [Number(51), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.257940s.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041071s with result Unsatisfiable.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.299011199999768, Incremental time limit = None
Running cumulative time = 1.539384899999277, Cumulative time limit = 1800
Used memory = (RSS = 2286.578125Mb, VMS = 2307.582031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     51 : Current =     52
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(52)]), ('state_module', [Number(52), Number(46)]), ('plan_module', [Number(52), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(52), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(52)]), ('action_preconditions', [Number(52)]), ('variable_relations', [Number(52)]), ('abstraction_mappings', [Number(52)]), ('conformance_module', [Number(52), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.279259s.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044544s with result Unsatisfiable.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.32380320000083884, Incremental time limit = None
Running cumulative time = 1.8631881000001158, Cumulative time limit = 1800
Used memory = (RSS = 2288.671875Mb, VMS = 2308.085938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     52 : Current =     53
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(53)]), ('state_module', [Number(53), Number(46)]), ('plan_module', [Number(53), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(53), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(53)]), ('action_preconditions', [Number(53)]), ('variable_relations', [Number(53)]), ('abstraction_mappings', [Number(53)]), ('conformance_module', [Number(53), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.297053s.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053215s with result Unsatisfiable.

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35026809999908437, Incremental time limit = None
Running cumulative time = 2.2134561999992, Cumulative time limit = 1800
Used memory = (RSS = 2290.835938Mb, VMS = 2313.472656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     53 : Current =     54
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(54)]), ('state_module', [Number(54), Number(46)]), ('plan_module', [Number(54), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(54), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(54)]), ('action_preconditions', [Number(54)]), ('variable_relations', [Number(54)]), ('abstraction_mappings', [Number(54)]), ('conformance_module', [Number(54), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.301786s.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.059928s with result Unsatisfiable.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3617141000004267, Incremental time limit = None
Running cumulative time = 2.575170299999627, Cumulative time limit = 1800
Used memory = (RSS = 2293.179688Mb, VMS = 2315.265625Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     54 : Current =     55
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(55)]), ('state_module', [Number(55), Number(46)]), ('plan_module', [Number(55), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(55), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(55)]), ('action_preconditions', [Number(55)]), ('variable_relations', [Number(55)]), ('abstraction_mappings', [Number(55)]), ('conformance_module', [Number(55), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.315745s.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.067312s with result Unsatisfiable.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38305659999969066, Incremental time limit = None
Running cumulative time = 2.9582268999993175, Cumulative time limit = 1800
Used memory = (RSS = 2295.550781Mb, VMS = 2315.828125Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     55 : Current =     56
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(56)]), ('state_module', [Number(56), Number(46)]), ('plan_module', [Number(56), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(56), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(56)]), ('action_preconditions', [Number(56)]), ('variable_relations', [Number(56)]), ('abstraction_mappings', [Number(56)]), ('conformance_module', [Number(56), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.310188s.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.075654s with result Unsatisfiable.

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.38584259999970527, Incremental time limit = None
Running cumulative time = 3.344069499999023, Cumulative time limit = 1800
Used memory = (RSS = 2303.703125Mb, VMS = 2332.363281Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     56 : Current =     57
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-45] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(57)]), ('state_module', [Number(57), Number(46)]), ('plan_module', [Number(57), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(57), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(57)]), ('action_preconditions', [Number(57)]), ('variable_relations', [Number(57)]), ('abstraction_mappings', [Number(57)]), ('conformance_module', [Number(57), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307981s.

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.100842s with result Unsatisfiable.

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4088228999999046, Incremental time limit = None
Running cumulative time = 3.7528923999989274, Cumulative time limit = 1800
Used memory = (RSS = 2306.738281Mb, VMS = 2332.929688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     57 : Current =     58
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(58)]), ('state_module', [Number(58), Number(46)]), ('plan_module', [Number(58), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(58), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(58)]), ('action_preconditions', [Number(58)]), ('variable_relations', [Number(58)]), ('abstraction_mappings', [Number(58)]), ('conformance_module', [Number(58), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.357625s.

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108463s with result Unsatisfiable.

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.46608779999951366, Incremental time limit = None
Running cumulative time = 4.218980199998441, Cumulative time limit = 1800
Used memory = (RSS = 2309.328125Mb, VMS = 2334.539062Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     58 : Current =     59
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-46] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(59)]), ('state_module', [Number(59), Number(46)]), ('plan_module', [Number(59), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(59), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(59)]), ('action_preconditions', [Number(59)]), ('variable_relations', [Number(59)]), ('abstraction_mappings', [Number(59)]), ('conformance_module', [Number(59), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.319708s.

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.095935s with result Unsatisfiable.

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.41564239999934216, Incremental time limit = None
Running cumulative time = 4.634622599997783, Cumulative time limit = 1800
Used memory = (RSS = 2312.289062Mb, VMS = 2335.097656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     59 : Current =     60
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(60)]), ('state_module', [Number(60), Number(46)]), ('plan_module', [Number(60), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(60), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(60)]), ('action_preconditions', [Number(60)]), ('variable_relations', [Number(60)]), ('abstraction_mappings', [Number(60)]), ('conformance_module', [Number(60), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.336866s.

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.107485s with result Unsatisfiable.

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4443500999996104, Incremental time limit = None
Running cumulative time = 5.078972699997394, Cumulative time limit = 1800
Used memory = (RSS = 2315.183594Mb, VMS = 2336.449219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     60 : Current =     61
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-47] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(61)]), ('state_module', [Number(61), Number(46)]), ('plan_module', [Number(61), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(61), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(61)]), ('action_preconditions', [Number(61)]), ('variable_relations', [Number(61)]), ('abstraction_mappings', [Number(61)]), ('conformance_module', [Number(61), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.343814s.

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.143018s with result Unsatisfiable.

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.48683250000067346, Incremental time limit = None
Running cumulative time = 5.565805199998067, Cumulative time limit = 1800
Used memory = (RSS = 2317.925781Mb, VMS = 2352.281250Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     61 : Current =     62
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(62)]), ('state_module', [Number(62), Number(46)]), ('plan_module', [Number(62), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(62), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(62)]), ('action_preconditions', [Number(62)]), ('variable_relations', [Number(62)]), ('abstraction_mappings', [Number(62)]), ('conformance_module', [Number(62), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.331711s.

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.160095s with result Unsatisfiable.

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4918059000001449, Incremental time limit = None
Running cumulative time = 6.057611099998212, Cumulative time limit = 1800
Used memory = (RSS = 2320.859375Mb, VMS = 2352.839844Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     62 : Current =     63
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(63)]), ('state_module', [Number(63), Number(46)]), ('plan_module', [Number(63), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(63), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(63)]), ('action_preconditions', [Number(63)]), ('variable_relations', [Number(63)]), ('abstraction_mappings', [Number(63)]), ('conformance_module', [Number(63), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.370753s.

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.188796s with result Unsatisfiable.

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5595484000004944, Incremental time limit = None
Running cumulative time = 6.6171594999987065, Cumulative time limit = 1800
Used memory = (RSS = 2324.613281Mb, VMS = 2354.437500Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     63 : Current =     64
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(64)]), ('state_module', [Number(64), Number(46)]), ('plan_module', [Number(64), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(64), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(64)]), ('action_preconditions', [Number(64)]), ('variable_relations', [Number(64)]), ('abstraction_mappings', [Number(64)]), ('conformance_module', [Number(64), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.350919s.

[22-02-2022_03-42-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.243943s with result Unsatisfiable.

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5948626999997941, Incremental time limit = None
Running cumulative time = 7.212022199998501, Cumulative time limit = 1800
Used memory = (RSS = 2327.574219Mb, VMS = 2356.582031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     64 : Current =     65
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(65)]), ('state_module', [Number(65), Number(46)]), ('plan_module', [Number(65), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(65), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(65)]), ('action_preconditions', [Number(65)]), ('variable_relations', [Number(65)]), ('abstraction_mappings', [Number(65)]), ('conformance_module', [Number(65), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.380885s.

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.335087s with result Unsatisfiable.

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7159719000001132, Incremental time limit = None
Running cumulative time = 7.927994099998614, Cumulative time limit = 1800
Used memory = (RSS = 2331.664062Mb, VMS = 2358.679688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =     65 : Current =     66
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-50] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(66)]), ('state_module', [Number(66), Number(46)]), ('plan_module', [Number(66), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(66), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(66)]), ('action_preconditions', [Number(66)]), ('variable_relations', [Number(66)]), ('abstraction_mappings', [Number(66)]), ('conformance_module', [Number(66), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.385472s.

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.242428s with result Unsatisfiable.

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6279004999996687, Incremental time limit = None
Running cumulative time = 8.555894599998283, Cumulative time limit = 1800
Used memory = (RSS = 2335.085938Mb, VMS = 2360.699219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =     66 : Current =     67
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(67)]), ('state_module', [Number(67), Number(46)]), ('plan_module', [Number(67), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(67), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(67)]), ('action_preconditions', [Number(67)]), ('variable_relations', [Number(67)]), ('abstraction_mappings', [Number(67)]), ('conformance_module', [Number(67), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.347196s.

[22-02-2022_03-42-51] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.264253s with result Unsatisfiable.

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6114488000002893, Incremental time limit = None
Running cumulative time = 9.167343399998572, Cumulative time limit = 1800
Used memory = (RSS = 2336.281250Mb, VMS = 2359.652344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =     67 : Current =     68
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(68)]), ('state_module', [Number(68), Number(46)]), ('plan_module', [Number(68), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(68), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(68)]), ('action_preconditions', [Number(68)]), ('variable_relations', [Number(68)]), ('abstraction_mappings', [Number(68)]), ('conformance_module', [Number(68), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.383592s.

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.251729s with result Unsatisfiable.

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6353206000003411, Incremental time limit = None
Running cumulative time = 9.802663999998913, Cumulative time limit = 1800
Used memory = (RSS = 2340.929688Mb, VMS = 2363.175781Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =     68 : Current =     69
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-52] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(69)]), ('state_module', [Number(69), Number(46)]), ('plan_module', [Number(69), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(69), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(69)]), ('action_preconditions', [Number(69)]), ('variable_relations', [Number(69)]), ('abstraction_mappings', [Number(69)]), ('conformance_module', [Number(69), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.404772s.

[22-02-2022_03-42-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.300123s with result Unsatisfiable.

[22-02-2022_03-42-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7048954000001686, Incremental time limit = None
Running cumulative time = 10.507559399999082, Cumulative time limit = 1800
Used memory = (RSS = 2350.968750Mb, VMS = 2395.347656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =     69 : Current =     70
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-53] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(70)]), ('state_module', [Number(70), Number(46)]), ('plan_module', [Number(70), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(70), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(70)]), ('action_preconditions', [Number(70)]), ('variable_relations', [Number(70)]), ('abstraction_mappings', [Number(70)]), ('conformance_module', [Number(70), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.369699s.

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.258898s with result Unsatisfiable.

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6285970999997517, Incremental time limit = None
Running cumulative time = 11.136156499998833, Cumulative time limit = 1800
Used memory = (RSS = 2357.988281Mb, VMS = 2399.792969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =     70 : Current =     71
Incrementor step ends | Minimum  =     51 : Maximum =    300

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(71)]), ('state_module', [Number(71), Number(46)]), ('plan_module', [Number(71), Number(46), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(46), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(46), Number(16), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.400471s.

[22-02-2022_03-42-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.346794s with result Satisfiable.

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7472650999998223, Incremental time limit = None
Running cumulative time = 11.883421599998655, Cumulative time limit = 1800
Used memory = (RSS = 2367.742188Mb, VMS = 2407.242188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.106487s, Solving = 3.776935s, Total = 11.883422s, Memory = (RSS = 2367.742188Mb, VMS = 2407.242188Mb), Step range = [46-71]), Calls = 22
Final Model :: Total atoms = 30164, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.953050s, Solving = 0.287323s, Total = 1.240374s, Memory = (RSS = 2283.031250Mb, VMS = 2301.941406Mb), Step range = [46-50]
2 : Statistics :: Grounding = 0.257940s, Solving = 0.041071s, Total = 0.299011s, Memory = (RSS = 2286.578125Mb, VMS = 2307.582031Mb), Step range = [51-51]
3 : Statistics :: Grounding = 0.279259s, Solving = 0.044544s, Total = 0.323803s, Memory = (RSS = 2288.671875Mb, VMS = 2308.085938Mb), Step range = [52-52]
4 : Statistics :: Grounding = 0.297053s, Solving = 0.053215s, Total = 0.350268s, Memory = (RSS = 2290.835938Mb, VMS = 2313.472656Mb), Step range = [53-53]
5 : Statistics :: Grounding = 0.301786s, Solving = 0.059928s, Total = 0.361714s, Memory = (RSS = 2293.179688Mb, VMS = 2315.265625Mb), Step range = [54-54]
6 : Statistics :: Grounding = 0.315745s, Solving = 0.067312s, Total = 0.383057s, Memory = (RSS = 2295.550781Mb, VMS = 2315.828125Mb), Step range = [55-55]
7 : Statistics :: Grounding = 0.310188s, Solving = 0.075654s, Total = 0.385843s, Memory = (RSS = 2303.703125Mb, VMS = 2332.363281Mb), Step range = [56-56]
8 : Statistics :: Grounding = 0.307981s, Solving = 0.100842s, Total = 0.408823s, Memory = (RSS = 2306.738281Mb, VMS = 2332.929688Mb), Step range = [57-57]
9 : Statistics :: Grounding = 0.357625s, Solving = 0.108463s, Total = 0.466088s, Memory = (RSS = 2309.328125Mb, VMS = 2334.539062Mb), Step range = [58-58]
10 : Statistics :: Grounding = 0.319708s, Solving = 0.095935s, Total = 0.415642s, Memory = (RSS = 2312.289062Mb, VMS = 2335.097656Mb), Step range = [59-59]
11 : Statistics :: Grounding = 0.336866s, Solving = 0.107485s, Total = 0.444350s, Memory = (RSS = 2315.183594Mb, VMS = 2336.449219Mb), Step range = [60-60]
12 : Statistics :: Grounding = 0.343814s, Solving = 0.143018s, Total = 0.486833s, Memory = (RSS = 2317.925781Mb, VMS = 2352.281250Mb), Step range = [61-61]
13 : Statistics :: Grounding = 0.331711s, Solving = 0.160095s, Total = 0.491806s, Memory = (RSS = 2320.859375Mb, VMS = 2352.839844Mb), Step range = [62-62]
14 : Statistics :: Grounding = 0.370753s, Solving = 0.188796s, Total = 0.559548s, Memory = (RSS = 2324.613281Mb, VMS = 2354.437500Mb), Step range = [63-63]
15 : Statistics :: Grounding = 0.350919s, Solving = 0.243943s, Total = 0.594863s, Memory = (RSS = 2327.574219Mb, VMS = 2356.582031Mb), Step range = [64-64]
16 : Statistics :: Grounding = 0.380885s, Solving = 0.335087s, Total = 0.715972s, Memory = (RSS = 2331.664062Mb, VMS = 2358.679688Mb), Step range = [65-65]
17 : Statistics :: Grounding = 0.385472s, Solving = 0.242428s, Total = 0.627900s, Memory = (RSS = 2335.085938Mb, VMS = 2360.699219Mb), Step range = [66-66]
18 : Statistics :: Grounding = 0.347196s, Solving = 0.264253s, Total = 0.611449s, Memory = (RSS = 2336.281250Mb, VMS = 2359.652344Mb), Step range = [67-67]
19 : Statistics :: Grounding = 0.383592s, Solving = 0.251729s, Total = 0.635321s, Memory = (RSS = 2340.929688Mb, VMS = 2363.175781Mb), Step range = [68-68]
20 : Statistics :: Grounding = 0.404772s, Solving = 0.300123s, Total = 0.704895s, Memory = (RSS = 2350.968750Mb, VMS = 2395.347656Mb), Step range = [69-69]
21 : Statistics :: Grounding = 0.369699s, Solving = 0.258898s, Total = 0.628597s, Memory = (RSS = 2357.988281Mb, VMS = 2399.792969Mb), Step range = [70-70]
22 : Statistics :: Grounding = 0.400471s, Solving = 0.346794s, Total = 0.747265s, Memory = (RSS = 2367.742188Mb, VMS = 2407.242188Mb), Step range = [71-71]

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 11.883422s due to: Stop condition reached.

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-55] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-42-55] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.106487s, Solving = 3.776935s, Total = 11.883422s, Memory = (RSS = 2367.742188Mb, VMS = 2407.242188Mb), Step range = [46-71]), Calls = 22
Model :: Total atoms = 30164, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 25 :: Actions = 25                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Monolevel problem 4 at level 1 solved.

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Online planning increment 4 finished.

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 4 : Total constraining sub-goal stages = 31 : Goals achieved = 20 : Goals unachieved = 11 : Complete = False

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 5 by method ground-first is [1-1].

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 5 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [21-25]

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [21-25], problem number = 5, increment number = 5

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 21)
	('last_sgoals', 25)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [21-25] : Concurrency disabled : Minimum search length bound enabled with value 75

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 21
last_sgoals = 25
start_step = 71
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 75

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-42-56] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-42-56] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 71 as problem start state.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,6))', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 71})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 71})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,6)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 71})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 71})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 71})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 71})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,6)', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 71})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 71})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 71})

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 71).
holds(1, complete_tower(red,puzzle_room_table), false, 71).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 71).
holds(1, configuration(manipulator_end_2), aligned_with((block,6)), 71).
holds(1, configuration(manipulator_limb_1), retracted, 71).
holds(1, configuration(manipulator_limb_2), extended, 71).
holds(1, configuration(puzzle_room_door), open, 71).
holds(1, configuration(starting_room_door), closed, 71).
holds(1, configuration(store_room_door), open, 71).
holds(1, grasping(manipulator_arm_1), (block,5), 71).
holds(1, grasping(manipulator_arm_2), (block,6), 71).
holds(1, grasping(manipulator_end_1), (block,5), 71).
holds(1, grasping(manipulator_end_2), (block,6), 71).
holds(1, in((block,1)), (puzzle_room,5,0), 71).
holds(1, in((block,2)), (puzzle_room,5,0), 71).
holds(1, in((block,3)), (puzzle_room,5,0), 71).
holds(1, in((block,4)), (store_room,0,0), 71).
holds(1, in((block,5)), (puzzle_room,5,0), 71).
holds(1, in((block,6)), (puzzle_room,5,0), 71).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 71).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 71).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 71).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 71).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 71).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 71).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 71).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 71).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 71).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 71).
holds(1, in(talos), (puzzle_room,5,0), 71).
holds(1, in_tower((block,1),(block,1)), true, 71).
holds(1, in_tower((block,1),(block,2)), false, 71).
holds(1, in_tower((block,1),(block,3)), true, 71).
holds(1, in_tower((block,1),(block,4)), false, 71).
holds(1, in_tower((block,1),(block,5)), false, 71).
holds(1, in_tower((block,1),(block,6)), false, 71).
holds(1, in_tower((block,2),(block,1)), false, 71).
holds(1, in_tower((block,2),(block,2)), true, 71).
holds(1, in_tower((block,2),(block,3)), false, 71).
holds(1, in_tower((block,2),(block,4)), false, 71).
holds(1, in_tower((block,2),(block,5)), false, 71).
holds(1, in_tower((block,2),(block,6)), false, 71).
holds(1, in_tower((block,3),(block,1)), false, 71).
holds(1, in_tower((block,3),(block,2)), false, 71).
holds(1, in_tower((block,3),(block,3)), false, 71).
holds(1, in_tower((block,3),(block,4)), false, 71).
holds(1, in_tower((block,3),(block,5)), false, 71).
holds(1, in_tower((block,3),(block,6)), false, 71).
holds(1, in_tower((block,4),(block,1)), false, 71).
holds(1, in_tower((block,4),(block,2)), false, 71).
holds(1, in_tower((block,4),(block,3)), false, 71).
holds(1, in_tower((block,4),(block,4)), false, 71).
holds(1, in_tower((block,4),(block,5)), false, 71).
holds(1, in_tower((block,4),(block,6)), false, 71).
holds(1, in_tower((block,5),(block,1)), false, 71).
holds(1, in_tower((block,5),(block,2)), false, 71).
holds(1, in_tower((block,5),(block,3)), false, 71).
holds(1, in_tower((block,5),(block,4)), false, 71).
holds(1, in_tower((block,5),(block,5)), false, 71).
holds(1, in_tower((block,5),(block,6)), false, 71).
holds(1, in_tower((block,6),(block,1)), false, 71).
holds(1, in_tower((block,6),(block,2)), false, 71).
holds(1, in_tower((block,6),(block,3)), false, 71).
holds(1, in_tower((block,6),(block,4)), false, 71).
holds(1, in_tower((block,6),(block,5)), false, 71).
holds(1, in_tower((block,6),(block,6)), true, 71).
holds(1, on((block,1)), puzzle_room_table_left, 71).
holds(1, on((block,2)), puzzle_room_table_right, 71).
holds(1, on((block,3)), (block,1), 71).
holds(1, on((block,4)), nothing, 71).
holds(1, on((block,5)), nothing, 71).
holds(1, on((block,6)), puzzle_room_table_middle, 71).
holds(1, tower_base((block,1),puzzle_room_table), true, 71).
holds(1, tower_base((block,2),puzzle_room_table), true, 71).
holds(1, tower_base((block,3),puzzle_room_table), false, 71).
holds(1, tower_base((block,4),puzzle_room_table), false, 71).
holds(1, tower_base((block,5),puzzle_room_table), false, 71).
holds(1, tower_base((block,6),puzzle_room_table), true, 71).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 71).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 71).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 71).
holds(2, complete_tower(blue,puzzle_room_table), false, 71).
holds(2, complete_tower(red,puzzle_room_table), false, 71).
holds(2, configuration(manipulator_arm_1), retracted, 71).
holds(2, configuration(manipulator_arm_2), extended, 71).
holds(2, configuration(puzzle_room_door), open, 71).
holds(2, configuration(starting_room_door), closed, 71).
holds(2, configuration(store_room_door), open, 71).
holds(2, grasping(manipulator_arm_1), (block,5), 71).
holds(2, grasping(manipulator_arm_2), (block,6), 71).
holds(2, in((block,1)), puzzle_room, 71).
holds(2, in((block,2)), puzzle_room, 71).
holds(2, in((block,3)), puzzle_room, 71).
holds(2, in((block,4)), store_room, 71).
holds(2, in((block,5)), puzzle_room, 71).
holds(2, in((block,6)), puzzle_room, 71).
holds(2, in(manipulator_arm_1), puzzle_room, 71).
holds(2, in(manipulator_arm_2), puzzle_room, 71).
holds(2, in(puzzle_room_table), puzzle_room, 71).
holds(2, in(talos), puzzle_room, 71).
holds(2, in_tower((block,1),(block,1)), true, 71).
holds(2, in_tower((block,1),(block,2)), false, 71).
holds(2, in_tower((block,1),(block,3)), true, 71).
holds(2, in_tower((block,1),(block,4)), false, 71).
holds(2, in_tower((block,1),(block,5)), false, 71).
holds(2, in_tower((block,1),(block,6)), false, 71).
holds(2, in_tower((block,2),(block,1)), false, 71).
holds(2, in_tower((block,2),(block,2)), true, 71).
holds(2, in_tower((block,2),(block,3)), false, 71).
holds(2, in_tower((block,2),(block,4)), false, 71).
holds(2, in_tower((block,2),(block,5)), false, 71).
holds(2, in_tower((block,2),(block,6)), false, 71).
holds(2, in_tower((block,3),(block,1)), false, 71).
holds(2, in_tower((block,3),(block,2)), false, 71).
holds(2, in_tower((block,3),(block,3)), false, 71).
holds(2, in_tower((block,3),(block,4)), false, 71).
holds(2, in_tower((block,3),(block,5)), false, 71).
holds(2, in_tower((block,3),(block,6)), false, 71).
holds(2, in_tower((block,4),(block,1)), false, 71).
holds(2, in_tower((block,4),(block,2)), false, 71).
holds(2, in_tower((block,4),(block,3)), false, 71).
holds(2, in_tower((block,4),(block,4)), false, 71).
holds(2, in_tower((block,4),(block,5)), false, 71).
holds(2, in_tower((block,4),(block,6)), false, 71).
holds(2, in_tower((block,5),(block,1)), false, 71).
holds(2, in_tower((block,5),(block,2)), false, 71).
holds(2, in_tower((block,5),(block,3)), false, 71).
holds(2, in_tower((block,5),(block,4)), false, 71).
holds(2, in_tower((block,5),(block,5)), false, 71).
holds(2, in_tower((block,5),(block,6)), false, 71).
holds(2, in_tower((block,6),(block,1)), false, 71).
holds(2, in_tower((block,6),(block,2)), false, 71).
holds(2, in_tower((block,6),(block,3)), false, 71).
holds(2, in_tower((block,6),(block,4)), false, 71).
holds(2, in_tower((block,6),(block,5)), false, 71).
holds(2, in_tower((block,6),(block,6)), true, 71).
holds(2, on((block,1)), puzzle_room_table, 71).
holds(2, on((block,2)), puzzle_room_table, 71).
holds(2, on((block,3)), (block,1), 71).
holds(2, on((block,4)), nothing, 71).
holds(2, on((block,5)), nothing, 71).
holds(2, on((block,6)), puzzle_room_table, 71).
holds(2, tower_base((block,1),puzzle_room_table), true, 71).
holds(2, tower_base((block,2),puzzle_room_table), true, 71).
holds(2, tower_base((block,3),puzzle_room_table), false, 71).
holds(2, tower_base((block,4),puzzle_room_table), false, 71).
holds(2, tower_base((block,5),puzzle_room_table), false, 71).
holds(2, tower_base((block,6),puzzle_room_table), true, 71).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 71).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 71).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 71).

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=75']

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_2,(block,6))', 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'I': 21})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 22})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 23})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(store_room)', 'F': 'in(talos)', 'V': 'store_room', 'I': 24})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 25})

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 5 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_2,(block,6)), grasping(manipulator_arm_2), nothing, 21).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 22).
sub_goal(2, talos, move(hallway), in(talos), hallway, 23).
sub_goal(2, talos, move(store_room), in(talos), store_room, 24).
sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 25).

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=75']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EEA8ED5C10>]
	incrementor = SolveIncrementor(step_start=71, step_increase=1, step_increase_initial=5, step_end_min=76, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 71), range_=None), IncPart(name='plan_module', args=('#inc', 71, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 71, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 71, 21, 25, 'sequential', 'false'), range_=None)]

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 823 rules

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.0048944999998639105s

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.137740s.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.024637s with result Satisfiable.

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF1699ECC0>

[22-02-2022_03-42-56] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 71)
	('last_sgoals', 25)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 21)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF1699ECC0>)

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 71). %* None *%
#program plan_module(#inc, 71, false, false). %* None *%
#program optimisation_module(#inc, 71, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 71, 21, 25, sequential, false). %* None *%

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     70 : Current =     75
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-56] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(75)]), ('state_module', [Number(71), Number(71)]), ('plan_module', [Number(71), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(71), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(71)]), ('action_preconditions', [Number(71)]), ('variable_relations', [Number(71)]), ('abstraction_mappings', [Number(71)]), ('conformance_module', [Number(71), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(72), Number(71)]), ('plan_module', [Number(72), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(72), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(72)]), ('action_preconditions', [Number(72)]), ('variable_relations', [Number(72)]), ('abstraction_mappings', [Number(72)]), ('conformance_module', [Number(72), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(73), Number(71)]), ('plan_module', [Number(73), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(73), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(73)]), ('action_preconditions', [Number(73)]), ('variable_relations', [Number(73)]), ('abstraction_mappings', [Number(73)]), ('conformance_module', [Number(73), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(74), Number(71)]), ('plan_module', [Number(74), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(74), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(74)]), ('action_preconditions', [Number(74)]), ('variable_relations', [Number(74)]), ('abstraction_mappings', [Number(74)]), ('conformance_module', [Number(74), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(75), Number(71)]), ('plan_module', [Number(75), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(75), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(75)]), ('action_preconditions', [Number(75)]), ('variable_relations', [Number(75)]), ('abstraction_mappings', [Number(75)]), ('conformance_module', [Number(75), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.901139s.

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.334759s with result Satisfiable.

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2358979000000545, Incremental time limit = None
Running cumulative time = 1.2358979000000545, Cumulative time limit = 1800
Used memory = (RSS = 2285.445312Mb, VMS = 2304.398438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.901139s, Solving = 0.334759s, Total = 1.235898s, Memory = (RSS = 2285.445312Mb, VMS = 2304.398438Mb), Step range = [71-75]), Calls = 1
Final Model :: Total atoms = 21823, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     75 : Current =     76
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(76)]), ('state_module', [Number(76), Number(71)]), ('plan_module', [Number(76), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(76), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(76)]), ('action_preconditions', [Number(76)]), ('variable_relations', [Number(76)]), ('abstraction_mappings', [Number(76)]), ('conformance_module', [Number(76), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.282183s.

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.042991s with result Unsatisfiable.

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3251741000003676, Incremental time limit = None
Running cumulative time = 1.5610720000004221, Cumulative time limit = 1800
Used memory = (RSS = 2289.019531Mb, VMS = 2310.003906Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     76 : Current =     77
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(77)]), ('state_module', [Number(77), Number(71)]), ('plan_module', [Number(77), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(77), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(77)]), ('action_preconditions', [Number(77)]), ('variable_relations', [Number(77)]), ('abstraction_mappings', [Number(77)]), ('conformance_module', [Number(77), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.304817s.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048703s with result Unsatisfiable.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35351970000010624, Incremental time limit = None
Running cumulative time = 1.9145917000005284, Cumulative time limit = 1800
Used memory = (RSS = 2291.152344Mb, VMS = 2310.554688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     77 : Current =     78
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(78)]), ('state_module', [Number(78), Number(71)]), ('plan_module', [Number(78), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(78), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(78)]), ('action_preconditions', [Number(78)]), ('variable_relations', [Number(78)]), ('abstraction_mappings', [Number(78)]), ('conformance_module', [Number(78), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.290807s.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051684s with result Unsatisfiable.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.34249020000061137, Incremental time limit = None
Running cumulative time = 2.2570819000011397, Cumulative time limit = 1800
Used memory = (RSS = 2293.472656Mb, VMS = 2315.949219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     78 : Current =     79
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(79)]), ('state_module', [Number(79), Number(71)]), ('plan_module', [Number(79), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(79), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(79)]), ('action_preconditions', [Number(79)]), ('variable_relations', [Number(79)]), ('abstraction_mappings', [Number(79)]), ('conformance_module', [Number(79), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.287884s.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055250s with result Unsatisfiable.

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3431332999998631, Incremental time limit = None
Running cumulative time = 2.600215200001003, Cumulative time limit = 1800
Used memory = (RSS = 2295.593750Mb, VMS = 2317.742188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     79 : Current =     80
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(80)]), ('state_module', [Number(80), Number(71)]), ('plan_module', [Number(80), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(80), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(80)]), ('action_preconditions', [Number(80)]), ('variable_relations', [Number(80)]), ('abstraction_mappings', [Number(80)]), ('conformance_module', [Number(80), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.300004s.

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.064200s with result Unsatisfiable.

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.36420410000027914, Incremental time limit = None
Running cumulative time = 2.964419300001282, Cumulative time limit = 1800
Used memory = (RSS = 2297.894531Mb, VMS = 2318.304688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =     80 : Current =     81
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(81)]), ('state_module', [Number(81), Number(71)]), ('plan_module', [Number(81), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(81), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(81)]), ('action_preconditions', [Number(81)]), ('variable_relations', [Number(81)]), ('abstraction_mappings', [Number(81)]), ('conformance_module', [Number(81), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.302235s.

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.110338s with result Unsatisfiable.

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4125729000015781, Incremental time limit = None
Running cumulative time = 3.37699220000286, Cumulative time limit = 1800
Used memory = (RSS = 2305.273438Mb, VMS = 2333.437500Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =     81 : Current =     82
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-42-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(82)]), ('state_module', [Number(82), Number(71)]), ('plan_module', [Number(82), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(82), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(82)]), ('action_preconditions', [Number(82)]), ('variable_relations', [Number(82)]), ('abstraction_mappings', [Number(82)]), ('conformance_module', [Number(82), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.308746s.

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108161s with result Unsatisfiable.

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4169062999999369, Incremental time limit = None
Running cumulative time = 3.793898500002797, Cumulative time limit = 1800
Used memory = (RSS = 2309.082031Mb, VMS = 2335.410156Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =     82 : Current =     83
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(83)]), ('state_module', [Number(83), Number(71)]), ('plan_module', [Number(83), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(83), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(83)]), ('action_preconditions', [Number(83)]), ('variable_relations', [Number(83)]), ('abstraction_mappings', [Number(83)]), ('conformance_module', [Number(83), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.314217s.

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.125893s with result Unsatisfiable.

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4401101000003109, Incremental time limit = None
Running cumulative time = 4.234008600003108, Cumulative time limit = 1800
Used memory = (RSS = 2311.824219Mb, VMS = 2337.019531Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =     83 : Current =     84
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(84)]), ('state_module', [Number(84), Number(71)]), ('plan_module', [Number(84), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(84), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(84)]), ('action_preconditions', [Number(84)]), ('variable_relations', [Number(84)]), ('abstraction_mappings', [Number(84)]), ('conformance_module', [Number(84), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.355283s.

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.157402s with result Unsatisfiable.

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5126846000011938, Incremental time limit = None
Running cumulative time = 4.746693200004302, Cumulative time limit = 1800
Used memory = (RSS = 2314.699219Mb, VMS = 2337.589844Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =     84 : Current =     85
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(85)]), ('state_module', [Number(85), Number(71)]), ('plan_module', [Number(85), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(85), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(85)]), ('action_preconditions', [Number(85)]), ('variable_relations', [Number(85)]), ('abstraction_mappings', [Number(85)]), ('conformance_module', [Number(85), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.342506s.

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.172374s with result Unsatisfiable.

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.514879700000165, Incremental time limit = None
Running cumulative time = 5.261572900004467, Cumulative time limit = 1800
Used memory = (RSS = 2317.582031Mb, VMS = 2338.941406Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =     85 : Current =     86
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(86)]), ('state_module', [Number(86), Number(71)]), ('plan_module', [Number(86), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(86), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(86)]), ('action_preconditions', [Number(86)]), ('variable_relations', [Number(86)]), ('abstraction_mappings', [Number(86)]), ('conformance_module', [Number(86), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.367940s.

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.150880s with result Unsatisfiable.

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5188201000000845, Incremental time limit = None
Running cumulative time = 5.780393000004551, Cumulative time limit = 1800
Used memory = (RSS = 2320.437500Mb, VMS = 2354.054688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =     86 : Current =     87
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(87)]), ('state_module', [Number(87), Number(71)]), ('plan_module', [Number(87), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(87), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(87)]), ('action_preconditions', [Number(87)]), ('variable_relations', [Number(87)]), ('abstraction_mappings', [Number(87)]), ('conformance_module', [Number(87), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.361488s.

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.199374s with result Unsatisfiable.

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5608618999995088, Incremental time limit = None
Running cumulative time = 6.34125490000406, Cumulative time limit = 1800
Used memory = (RSS = 2323.277344Mb, VMS = 2355.320312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =     87 : Current =     88
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(88)]), ('state_module', [Number(88), Number(71)]), ('plan_module', [Number(88), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(88), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(88)]), ('action_preconditions', [Number(88)]), ('variable_relations', [Number(88)]), ('abstraction_mappings', [Number(88)]), ('conformance_module', [Number(88), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.344193s.

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.227842s with result Unsatisfiable.

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5720353000006071, Incremental time limit = None
Running cumulative time = 6.913290200004667, Cumulative time limit = 1800
Used memory = (RSS = 2327.058594Mb, VMS = 2356.914062Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =     88 : Current =     89
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(89)]), ('state_module', [Number(89), Number(71)]), ('plan_module', [Number(89), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(89), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(89)]), ('action_preconditions', [Number(89)]), ('variable_relations', [Number(89)]), ('abstraction_mappings', [Number(89)]), ('conformance_module', [Number(89), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.341026s.

[22-02-2022_03-43-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.257316s with result Unsatisfiable.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5983412000005046, Incremental time limit = None
Running cumulative time = 7.511631400005172, Cumulative time limit = 1800
Used memory = (RSS = 2330.765625Mb, VMS = 2360.480469Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =     89 : Current =     90
Incrementor step ends | Minimum  =     76 : Maximum =    300

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(90)]), ('state_module', [Number(90), Number(71)]), ('plan_module', [Number(90), Number(71), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(90), Number(71), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(90)]), ('action_preconditions', [Number(90)]), ('variable_relations', [Number(90)]), ('abstraction_mappings', [Number(90)]), ('conformance_module', [Number(90), Number(71), Number(21), Number(25), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.339104s.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.282144s with result Satisfiable.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.621248899999955, Incremental time limit = None
Running cumulative time = 8.132880300005127, Cumulative time limit = 1800
Used memory = (RSS = 2340.558594Mb, VMS = 2368.210938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.743571s, Solving = 2.389309s, Total = 8.132880s, Memory = (RSS = 2340.558594Mb, VMS = 2368.210938Mb), Step range = [71-90]), Calls = 16
Final Model :: Total atoms = 27800, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.901139s, Solving = 0.334759s, Total = 1.235898s, Memory = (RSS = 2285.445312Mb, VMS = 2304.398438Mb), Step range = [71-75]
2 : Statistics :: Grounding = 0.282183s, Solving = 0.042991s, Total = 0.325174s, Memory = (RSS = 2289.019531Mb, VMS = 2310.003906Mb), Step range = [76-76]
3 : Statistics :: Grounding = 0.304817s, Solving = 0.048703s, Total = 0.353520s, Memory = (RSS = 2291.152344Mb, VMS = 2310.554688Mb), Step range = [77-77]
4 : Statistics :: Grounding = 0.290807s, Solving = 0.051684s, Total = 0.342490s, Memory = (RSS = 2293.472656Mb, VMS = 2315.949219Mb), Step range = [78-78]
5 : Statistics :: Grounding = 0.287884s, Solving = 0.055250s, Total = 0.343133s, Memory = (RSS = 2295.593750Mb, VMS = 2317.742188Mb), Step range = [79-79]
6 : Statistics :: Grounding = 0.300004s, Solving = 0.064200s, Total = 0.364204s, Memory = (RSS = 2297.894531Mb, VMS = 2318.304688Mb), Step range = [80-80]
7 : Statistics :: Grounding = 0.302235s, Solving = 0.110338s, Total = 0.412573s, Memory = (RSS = 2305.273438Mb, VMS = 2333.437500Mb), Step range = [81-81]
8 : Statistics :: Grounding = 0.308746s, Solving = 0.108161s, Total = 0.416906s, Memory = (RSS = 2309.082031Mb, VMS = 2335.410156Mb), Step range = [82-82]
9 : Statistics :: Grounding = 0.314217s, Solving = 0.125893s, Total = 0.440110s, Memory = (RSS = 2311.824219Mb, VMS = 2337.019531Mb), Step range = [83-83]
10 : Statistics :: Grounding = 0.355283s, Solving = 0.157402s, Total = 0.512685s, Memory = (RSS = 2314.699219Mb, VMS = 2337.589844Mb), Step range = [84-84]
11 : Statistics :: Grounding = 0.342506s, Solving = 0.172374s, Total = 0.514880s, Memory = (RSS = 2317.582031Mb, VMS = 2338.941406Mb), Step range = [85-85]
12 : Statistics :: Grounding = 0.367940s, Solving = 0.150880s, Total = 0.518820s, Memory = (RSS = 2320.437500Mb, VMS = 2354.054688Mb), Step range = [86-86]
13 : Statistics :: Grounding = 0.361488s, Solving = 0.199374s, Total = 0.560862s, Memory = (RSS = 2323.277344Mb, VMS = 2355.320312Mb), Step range = [87-87]
14 : Statistics :: Grounding = 0.344193s, Solving = 0.227842s, Total = 0.572035s, Memory = (RSS = 2327.058594Mb, VMS = 2356.914062Mb), Step range = [88-88]
15 : Statistics :: Grounding = 0.341026s, Solving = 0.257316s, Total = 0.598341s, Memory = (RSS = 2330.765625Mb, VMS = 2360.480469Mb), Step range = [89-89]
16 : Statistics :: Grounding = 0.339104s, Solving = 0.282144s, Total = 0.621249s, Memory = (RSS = 2340.558594Mb, VMS = 2368.210938Mb), Step range = [90-90]

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 8.132880s due to: Stop condition reached.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 25, Last requested goal index = 25, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 5.743571s, Solving = 2.389309s, Total = 8.132880s, Memory = (RSS = 2340.558594Mb, VMS = 2368.210938Mb), Step range = [71-90]), Calls = 16
Model :: Total atoms = 27800, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 19 :: Actions = 19                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Monolevel problem 5 at level 1 solved.

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Online planning increment 5 finished.

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 5 : Total constraining sub-goal stages = 31 : Goals achieved = 25 : Goals unachieved = 6 : Complete = False

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 2.

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 6 by method ground-first is [1-1].

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 6 at level 1:
Total Templated Partial Problems = 6, Problem Range = [1-6], Size = 31, Sub-goal Stage Range = [1-31]
Division points [total=5] : [(Index = 5, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 15, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 20, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 25, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [26-31]

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [26-31], problem number = 6, increment number = 6

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 26)
	('last_sgoals', 31)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [26-31] : Concurrency disabled : Minimum search length bound enabled with value 95

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 26
last_sgoals = 31
start_step = 90
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 95

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-43-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-43-05] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 90 as problem start state.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with(nothing)', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'retracted', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 90})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 90})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 90})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 90})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 90})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': 'nothing', 'S': 90})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(store_room,0,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 90})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(store_room,5,1)', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 90})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 90})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 90})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 90})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'S': 90})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 90})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'retracted', 'S': 90})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 90})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 90})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 90})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 90})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 90})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': 'nothing', 'S': 90})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 90})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 90})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 90})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'store_room', 'S': 90})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'store_room', 'S': 90})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 90})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'store_room', 'S': 90})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'store_room', 'S': 90})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 90})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'store_room', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 90})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 90})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 90})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 90})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'S': 90})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 90})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 90})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 90})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 90})

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 90).
holds(1, complete_tower(red,puzzle_room_table), false, 90).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 90).
holds(1, configuration(manipulator_end_2), aligned_with(nothing), 90).
holds(1, configuration(manipulator_limb_1), retracted, 90).
holds(1, configuration(manipulator_limb_2), extended, 90).
holds(1, configuration(puzzle_room_door), open, 90).
holds(1, configuration(starting_room_door), closed, 90).
holds(1, configuration(store_room_door), open, 90).
holds(1, grasping(manipulator_arm_1), (block,5), 90).
holds(1, grasping(manipulator_arm_2), nothing, 90).
holds(1, grasping(manipulator_end_1), (block,5), 90).
holds(1, grasping(manipulator_end_2), nothing, 90).
holds(1, in((block,1)), (puzzle_room,5,0), 90).
holds(1, in((block,2)), (puzzle_room,5,0), 90).
holds(1, in((block,3)), (puzzle_room,5,0), 90).
holds(1, in((block,4)), (store_room,0,0), 90).
holds(1, in((block,5)), (store_room,5,1), 90).
holds(1, in((block,6)), (puzzle_room,5,0), 90).
holds(1, in(manipulator_arm_1), (store_room,5,1), 90).
holds(1, in(manipulator_arm_2), (store_room,5,1), 90).
holds(1, in(manipulator_end_1), (store_room,5,1), 90).
holds(1, in(manipulator_end_2), (store_room,5,1), 90).
holds(1, in(manipulator_limb_1), (store_room,5,1), 90).
holds(1, in(manipulator_limb_2), (store_room,5,1), 90).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 90).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 90).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 90).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 90).
holds(1, in(talos), (store_room,5,1), 90).
holds(1, in_tower((block,1),(block,1)), true, 90).
holds(1, in_tower((block,1),(block,2)), false, 90).
holds(1, in_tower((block,1),(block,3)), true, 90).
holds(1, in_tower((block,1),(block,4)), false, 90).
holds(1, in_tower((block,1),(block,5)), false, 90).
holds(1, in_tower((block,1),(block,6)), false, 90).
holds(1, in_tower((block,2),(block,1)), false, 90).
holds(1, in_tower((block,2),(block,2)), true, 90).
holds(1, in_tower((block,2),(block,3)), false, 90).
holds(1, in_tower((block,2),(block,4)), false, 90).
holds(1, in_tower((block,2),(block,5)), false, 90).
holds(1, in_tower((block,2),(block,6)), false, 90).
holds(1, in_tower((block,3),(block,1)), false, 90).
holds(1, in_tower((block,3),(block,2)), false, 90).
holds(1, in_tower((block,3),(block,3)), false, 90).
holds(1, in_tower((block,3),(block,4)), false, 90).
holds(1, in_tower((block,3),(block,5)), false, 90).
holds(1, in_tower((block,3),(block,6)), false, 90).
holds(1, in_tower((block,4),(block,1)), false, 90).
holds(1, in_tower((block,4),(block,2)), false, 90).
holds(1, in_tower((block,4),(block,3)), false, 90).
holds(1, in_tower((block,4),(block,4)), false, 90).
holds(1, in_tower((block,4),(block,5)), false, 90).
holds(1, in_tower((block,4),(block,6)), false, 90).
holds(1, in_tower((block,5),(block,1)), false, 90).
holds(1, in_tower((block,5),(block,2)), false, 90).
holds(1, in_tower((block,5),(block,3)), false, 90).
holds(1, in_tower((block,5),(block,4)), false, 90).
holds(1, in_tower((block,5),(block,5)), false, 90).
holds(1, in_tower((block,5),(block,6)), false, 90).
holds(1, in_tower((block,6),(block,1)), false, 90).
holds(1, in_tower((block,6),(block,2)), false, 90).
holds(1, in_tower((block,6),(block,3)), false, 90).
holds(1, in_tower((block,6),(block,4)), false, 90).
holds(1, in_tower((block,6),(block,5)), false, 90).
holds(1, in_tower((block,6),(block,6)), true, 90).
holds(1, on((block,1)), puzzle_room_table_left, 90).
holds(1, on((block,2)), puzzle_room_table_right, 90).
holds(1, on((block,3)), (block,1), 90).
holds(1, on((block,4)), nothing, 90).
holds(1, on((block,5)), nothing, 90).
holds(1, on((block,6)), puzzle_room_table_middle, 90).
holds(1, tower_base((block,1),puzzle_room_table), true, 90).
holds(1, tower_base((block,2),puzzle_room_table), true, 90).
holds(1, tower_base((block,3),puzzle_room_table), false, 90).
holds(1, tower_base((block,4),puzzle_room_table), false, 90).
holds(1, tower_base((block,5),puzzle_room_table), false, 90).
holds(1, tower_base((block,6),puzzle_room_table), true, 90).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 90).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 90).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 90).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 90).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 90).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 90).
holds(2, complete_tower(blue,puzzle_room_table), false, 90).
holds(2, complete_tower(red,puzzle_room_table), false, 90).
holds(2, configuration(manipulator_arm_1), retracted, 90).
holds(2, configuration(manipulator_arm_2), extended, 90).
holds(2, configuration(puzzle_room_door), open, 90).
holds(2, configuration(starting_room_door), closed, 90).
holds(2, configuration(store_room_door), open, 90).
holds(2, grasping(manipulator_arm_1), (block,5), 90).
holds(2, grasping(manipulator_arm_2), nothing, 90).
holds(2, in((block,1)), puzzle_room, 90).
holds(2, in((block,2)), puzzle_room, 90).
holds(2, in((block,3)), puzzle_room, 90).
holds(2, in((block,4)), store_room, 90).
holds(2, in((block,5)), store_room, 90).
holds(2, in((block,6)), puzzle_room, 90).
holds(2, in(manipulator_arm_1), store_room, 90).
holds(2, in(manipulator_arm_2), store_room, 90).
holds(2, in(puzzle_room_table), puzzle_room, 90).
holds(2, in(talos), store_room, 90).
holds(2, in_tower((block,1),(block,1)), true, 90).
holds(2, in_tower((block,1),(block,2)), false, 90).
holds(2, in_tower((block,1),(block,3)), true, 90).
holds(2, in_tower((block,1),(block,4)), false, 90).
holds(2, in_tower((block,1),(block,5)), false, 90).
holds(2, in_tower((block,1),(block,6)), false, 90).
holds(2, in_tower((block,2),(block,1)), false, 90).
holds(2, in_tower((block,2),(block,2)), true, 90).
holds(2, in_tower((block,2),(block,3)), false, 90).
holds(2, in_tower((block,2),(block,4)), false, 90).
holds(2, in_tower((block,2),(block,5)), false, 90).
holds(2, in_tower((block,2),(block,6)), false, 90).
holds(2, in_tower((block,3),(block,1)), false, 90).
holds(2, in_tower((block,3),(block,2)), false, 90).
holds(2, in_tower((block,3),(block,3)), false, 90).
holds(2, in_tower((block,3),(block,4)), false, 90).
holds(2, in_tower((block,3),(block,5)), false, 90).
holds(2, in_tower((block,3),(block,6)), false, 90).
holds(2, in_tower((block,4),(block,1)), false, 90).
holds(2, in_tower((block,4),(block,2)), false, 90).
holds(2, in_tower((block,4),(block,3)), false, 90).
holds(2, in_tower((block,4),(block,4)), false, 90).
holds(2, in_tower((block,4),(block,5)), false, 90).
holds(2, in_tower((block,4),(block,6)), false, 90).
holds(2, in_tower((block,5),(block,1)), false, 90).
holds(2, in_tower((block,5),(block,2)), false, 90).
holds(2, in_tower((block,5),(block,3)), false, 90).
holds(2, in_tower((block,5),(block,4)), false, 90).
holds(2, in_tower((block,5),(block,5)), false, 90).
holds(2, in_tower((block,5),(block,6)), false, 90).
holds(2, in_tower((block,6),(block,1)), false, 90).
holds(2, in_tower((block,6),(block,2)), false, 90).
holds(2, in_tower((block,6),(block,3)), false, 90).
holds(2, in_tower((block,6),(block,4)), false, 90).
holds(2, in_tower((block,6),(block,5)), false, 90).
holds(2, in_tower((block,6),(block,6)), true, 90).
holds(2, on((block,1)), puzzle_room_table, 90).
holds(2, on((block,2)), puzzle_room_table, 90).
holds(2, on((block,3)), (block,1), 90).
holds(2, on((block,4)), nothing, 90).
holds(2, on((block,5)), nothing, 90).
holds(2, on((block,6)), puzzle_room_table, 90).
holds(2, tower_base((block,1),puzzle_room_table), true, 90).
holds(2, tower_base((block,2),puzzle_room_table), true, 90).
holds(2, tower_base((block,3),puzzle_room_table), false, 90).
holds(2, tower_base((block,4),puzzle_room_table), false, 90).
holds(2, tower_base((block,5),puzzle_room_table), false, 90).
holds(2, tower_base((block,6),puzzle_room_table), true, 90).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 90).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 90).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 90).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 90).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 90).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 90).

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=95']

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_2,(block,4))', 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'I': 26})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,retracted)', 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'I': 27})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(hallway)', 'F': 'in(talos)', 'V': 'hallway', 'I': 28})
SubGoal({'L': 2, 'R': 'talos', 'A': 'move(puzzle_room)', 'F': 'in(talos)', 'V': 'puzzle_room', 'I': 29})
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_1,extended)', 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'I': 30})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,5),(block,6))', 'F': 'on((block,5))', 'V': '(block,6)', 'I': 31})

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 6 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_2,(block,4)), grasping(manipulator_arm_2), (block,4), 26).
sub_goal(2, talos, configure(manipulator_arm_2,retracted), configuration(manipulator_arm_2), retracted, 27).
sub_goal(2, talos, move(hallway), in(talos), hallway, 28).
sub_goal(2, talos, move(puzzle_room), in(talos), puzzle_room, 29).
sub_goal(2, talos, configure(manipulator_arm_1,extended), configuration(manipulator_arm_1), extended, 30).
sub_goal(2, talos, put(manipulator_arm_1,(block,5),(block,6)), on((block,5)), (block,6), 31).

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=95']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EEA8ED5820>]
	incrementor = SolveIncrementor(step_start=90, step_increase=1, step_increase_initial=6, step_end_min=96, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 90), range_=None), IncPart(name='plan_module', args=('#inc', 90, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 90, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 90, 26, 31, 'sequential', 'false'), range_=None)]

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 824 rules

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004653699999835226s

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119916s.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022553s with result Satisfiable.

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF16EDEE50>

[22-02-2022_03-43-05] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 90)
	('last_sgoals', 31)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 26)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF16EDEE50>)

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 90). %* None *%
#program plan_module(#inc, 90, false, false). %* None *%
#program optimisation_module(#inc, 90, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 90, 26, 31, sequential, false). %* None *%

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     89 : Current =     95
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(95)]), ('state_module', [Number(90), Number(90)]), ('plan_module', [Number(90), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(90), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(90)]), ('action_preconditions', [Number(90)]), ('variable_relations', [Number(90)]), ('abstraction_mappings', [Number(90)]), ('conformance_module', [Number(90), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(91), Number(90)]), ('plan_module', [Number(91), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(91), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(91)]), ('action_preconditions', [Number(91)]), ('variable_relations', [Number(91)]), ('abstraction_mappings', [Number(91)]), ('conformance_module', [Number(91), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(92), Number(90)]), ('plan_module', [Number(92), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(92), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(92)]), ('action_preconditions', [Number(92)]), ('variable_relations', [Number(92)]), ('abstraction_mappings', [Number(92)]), ('conformance_module', [Number(92), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(93), Number(90)]), ('plan_module', [Number(93), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(93), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(93)]), ('action_preconditions', [Number(93)]), ('variable_relations', [Number(93)]), ('abstraction_mappings', [Number(93)]), ('conformance_module', [Number(93), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(94), Number(90)]), ('plan_module', [Number(94), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(94), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(94)]), ('action_preconditions', [Number(94)]), ('variable_relations', [Number(94)]), ('abstraction_mappings', [Number(94)]), ('conformance_module', [Number(94), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(95), Number(90)]), ('plan_module', [Number(95), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(95), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(95)]), ('action_preconditions', [Number(95)]), ('variable_relations', [Number(95)]), ('abstraction_mappings', [Number(95)]), ('conformance_module', [Number(95), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 1.093524s.

[22-02-2022_03-43-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.373019s with result Satisfiable.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.466542600000139, Incremental time limit = None
Running cumulative time = 1.466542600000139, Cumulative time limit = 1800
Used memory = (RSS = 2296.378906Mb, VMS = 2316.386719Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 1.093524s, Solving = 0.373019s, Total = 1.466543s, Memory = (RSS = 2296.378906Mb, VMS = 2316.386719Mb), Step range = [90-95]), Calls = 1
Final Model :: Total atoms = 22232, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     95 : Current =     96
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(96)]), ('state_module', [Number(96), Number(90)]), ('plan_module', [Number(96), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(96), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(96)]), ('action_preconditions', [Number(96)]), ('variable_relations', [Number(96)]), ('abstraction_mappings', [Number(96)]), ('conformance_module', [Number(96), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.261434s.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.040375s with result Unsatisfiable.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.30180899999959365, Incremental time limit = None
Running cumulative time = 1.7683515999997326, Cumulative time limit = 1800
Used memory = (RSS = 2298.296875Mb, VMS = 2320.289062Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     96 : Current =     97
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(97)]), ('state_module', [Number(97), Number(90)]), ('plan_module', [Number(97), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(97), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(97)]), ('action_preconditions', [Number(97)]), ('variable_relations', [Number(97)]), ('abstraction_mappings', [Number(97)]), ('conformance_module', [Number(97), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.268073s.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045302s with result Unsatisfiable.

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3133758999993006, Incremental time limit = None
Running cumulative time = 2.081727499999033, Cumulative time limit = 1800
Used memory = (RSS = 2300.484375Mb, VMS = 2320.792969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =     97 : Current =     98
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(98)]), ('state_module', [Number(98), Number(90)]), ('plan_module', [Number(98), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(98), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(98)]), ('action_preconditions', [Number(98)]), ('variable_relations', [Number(98)]), ('abstraction_mappings', [Number(98)]), ('conformance_module', [Number(98), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.270962s.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045581s with result Unsatisfiable.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3165428000002066, Incremental time limit = None
Running cumulative time = 2.39827029999924, Cumulative time limit = 1800
Used memory = (RSS = 2302.546875Mb, VMS = 2322.574219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =     98 : Current =     99
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(99)]), ('state_module', [Number(99), Number(90)]), ('plan_module', [Number(99), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(99), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(99)]), ('action_preconditions', [Number(99)]), ('variable_relations', [Number(99)]), ('abstraction_mappings', [Number(99)]), ('conformance_module', [Number(99), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.284357s.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050506s with result Unsatisfiable.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33486290000018926, Incremental time limit = None
Running cumulative time = 2.733133199999429, Cumulative time limit = 1800
Used memory = (RSS = 2309.535156Mb, VMS = 2335.503906Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =     99 : Current =    100
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(100)]), ('state_module', [Number(100), Number(90)]), ('plan_module', [Number(100), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(100), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(100)]), ('action_preconditions', [Number(100)]), ('variable_relations', [Number(100)]), ('abstraction_mappings', [Number(100)]), ('conformance_module', [Number(100), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.298555s.

[22-02-2022_03-43-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052787s with result Unsatisfiable.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3513419000000795, Incremental time limit = None
Running cumulative time = 3.0844750999995085, Cumulative time limit = 1800
Used memory = (RSS = 2312.281250Mb, VMS = 2336.066406Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    100 : Current =    101
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(101)]), ('state_module', [Number(101), Number(90)]), ('plan_module', [Number(101), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(101), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(101)]), ('action_preconditions', [Number(101)]), ('variable_relations', [Number(101)]), ('abstraction_mappings', [Number(101)]), ('conformance_module', [Number(101), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.305457s.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055818s with result Unsatisfiable.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3612750000002052, Incremental time limit = None
Running cumulative time = 3.4457500999997137, Cumulative time limit = 1800
Used memory = (RSS = 2316.226562Mb, VMS = 2338.042969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    101 : Current =    102
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(102)]), ('state_module', [Number(102), Number(90)]), ('plan_module', [Number(102), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(102), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(102)]), ('action_preconditions', [Number(102)]), ('variable_relations', [Number(102)]), ('abstraction_mappings', [Number(102)]), ('conformance_module', [Number(102), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.311022s.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.060926s with result Unsatisfiable.

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3719482999995307, Incremental time limit = None
Running cumulative time = 3.8176983999992444, Cumulative time limit = 1800
Used memory = (RSS = 2319.085938Mb, VMS = 2339.664062Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    102 : Current =    103
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(103)]), ('state_module', [Number(103), Number(90)]), ('plan_module', [Number(103), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(103), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(103)]), ('action_preconditions', [Number(103)]), ('variable_relations', [Number(103)]), ('abstraction_mappings', [Number(103)]), ('conformance_module', [Number(103), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.321874s.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.074885s with result Unsatisfiable.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39675940000051924, Incremental time limit = None
Running cumulative time = 4.214457799999764, Cumulative time limit = 1800
Used memory = (RSS = 2322.054688Mb, VMS = 2352.578125Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    103 : Current =    104
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(104)]), ('state_module', [Number(104), Number(90)]), ('plan_module', [Number(104), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(104), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(104)]), ('action_preconditions', [Number(104)]), ('variable_relations', [Number(104)]), ('abstraction_mappings', [Number(104)]), ('conformance_module', [Number(104), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.325800s.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.078916s with result Unsatisfiable.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4047162999995635, Incremental time limit = None
Running cumulative time = 4.619174099999327, Cumulative time limit = 1800
Used memory = (RSS = 2324.937500Mb, VMS = 2354.640625Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =    104 : Current =    105
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(105)]), ('state_module', [Number(105), Number(90)]), ('plan_module', [Number(105), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(105), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(105)]), ('action_preconditions', [Number(105)]), ('variable_relations', [Number(105)]), ('abstraction_mappings', [Number(105)]), ('conformance_module', [Number(105), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.320641s.

[22-02-2022_03-43-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.090943s with result Unsatisfiable.

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4115832000006776, Incremental time limit = None
Running cumulative time = 5.030757300000005, Cumulative time limit = 1800
Used memory = (RSS = 2327.933594Mb, VMS = 2355.203125Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =    105 : Current =    106
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(106)]), ('state_module', [Number(106), Number(90)]), ('plan_module', [Number(106), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(106), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(106)]), ('action_preconditions', [Number(106)]), ('variable_relations', [Number(106)]), ('abstraction_mappings', [Number(106)]), ('conformance_module', [Number(106), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.327416s.

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.123398s with result Unsatisfiable.

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.45081479999953444, Incremental time limit = None
Running cumulative time = 5.481572099999539, Cumulative time limit = 1800
Used memory = (RSS = 2330.640625Mb, VMS = 2355.765625Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =    106 : Current =    107
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(107)]), ('state_module', [Number(107), Number(90)]), ('plan_module', [Number(107), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(107), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(107)]), ('action_preconditions', [Number(107)]), ('variable_relations', [Number(107)]), ('abstraction_mappings', [Number(107)]), ('conformance_module', [Number(107), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.337382s.

[22-02-2022_03-43-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.168844s with result Unsatisfiable.

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5062260000004244, Incremental time limit = None
Running cumulative time = 5.987798099999964, Cumulative time limit = 1800
Used memory = (RSS = 2333.519531Mb, VMS = 2356.324219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =    107 : Current =    108
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(108)]), ('state_module', [Number(108), Number(90)]), ('plan_module', [Number(108), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(108), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(108)]), ('action_preconditions', [Number(108)]), ('variable_relations', [Number(108)]), ('abstraction_mappings', [Number(108)]), ('conformance_module', [Number(108), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.346075s.

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.214759s with result Unsatisfiable.

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5608345999999074, Incremental time limit = None
Running cumulative time = 6.548632699999871, Cumulative time limit = 1800
Used memory = (RSS = 2336.523438Mb, VMS = 2358.468750Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =    108 : Current =    109
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(109)]), ('state_module', [Number(109), Number(90)]), ('plan_module', [Number(109), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(109), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(109)]), ('action_preconditions', [Number(109)]), ('variable_relations', [Number(109)]), ('abstraction_mappings', [Number(109)]), ('conformance_module', [Number(109), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.349316s.

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.382549s with result Unsatisfiable.

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7318648999998913, Incremental time limit = None
Running cumulative time = 7.280497599999762, Cumulative time limit = 1800
Used memory = (RSS = 2345.863281Mb, VMS = 2387.187500Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =    109 : Current =    110
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(110)]), ('state_module', [Number(110), Number(90)]), ('plan_module', [Number(110), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(110), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(110)]), ('action_preconditions', [Number(110)]), ('variable_relations', [Number(110)]), ('abstraction_mappings', [Number(110)]), ('conformance_module', [Number(110), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.356975s.

[22-02-2022_03-43-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.419533s with result Unsatisfiable.

[22-02-2022_03-43-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.7765075999996043, Incremental time limit = None
Running cumulative time = 8.057005199999367, Cumulative time limit = 1800
Used memory = (RSS = 2348.933594Mb, VMS = 2387.742188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =    110 : Current =    111
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(111)]), ('state_module', [Number(111), Number(90)]), ('plan_module', [Number(111), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(111), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(111)]), ('action_preconditions', [Number(111)]), ('variable_relations', [Number(111)]), ('abstraction_mappings', [Number(111)]), ('conformance_module', [Number(111), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.358254s.

[22-02-2022_03-43-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.646090s with result Unsatisfiable.

[22-02-2022_03-43-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0043439999999464, Incremental time limit = None
Running cumulative time = 9.061349199999313, Cumulative time limit = 1800
Used memory = (RSS = 2352.074219Mb, VMS = 2388.304688Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =    111 : Current =    112
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(112)]), ('state_module', [Number(112), Number(90)]), ('plan_module', [Number(112), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(112), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(112)]), ('action_preconditions', [Number(112)]), ('variable_relations', [Number(112)]), ('abstraction_mappings', [Number(112)]), ('conformance_module', [Number(112), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.370515s.

[22-02-2022_03-43-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.674812s with result Unsatisfiable.

[22-02-2022_03-43-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.0453270999996676, Incremental time limit = None
Running cumulative time = 10.10667629999898, Cumulative time limit = 1800
Used memory = (RSS = 2356.148438Mb, VMS = 2391.398438Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =    112 : Current =    113
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(113)]), ('state_module', [Number(113), Number(90)]), ('plan_module', [Number(113), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(113), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(113)]), ('action_preconditions', [Number(113)]), ('variable_relations', [Number(113)]), ('abstraction_mappings', [Number(113)]), ('conformance_module', [Number(113), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.374087s.

[22-02-2022_03-43-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.956541s with result Unsatisfiable.

[22-02-2022_03-43-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.3306282000003193, Incremental time limit = None
Running cumulative time = 11.4373044999993, Cumulative time limit = 1800
Used memory = (RSS = 2367.457031Mb, VMS = 2402.070312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =    113 : Current =    114
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(114)]), ('state_module', [Number(114), Number(90)]), ('plan_module', [Number(114), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(114), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(114)]), ('action_preconditions', [Number(114)]), ('variable_relations', [Number(114)]), ('abstraction_mappings', [Number(114)]), ('conformance_module', [Number(114), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.385084s.

[22-02-2022_03-43-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.345655s with result Unsatisfiable.

[22-02-2022_03-43-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.7307390999994823, Incremental time limit = None
Running cumulative time = 13.168043599998782, Cumulative time limit = 1800
Used memory = (RSS = 2373.792969Mb, VMS = 2405.824219Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =    114 : Current =    115
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(115)]), ('state_module', [Number(115), Number(90)]), ('plan_module', [Number(115), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(115), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(115)]), ('action_preconditions', [Number(115)]), ('variable_relations', [Number(115)]), ('abstraction_mappings', [Number(115)]), ('conformance_module', [Number(115), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.386142s.

[22-02-2022_03-43-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.492517s with result Unsatisfiable.

[22-02-2022_03-43-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.8786588000002666, Incremental time limit = None
Running cumulative time = 15.046702399999049, Cumulative time limit = 1800
Used memory = (RSS = 2379.187500Mb, VMS = 2408.597656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =    115 : Current =    116
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(116)]), ('state_module', [Number(116), Number(90)]), ('plan_module', [Number(116), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(116), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(116)]), ('action_preconditions', [Number(116)]), ('variable_relations', [Number(116)]), ('abstraction_mappings', [Number(116)]), ('conformance_module', [Number(116), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.395314s.

[22-02-2022_03-43-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.598850s with result Unsatisfiable.

[22-02-2022_03-43-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9941641000004893, Incremental time limit = None
Running cumulative time = 17.040866499999538, Cumulative time limit = 1800
Used memory = (RSS = 2383.250000Mb, VMS = 2411.085938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =    116 : Current =    117
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(117)]), ('state_module', [Number(117), Number(90)]), ('plan_module', [Number(117), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(117), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(117)]), ('action_preconditions', [Number(117)]), ('variable_relations', [Number(117)]), ('abstraction_mappings', [Number(117)]), ('conformance_module', [Number(117), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.418512s.

[22-02-2022_03-43-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.884385s with result Unsatisfiable.

[22-02-2022_03-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.3028973000000406, Incremental time limit = None
Running cumulative time = 19.34376379999958, Cumulative time limit = 1800
Used memory = (RSS = 2388.898438Mb, VMS = 2416.445312Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =    117 : Current =    118
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-25] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(118)]), ('state_module', [Number(118), Number(90)]), ('plan_module', [Number(118), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(118), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(118)]), ('action_preconditions', [Number(118)]), ('variable_relations', [Number(118)]), ('abstraction_mappings', [Number(118)]), ('conformance_module', [Number(118), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.410038s.

[22-02-2022_03-43-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.778928s with result Unsatisfiable.

[22-02-2022_03-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.1889664000000266, Incremental time limit = None
Running cumulative time = 22.532730199999605, Cumulative time limit = 1800
Used memory = (RSS = 2396.449219Mb, VMS = 2423.589844Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =    118 : Current =    119
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(119)]), ('state_module', [Number(119), Number(90)]), ('plan_module', [Number(119), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(119), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(119)]), ('action_preconditions', [Number(119)]), ('variable_relations', [Number(119)]), ('abstraction_mappings', [Number(119)]), ('conformance_module', [Number(119), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.414947s.

[22-02-2022_03-43-29] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.698307s with result Unsatisfiable.

[22-02-2022_03-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 4.113254399999278, Incremental time limit = None
Running cumulative time = 26.645984599998883, Cumulative time limit = 1800
Used memory = (RSS = 2400.988281Mb, VMS = 2456.472656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =    119 : Current =    120
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(120)]), ('state_module', [Number(120), Number(90)]), ('plan_module', [Number(120), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(120), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(120)]), ('action_preconditions', [Number(120)]), ('variable_relations', [Number(120)]), ('abstraction_mappings', [Number(120)]), ('conformance_module', [Number(120), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.422954s.

[22-02-2022_03-43-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.878982s with result Unsatisfiable.

[22-02-2022_03-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.3019357000002856, Incremental time limit = None
Running cumulative time = 29.94792029999917, Cumulative time limit = 1800
Used memory = (RSS = 2405.593750Mb, VMS = 2458.671875Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [27]:
Running step bounds   | Previous =    120 : Current =    121
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-36] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(121)]), ('state_module', [Number(121), Number(90)]), ('plan_module', [Number(121), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(121), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(121)]), ('action_preconditions', [Number(121)]), ('variable_relations', [Number(121)]), ('abstraction_mappings', [Number(121)]), ('conformance_module', [Number(121), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.424223s.

[22-02-2022_03-43-37] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.172153s with result Unsatisfiable.

[22-02-2022_03-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [27]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.596375699999953, Incremental time limit = None
Running cumulative time = 33.54429599999912, Cumulative time limit = 1800
Used memory = (RSS = 2409.535156Mb, VMS = 2460.527344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [28]:
Running step bounds   | Previous =    121 : Current =    122
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(122)]), ('state_module', [Number(122), Number(90)]), ('plan_module', [Number(122), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(122), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(122)]), ('action_preconditions', [Number(122)]), ('variable_relations', [Number(122)]), ('abstraction_mappings', [Number(122)]), ('conformance_module', [Number(122), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.430471s.

[22-02-2022_03-43-40] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.839312s with result Unsatisfiable.

[22-02-2022_03-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [28]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.269783400000051, Incremental time limit = None
Running cumulative time = 36.81407939999917, Cumulative time limit = 1800
Used memory = (RSS = 2424.082031Mb, VMS = 2473.496094Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [29]:
Running step bounds   | Previous =    122 : Current =    123
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-43] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(123)]), ('state_module', [Number(123), Number(90)]), ('plan_module', [Number(123), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(123), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(123)]), ('action_preconditions', [Number(123)]), ('variable_relations', [Number(123)]), ('abstraction_mappings', [Number(123)]), ('conformance_module', [Number(123), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.444040s.

[22-02-2022_03-43-44] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 4.589539s with result Unsatisfiable.

[22-02-2022_03-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [29]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 5.033579299999474, Incremental time limit = None
Running cumulative time = 41.84765869999865, Cumulative time limit = 1800
Used memory = (RSS = 2441.734375Mb, VMS = 2492.062500Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [30]:
Running step bounds   | Previous =    123 : Current =    124
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-48] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(124)]), ('state_module', [Number(124), Number(90)]), ('plan_module', [Number(124), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(124), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(124)]), ('action_preconditions', [Number(124)]), ('variable_relations', [Number(124)]), ('abstraction_mappings', [Number(124)]), ('conformance_module', [Number(124), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.453128s.

[22-02-2022_03-43-49] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 5.060501s with result Unsatisfiable.

[22-02-2022_03-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [30]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 5.513629399999445, Incremental time limit = None
Running cumulative time = 47.36128809999809, Cumulative time limit = 1800
Used memory = (RSS = 2460.093750Mb, VMS = 2510.242188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [31]:
Running step bounds   | Previous =    124 : Current =    125
Incrementor step ends | Minimum  =     96 : Maximum =    300

[22-02-2022_03-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(125)]), ('state_module', [Number(125), Number(90)]), ('plan_module', [Number(125), Number(90), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(125), Number(90), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(125)]), ('action_preconditions', [Number(125)]), ('variable_relations', [Number(125)]), ('abstraction_mappings', [Number(125)]), ('conformance_module', [Number(125), Number(90), Number(26), Number(31), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.462254s.

[22-02-2022_03-43-54] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.707639s with result Satisfiable.

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [31]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.16989250000006, Incremental time limit = None
Running cumulative time = 50.53118059999815, Cumulative time limit = 1800
Used memory = (RSS = 2484.593750Mb, VMS = 2533.347656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.928828s, Solving = 38.602353s, Total = 50.531181s, Memory = (RSS = 2484.593750Mb, VMS = 2533.347656Mb), Step range = [90-125]), Calls = 31
Final Model :: Total atoms = 34185, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 1.093524s, Solving = 0.373019s, Total = 1.466543s, Memory = (RSS = 2296.378906Mb, VMS = 2316.386719Mb), Step range = [90-95]
2 : Statistics :: Grounding = 0.261434s, Solving = 0.040375s, Total = 0.301809s, Memory = (RSS = 2298.296875Mb, VMS = 2320.289062Mb), Step range = [96-96]
3 : Statistics :: Grounding = 0.268073s, Solving = 0.045302s, Total = 0.313376s, Memory = (RSS = 2300.484375Mb, VMS = 2320.792969Mb), Step range = [97-97]
4 : Statistics :: Grounding = 0.270962s, Solving = 0.045581s, Total = 0.316543s, Memory = (RSS = 2302.546875Mb, VMS = 2322.574219Mb), Step range = [98-98]
5 : Statistics :: Grounding = 0.284357s, Solving = 0.050506s, Total = 0.334863s, Memory = (RSS = 2309.535156Mb, VMS = 2335.503906Mb), Step range = [99-99]
6 : Statistics :: Grounding = 0.298555s, Solving = 0.052787s, Total = 0.351342s, Memory = (RSS = 2312.281250Mb, VMS = 2336.066406Mb), Step range = [100-100]
7 : Statistics :: Grounding = 0.305457s, Solving = 0.055818s, Total = 0.361275s, Memory = (RSS = 2316.226562Mb, VMS = 2338.042969Mb), Step range = [101-101]
8 : Statistics :: Grounding = 0.311022s, Solving = 0.060926s, Total = 0.371948s, Memory = (RSS = 2319.085938Mb, VMS = 2339.664062Mb), Step range = [102-102]
9 : Statistics :: Grounding = 0.321874s, Solving = 0.074885s, Total = 0.396759s, Memory = (RSS = 2322.054688Mb, VMS = 2352.578125Mb), Step range = [103-103]
10 : Statistics :: Grounding = 0.325800s, Solving = 0.078916s, Total = 0.404716s, Memory = (RSS = 2324.937500Mb, VMS = 2354.640625Mb), Step range = [104-104]
11 : Statistics :: Grounding = 0.320641s, Solving = 0.090943s, Total = 0.411583s, Memory = (RSS = 2327.933594Mb, VMS = 2355.203125Mb), Step range = [105-105]
12 : Statistics :: Grounding = 0.327416s, Solving = 0.123398s, Total = 0.450815s, Memory = (RSS = 2330.640625Mb, VMS = 2355.765625Mb), Step range = [106-106]
13 : Statistics :: Grounding = 0.337382s, Solving = 0.168844s, Total = 0.506226s, Memory = (RSS = 2333.519531Mb, VMS = 2356.324219Mb), Step range = [107-107]
14 : Statistics :: Grounding = 0.346075s, Solving = 0.214759s, Total = 0.560835s, Memory = (RSS = 2336.523438Mb, VMS = 2358.468750Mb), Step range = [108-108]
15 : Statistics :: Grounding = 0.349316s, Solving = 0.382549s, Total = 0.731865s, Memory = (RSS = 2345.863281Mb, VMS = 2387.187500Mb), Step range = [109-109]
16 : Statistics :: Grounding = 0.356975s, Solving = 0.419533s, Total = 0.776508s, Memory = (RSS = 2348.933594Mb, VMS = 2387.742188Mb), Step range = [110-110]
17 : Statistics :: Grounding = 0.358254s, Solving = 0.646090s, Total = 1.004344s, Memory = (RSS = 2352.074219Mb, VMS = 2388.304688Mb), Step range = [111-111]
18 : Statistics :: Grounding = 0.370515s, Solving = 0.674812s, Total = 1.045327s, Memory = (RSS = 2356.148438Mb, VMS = 2391.398438Mb), Step range = [112-112]
19 : Statistics :: Grounding = 0.374087s, Solving = 0.956541s, Total = 1.330628s, Memory = (RSS = 2367.457031Mb, VMS = 2402.070312Mb), Step range = [113-113]
20 : Statistics :: Grounding = 0.385084s, Solving = 1.345655s, Total = 1.730739s, Memory = (RSS = 2373.792969Mb, VMS = 2405.824219Mb), Step range = [114-114]
21 : Statistics :: Grounding = 0.386142s, Solving = 1.492517s, Total = 1.878659s, Memory = (RSS = 2379.187500Mb, VMS = 2408.597656Mb), Step range = [115-115]
22 : Statistics :: Grounding = 0.395314s, Solving = 1.598850s, Total = 1.994164s, Memory = (RSS = 2383.250000Mb, VMS = 2411.085938Mb), Step range = [116-116]
23 : Statistics :: Grounding = 0.418512s, Solving = 1.884385s, Total = 2.302897s, Memory = (RSS = 2388.898438Mb, VMS = 2416.445312Mb), Step range = [117-117]
24 : Statistics :: Grounding = 0.410038s, Solving = 2.778928s, Total = 3.188966s, Memory = (RSS = 2396.449219Mb, VMS = 2423.589844Mb), Step range = [118-118]
25 : Statistics :: Grounding = 0.414947s, Solving = 3.698307s, Total = 4.113254s, Memory = (RSS = 2400.988281Mb, VMS = 2456.472656Mb), Step range = [119-119]
26 : Statistics :: Grounding = 0.422954s, Solving = 2.878982s, Total = 3.301936s, Memory = (RSS = 2405.593750Mb, VMS = 2458.671875Mb), Step range = [120-120]
27 : Statistics :: Grounding = 0.424223s, Solving = 3.172153s, Total = 3.596376s, Memory = (RSS = 2409.535156Mb, VMS = 2460.527344Mb), Step range = [121-121]
28 : Statistics :: Grounding = 0.430471s, Solving = 2.839312s, Total = 3.269783s, Memory = (RSS = 2424.082031Mb, VMS = 2473.496094Mb), Step range = [122-122]
29 : Statistics :: Grounding = 0.444040s, Solving = 4.589539s, Total = 5.033579s, Memory = (RSS = 2441.734375Mb, VMS = 2492.062500Mb), Step range = [123-123]
30 : Statistics :: Grounding = 0.453128s, Solving = 5.060501s, Total = 5.513629s, Memory = (RSS = 2460.093750Mb, VMS = 2510.242188Mb), Step range = [124-124]
31 : Statistics :: Grounding = 0.462254s, Solving = 2.707639s, Total = 3.169893s, Memory = (RSS = 2484.593750Mb, VMS = 2533.347656Mb), Step range = [125-125]

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 50.531181s due to: Stop condition reached.

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-57] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 31, Last requested goal index = 31, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 11.928828s, Solving = 38.602353s, Total = 50.531181s, Memory = (RSS = 2484.593750Mb, VMS = 2533.347656Mb), Step range = [90-125]), Calls = 31
Model :: Total atoms = 34185, Cost = (), Optimality proven = False, Number = 1, Thread ID = 1, Model type = ModelType.StableModel

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 35 :: Actions = 35                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Monolevel problem 6 at level 1 solved.

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Online planning increment 6 finished.

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 1 : Total constraining sub-goal stages = 20 : Goals achieved = 10 : Goals unachieved = 10 : Complete = False
Level = 1 : Solved problems = 6 : Total constraining sub-goal stages = 31 : Goals achieved = 31 : Goals unachieved = 0 : Complete = False

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 2, Highest = 2.

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 7 by method ground-first is [1-2].

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 3 to proactively divide planning problem 2 at level 2:
Total Templated Partial Problems = 2, Problem Range = [1-2], Size = 20, Sub-goal Stage Range = [1-20]
Division points [total=1] : [(Index = 10, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [11-20]

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 2, sgoals range = [11-20], problem number = 2, increment number = 7

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 11)
	('last_sgoals', 20)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 2)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 2] partial conformance refinement (sequential) with sgoals range [11-20] : Concurrency disabled : Minimum search length bound enabled with value 40

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 2
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 11
last_sgoals = 20
start_step = 31
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 40

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[22-02-2022_03-43-58] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-43-58] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 31 as problem start state.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 31})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 31})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 31})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 31})
Fluent({'L': 3, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 31})
Fluent({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 31})
Fluent({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 31})

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 141 rules into program part ash_initial_state:

holds(2, complete_tower(blue,puzzle_room_table), false, 31).
holds(2, complete_tower(red,puzzle_room_table), false, 31).
holds(2, configuration(manipulator_arm_1), extended, 31).
holds(2, configuration(manipulator_arm_2), retracted, 31).
holds(2, configuration(puzzle_room_door), open, 31).
holds(2, configuration(starting_room_door), closed, 31).
holds(2, configuration(store_room_door), open, 31).
holds(2, grasping(manipulator_arm_1), (block,5), 31).
holds(2, grasping(manipulator_arm_2), (block,4), 31).
holds(2, in((block,1)), puzzle_room, 31).
holds(2, in((block,2)), puzzle_room, 31).
holds(2, in((block,3)), puzzle_room, 31).
holds(2, in((block,4)), puzzle_room, 31).
holds(2, in((block,5)), puzzle_room, 31).
holds(2, in((block,6)), puzzle_room, 31).
holds(2, in(manipulator_arm_1), puzzle_room, 31).
holds(2, in(manipulator_arm_2), puzzle_room, 31).
holds(2, in(puzzle_room_table), puzzle_room, 31).
holds(2, in(talos), puzzle_room, 31).
holds(2, in_tower((block,1),(block,1)), true, 31).
holds(2, in_tower((block,1),(block,2)), false, 31).
holds(2, in_tower((block,1),(block,3)), true, 31).
holds(2, in_tower((block,1),(block,4)), false, 31).
holds(2, in_tower((block,1),(block,5)), false, 31).
holds(2, in_tower((block,1),(block,6)), false, 31).
holds(2, in_tower((block,2),(block,1)), false, 31).
holds(2, in_tower((block,2),(block,2)), true, 31).
holds(2, in_tower((block,2),(block,3)), false, 31).
holds(2, in_tower((block,2),(block,4)), false, 31).
holds(2, in_tower((block,2),(block,5)), false, 31).
holds(2, in_tower((block,2),(block,6)), false, 31).
holds(2, in_tower((block,3),(block,1)), false, 31).
holds(2, in_tower((block,3),(block,2)), false, 31).
holds(2, in_tower((block,3),(block,3)), false, 31).
holds(2, in_tower((block,3),(block,4)), false, 31).
holds(2, in_tower((block,3),(block,5)), false, 31).
holds(2, in_tower((block,3),(block,6)), false, 31).
holds(2, in_tower((block,4),(block,1)), false, 31).
holds(2, in_tower((block,4),(block,2)), false, 31).
holds(2, in_tower((block,4),(block,3)), false, 31).
holds(2, in_tower((block,4),(block,4)), false, 31).
holds(2, in_tower((block,4),(block,5)), false, 31).
holds(2, in_tower((block,4),(block,6)), false, 31).
holds(2, in_tower((block,5),(block,1)), false, 31).
holds(2, in_tower((block,5),(block,2)), false, 31).
holds(2, in_tower((block,5),(block,3)), false, 31).
holds(2, in_tower((block,5),(block,4)), false, 31).
holds(2, in_tower((block,5),(block,5)), false, 31).
holds(2, in_tower((block,5),(block,6)), false, 31).
holds(2, in_tower((block,6),(block,1)), false, 31).
holds(2, in_tower((block,6),(block,2)), false, 31).
holds(2, in_tower((block,6),(block,3)), false, 31).
holds(2, in_tower((block,6),(block,4)), false, 31).
holds(2, in_tower((block,6),(block,5)), true, 31).
holds(2, in_tower((block,6),(block,6)), true, 31).
holds(2, on((block,1)), puzzle_room_table, 31).
holds(2, on((block,2)), puzzle_room_table, 31).
holds(2, on((block,3)), (block,1), 31).
holds(2, on((block,4)), nothing, 31).
holds(2, on((block,5)), (block,6), 31).
holds(2, on((block,6)), puzzle_room_table, 31).
holds(2, tower_base((block,1),puzzle_room_table), true, 31).
holds(2, tower_base((block,2),puzzle_room_table), true, 31).
holds(2, tower_base((block,3),puzzle_room_table), false, 31).
holds(2, tower_base((block,4),puzzle_room_table), false, 31).
holds(2, tower_base((block,5),puzzle_room_table), false, 31).
holds(2, tower_base((block,6),puzzle_room_table), true, 31).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 31).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 31).
holds(3, complete_tower(blue,puzzle_room_table), false, 31).
holds(3, complete_tower(red,puzzle_room_table), false, 31).
holds(3, grasping(manipulator_arm_1), (block,5), 31).
holds(3, grasping(manipulator_arm_2), (block,4), 31).
holds(3, in((block,1)), puzzle_room, 31).
holds(3, in((block,2)), puzzle_room, 31).
holds(3, in((block,3)), puzzle_room, 31).
holds(3, in((block,4)), puzzle_room, 31).
holds(3, in((block,5)), puzzle_room, 31).
holds(3, in((block,6)), puzzle_room, 31).
holds(3, in(manipulator_arm_1), puzzle_room, 31).
holds(3, in(manipulator_arm_2), puzzle_room, 31).
holds(3, in(puzzle_room_table), puzzle_room, 31).
holds(3, in(talos), puzzle_room, 31).
holds(3, in_tower((block,1),(block,1)), true, 31).
holds(3, in_tower((block,1),(block,2)), false, 31).
holds(3, in_tower((block,1),(block,3)), true, 31).
holds(3, in_tower((block,1),(block,4)), false, 31).
holds(3, in_tower((block,1),(block,5)), false, 31).
holds(3, in_tower((block,1),(block,6)), false, 31).
holds(3, in_tower((block,2),(block,1)), false, 31).
holds(3, in_tower((block,2),(block,2)), true, 31).
holds(3, in_tower((block,2),(block,3)), false, 31).
holds(3, in_tower((block,2),(block,4)), false, 31).
holds(3, in_tower((block,2),(block,5)), false, 31).
holds(3, in_tower((block,2),(block,6)), false, 31).
holds(3, in_tower((block,3),(block,1)), false, 31).
holds(3, in_tower((block,3),(block,2)), false, 31).
holds(3, in_tower((block,3),(block,3)), false, 31).
holds(3, in_tower((block,3),(block,4)), false, 31).
holds(3, in_tower((block,3),(block,5)), false, 31).
holds(3, in_tower((block,3),(block,6)), false, 31).
holds(3, in_tower((block,4),(block,1)), false, 31).
holds(3, in_tower((block,4),(block,2)), false, 31).
holds(3, in_tower((block,4),(block,3)), false, 31).
holds(3, in_tower((block,4),(block,4)), false, 31).
holds(3, in_tower((block,4),(block,5)), false, 31).
holds(3, in_tower((block,4),(block,6)), false, 31).
holds(3, in_tower((block,5),(block,1)), false, 31).
holds(3, in_tower((block,5),(block,2)), false, 31).
holds(3, in_tower((block,5),(block,3)), false, 31).
holds(3, in_tower((block,5),(block,4)), false, 31).
holds(3, in_tower((block,5),(block,5)), false, 31).
holds(3, in_tower((block,5),(block,6)), false, 31).
holds(3, in_tower((block,6),(block,1)), false, 31).
holds(3, in_tower((block,6),(block,2)), false, 31).
holds(3, in_tower((block,6),(block,3)), false, 31).
holds(3, in_tower((block,6),(block,4)), false, 31).
holds(3, in_tower((block,6),(block,5)), true, 31).
holds(3, in_tower((block,6),(block,6)), true, 31).
holds(3, on((block,1)), puzzle_room_table, 31).
holds(3, on((block,2)), puzzle_room_table, 31).
holds(3, on((block,3)), (block,1), 31).
holds(3, on((block,4)), nothing, 31).
holds(3, on((block,5)), (block,6), 31).
holds(3, on((block,6)), puzzle_room_table, 31).
holds(3, tower_base((block,1),puzzle_room_table), true, 31).
holds(3, tower_base((block,2),puzzle_room_table), true, 31).
holds(3, tower_base((block,3),puzzle_room_table), false, 31).
holds(3, tower_base((block,4),puzzle_room_table), false, 31).
holds(3, tower_base((block,5),puzzle_room_table), false, 31).
holds(3, tower_base((block,6),puzzle_room_table), true, 31).
holds(3, unordered_tower((block,1),puzzle_room_table), true, 31).
holds(3, unordered_tower((block,2),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,3),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,4),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,5),puzzle_room_table), false, 31).
holds(3, unordered_tower((block,6),puzzle_room_table), false, 31).

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 3, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 284 rules into program part ash_goal_state:

final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(3, complete_tower(blue,puzzle_room_table), false, false).
final_goal(3, complete_tower(blue,puzzle_room_table), true, true).
final_goal(3, complete_tower(red,puzzle_room_table), false, false).
final_goal(3, complete_tower(red,puzzle_room_table), true, true).
final_goal(3, in_tower((block,1),(block,1)), false, true).
final_goal(3, in_tower((block,1),(block,1)), true, false).
final_goal(3, in_tower((block,1),(block,2)), false, true).
final_goal(3, in_tower((block,1),(block,2)), true, false).
final_goal(3, in_tower((block,1),(block,3)), false, true).
final_goal(3, in_tower((block,1),(block,3)), true, false).
final_goal(3, in_tower((block,1),(block,4)), false, true).
final_goal(3, in_tower((block,1),(block,4)), true, false).
final_goal(3, in_tower((block,1),(block,5)), false, true).
final_goal(3, in_tower((block,1),(block,5)), true, false).
final_goal(3, in_tower((block,1),(block,6)), false, true).
final_goal(3, in_tower((block,1),(block,6)), true, false).
final_goal(3, in_tower((block,2),(block,1)), false, true).
final_goal(3, in_tower((block,2),(block,1)), true, false).
final_goal(3, in_tower((block,2),(block,2)), false, true).
final_goal(3, in_tower((block,2),(block,2)), true, false).
final_goal(3, in_tower((block,2),(block,3)), false, true).
final_goal(3, in_tower((block,2),(block,3)), true, false).
final_goal(3, in_tower((block,2),(block,4)), false, true).
final_goal(3, in_tower((block,2),(block,4)), true, false).
final_goal(3, in_tower((block,2),(block,5)), false, true).
final_goal(3, in_tower((block,2),(block,5)), true, false).
final_goal(3, in_tower((block,2),(block,6)), false, true).
final_goal(3, in_tower((block,2),(block,6)), true, false).
final_goal(3, in_tower((block,3),(block,1)), false, false).
final_goal(3, in_tower((block,3),(block,1)), true, true).
final_goal(3, in_tower((block,3),(block,2)), false, false).
final_goal(3, in_tower((block,3),(block,2)), true, true).
final_goal(3, in_tower((block,3),(block,3)), false, false).
final_goal(3, in_tower((block,3),(block,3)), true, true).
final_goal(3, in_tower((block,3),(block,4)), false, true).
final_goal(3, in_tower((block,3),(block,4)), true, false).
final_goal(3, in_tower((block,3),(block,5)), false, true).
final_goal(3, in_tower((block,3),(block,5)), true, false).
final_goal(3, in_tower((block,3),(block,6)), false, true).
final_goal(3, in_tower((block,3),(block,6)), true, false).
final_goal(3, in_tower((block,4),(block,1)), false, true).
final_goal(3, in_tower((block,4),(block,1)), true, false).
final_goal(3, in_tower((block,4),(block,2)), false, true).
final_goal(3, in_tower((block,4),(block,2)), true, false).
final_goal(3, in_tower((block,4),(block,3)), false, true).
final_goal(3, in_tower((block,4),(block,3)), true, false).
final_goal(3, in_tower((block,4),(block,4)), false, true).
final_goal(3, in_tower((block,4),(block,4)), true, false).
final_goal(3, in_tower((block,4),(block,5)), false, true).
final_goal(3, in_tower((block,4),(block,5)), true, false).
final_goal(3, in_tower((block,4),(block,6)), false, true).
final_goal(3, in_tower((block,4),(block,6)), true, false).
final_goal(3, in_tower((block,5),(block,1)), false, true).
final_goal(3, in_tower((block,5),(block,1)), true, false).
final_goal(3, in_tower((block,5),(block,2)), false, true).
final_goal(3, in_tower((block,5),(block,2)), true, false).
final_goal(3, in_tower((block,5),(block,3)), false, true).
final_goal(3, in_tower((block,5),(block,3)), true, false).
final_goal(3, in_tower((block,5),(block,4)), false, true).
final_goal(3, in_tower((block,5),(block,4)), true, false).
final_goal(3, in_tower((block,5),(block,5)), false, true).
final_goal(3, in_tower((block,5),(block,5)), true, false).
final_goal(3, in_tower((block,5),(block,6)), false, true).
final_goal(3, in_tower((block,5),(block,6)), true, false).
final_goal(3, in_tower((block,6),(block,1)), false, true).
final_goal(3, in_tower((block,6),(block,1)), true, false).
final_goal(3, in_tower((block,6),(block,2)), false, true).
final_goal(3, in_tower((block,6),(block,2)), true, false).
final_goal(3, in_tower((block,6),(block,3)), false, true).
final_goal(3, in_tower((block,6),(block,3)), true, false).
final_goal(3, in_tower((block,6),(block,4)), false, false).
final_goal(3, in_tower((block,6),(block,4)), true, true).
final_goal(3, in_tower((block,6),(block,5)), false, false).
final_goal(3, in_tower((block,6),(block,5)), true, true).
final_goal(3, in_tower((block,6),(block,6)), false, false).
final_goal(3, in_tower((block,6),(block,6)), true, true).
final_goal(3, on((block,1)), (block,2), true).
final_goal(3, on((block,1)), (block,3), false).
final_goal(3, on((block,1)), (block,4), false).
final_goal(3, on((block,1)), (block,5), false).
final_goal(3, on((block,1)), (block,6), false).
final_goal(3, on((block,1)), nothing, false).
final_goal(3, on((block,1)), puzzle_room_table, false).
final_goal(3, on((block,2)), (block,1), false).
final_goal(3, on((block,2)), (block,3), true).
final_goal(3, on((block,2)), (block,4), false).
final_goal(3, on((block,2)), (block,5), false).
final_goal(3, on((block,2)), (block,6), false).
final_goal(3, on((block,2)), nothing, false).
final_goal(3, on((block,2)), puzzle_room_table, false).
final_goal(3, on((block,3)), (block,1), false).
final_goal(3, on((block,3)), (block,2), false).
final_goal(3, on((block,3)), (block,4), false).
final_goal(3, on((block,3)), (block,5), false).
final_goal(3, on((block,3)), (block,6), false).
final_goal(3, on((block,3)), nothing, false).
final_goal(3, on((block,3)), puzzle_room_table, true).
final_goal(3, on((block,4)), (block,1), false).
final_goal(3, on((block,4)), (block,2), false).
final_goal(3, on((block,4)), (block,3), false).
final_goal(3, on((block,4)), (block,5), true).
final_goal(3, on((block,4)), (block,6), false).
final_goal(3, on((block,4)), nothing, false).
final_goal(3, on((block,4)), puzzle_room_table, false).
final_goal(3, on((block,5)), (block,1), false).
final_goal(3, on((block,5)), (block,2), false).
final_goal(3, on((block,5)), (block,3), false).
final_goal(3, on((block,5)), (block,4), false).
final_goal(3, on((block,5)), (block,6), true).
final_goal(3, on((block,5)), nothing, false).
final_goal(3, on((block,5)), puzzle_room_table, false).
final_goal(3, on((block,6)), (block,1), false).
final_goal(3, on((block,6)), (block,2), false).
final_goal(3, on((block,6)), (block,3), false).
final_goal(3, on((block,6)), (block,4), false).
final_goal(3, on((block,6)), (block,5), false).
final_goal(3, on((block,6)), nothing, false).
final_goal(3, on((block,6)), puzzle_room_table, true).
final_goal(3, tower_base((block,1),puzzle_room_table), false, true).
final_goal(3, tower_base((block,1),puzzle_room_table), true, false).
final_goal(3, tower_base((block,2),puzzle_room_table), false, true).
final_goal(3, tower_base((block,2),puzzle_room_table), true, false).
final_goal(3, tower_base((block,3),puzzle_room_table), false, false).
final_goal(3, tower_base((block,3),puzzle_room_table), true, true).
final_goal(3, tower_base((block,4),puzzle_room_table), false, true).
final_goal(3, tower_base((block,4),puzzle_room_table), true, false).
final_goal(3, tower_base((block,5),puzzle_room_table), false, true).
final_goal(3, tower_base((block,5),puzzle_room_table), true, false).
final_goal(3, tower_base((block,6),puzzle_room_table), false, false).
final_goal(3, tower_base((block,6),puzzle_room_table), true, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(3, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(3, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=40']

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 11})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 12})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 13})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 14})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 15})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 16})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 17})
SubGoal({'L': 3, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 18})
SubGoal({'L': 3, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 19})
SubGoal({'L': 3, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 20})

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 10 rules into program part base:

sub_goal(3, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 11).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 12).
sub_goal(3, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 13).
sub_goal(3, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 14).
sub_goal(3, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 15).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 16).
sub_goal(3, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 17).
sub_goal(3, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 18).
sub_goal(3, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 19).
sub_goal(3, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 20).

[22-02-2022_03-43-58] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=40']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EEA6BD5670>]
	incrementor = SolveIncrementor(step_start=31, step_increase=1, step_increase_initial=10, step_end_min=41, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 31), range_=None), IncPart(name='plan_module', args=('#inc', 31, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 31, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 31, 11, 20, 'sequential', 'false'), range_=None)]

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 800 rules

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00468520000049466s

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(2, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-43-58] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(2), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.108743s.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.020242s with result Satisfiable.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF169E7220>

[22-02-2022_03-43-59] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 2)
	('start_step', 31)
	('last_sgoals', 20)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 11)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF169E7220>)

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 31). %* None *%
#program plan_module(#inc, 31, false, true). %* None *%
#program optimisation_module(#inc, 31, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 31, 11, 20, sequential, false). %* None *%

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =     30 : Current =     40
Incrementor step ends | Minimum  =     41 : Maximum =    300

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(40)]), ('state_module', [Number(31), Number(31)]), ('plan_module', [Number(31), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(31), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(31)]), ('action_preconditions', [Number(31)]), ('variable_relations', [Number(31)]), ('abstraction_mappings', [Number(31)]), ('conformance_module', [Number(31), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(32), Number(31)]), ('plan_module', [Number(32), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(32), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(32)]), ('action_preconditions', [Number(32)]), ('variable_relations', [Number(32)]), ('abstraction_mappings', [Number(32)]), ('conformance_module', [Number(32), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(33), Number(31)]), ('plan_module', [Number(33), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(33), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(33)]), ('action_preconditions', [Number(33)]), ('variable_relations', [Number(33)]), ('abstraction_mappings', [Number(33)]), ('conformance_module', [Number(33), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(34), Number(31)]), ('plan_module', [Number(34), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(34), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(34)]), ('action_preconditions', [Number(34)]), ('variable_relations', [Number(34)]), ('abstraction_mappings', [Number(34)]), ('conformance_module', [Number(34), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(35), Number(31)]), ('plan_module', [Number(35), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(35), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(35)]), ('action_preconditions', [Number(35)]), ('variable_relations', [Number(35)]), ('abstraction_mappings', [Number(35)]), ('conformance_module', [Number(35), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(36), Number(31)]), ('plan_module', [Number(36), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(36), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(36)]), ('action_preconditions', [Number(36)]), ('variable_relations', [Number(36)]), ('abstraction_mappings', [Number(36)]), ('conformance_module', [Number(36), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(37), Number(31)]), ('plan_module', [Number(37), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(37), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(37)]), ('action_preconditions', [Number(37)]), ('variable_relations', [Number(37)]), ('abstraction_mappings', [Number(37)]), ('conformance_module', [Number(37), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(38), Number(31)]), ('plan_module', [Number(38), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(38), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(38)]), ('action_preconditions', [Number(38)]), ('variable_relations', [Number(38)]), ('abstraction_mappings', [Number(38)]), ('conformance_module', [Number(38), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(39), Number(31)]), ('plan_module', [Number(39), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(39), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(39)]), ('action_preconditions', [Number(39)]), ('variable_relations', [Number(39)]), ('abstraction_mappings', [Number(39)]), ('conformance_module', [Number(39), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(40), Number(31)]), ('plan_module', [Number(40), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(40), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(40)]), ('action_preconditions', [Number(40)]), ('variable_relations', [Number(40)]), ('abstraction_mappings', [Number(40)]), ('conformance_module', [Number(40), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.349626s.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.139034s with result Satisfiable.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.488660400000299, Incremental time limit = None
Running cumulative time = 0.488660400000299, Cumulative time limit = 1800
Used memory = (RSS = 2341.519531Mb, VMS = 2364.875000Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.349626s, Solving = 0.139034s, Total = 0.488660s, Memory = (RSS = 2341.519531Mb, VMS = 2364.875000Mb), Step range = [31-40]), Calls = 1
Final Model :: Total atoms = 20211, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =     40 : Current =     41
Incrementor step ends | Minimum  =     41 : Maximum =    300

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(41)]), ('state_module', [Number(41), Number(31)]), ('plan_module', [Number(41), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(41), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(41)]), ('action_preconditions', [Number(41)]), ('variable_relations', [Number(41)]), ('abstraction_mappings', [Number(41)]), ('conformance_module', [Number(41), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.080992s.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015465s with result Unsatisfiable.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.0964574999998149, Incremental time limit = None
Running cumulative time = 0.5851179000001139, Cumulative time limit = 1800
Used memory = (RSS = 2341.761719Mb, VMS = 2365.035156Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =     41 : Current =     42
Incrementor step ends | Minimum  =     41 : Maximum =    300

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(42)]), ('state_module', [Number(42), Number(31)]), ('plan_module', [Number(42), Number(31), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(42), Number(31), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(42)]), ('action_preconditions', [Number(42)]), ('variable_relations', [Number(42)]), ('abstraction_mappings', [Number(42)]), ('conformance_module', [Number(42), Number(31), Number(11), Number(20), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.085045s.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.036453s with result Satisfiable.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.12149749999935011, Incremental time limit = None
Running cumulative time = 0.706615399999464, Cumulative time limit = 1800
Used memory = (RSS = 2344.968750Mb, VMS = 2368.457031Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.515664s, Solving = 0.190952s, Total = 0.706615s, Memory = (RSS = 2344.968750Mb, VMS = 2368.457031Mb), Step range = [31-42]), Calls = 3
Final Model :: Total atoms = 21286, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.349626s, Solving = 0.139034s, Total = 0.488660s, Memory = (RSS = 2341.519531Mb, VMS = 2364.875000Mb), Step range = [31-40]
2 : Statistics :: Grounding = 0.080992s, Solving = 0.015465s, Total = 0.096457s, Memory = (RSS = 2341.761719Mb, VMS = 2365.035156Mb), Step range = [41-41]
3 : Statistics :: Grounding = 0.085045s, Solving = 0.036453s, Total = 0.121497s, Memory = (RSS = 2344.968750Mb, VMS = 2368.457031Mb), Step range = [42-42]

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.706615s due to: Stop condition reached.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-43-59] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 20, Last requested goal index = 20, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.515664s, Solving = 0.190952s, Total = 0.706615s, Memory = (RSS = 2344.968750Mb, VMS = 2368.457031Mb), Step range = [31-42]), Calls = 3
Model :: Total atoms = 21286, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 2                 
          ========================================          
                 Steps = 11 :: Actions = 11                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,puzzle_room_door)
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,puzzle_room_door_handle_outer)
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,store_room_door_handle_outer)
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : actuate(manipulator_arm_2,store_room_door)
Step 8:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_arm_2,store_room_door_handle_outer)
Step 9:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 10:
    Current Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 1] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 11:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 12:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 13:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,6))
Step 14:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 15:
    Current Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 2] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,5))
Step 16:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_arm_1,retracted)
Step 17:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 18:
    Current Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 4] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 19:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 20:
    Current Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 5] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_2,(block,6),puzzle_room_table)
Step 21:
    Current Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 6] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_arm_2,(block,6))
Step 22:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 23:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 24:
    Current Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 7] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move(store_room)
Step 25:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 26:
    Current Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 8] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_arm_2,(block,4))
Step 27:
    Current Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,retracted)
Step 28:
    Current Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move(hallway)
Step 29:
    Current Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 9] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move(puzzle_room)
Step 30:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_1,extended)
Step 31:
    Current Sub-goals:
        [Index = 10] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 10] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_arm_1,(block,5),(block,6))
Step 32:
    Current Sub-goals:
        [Index = 11] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 11] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,5))
Step 33:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_arm_2,extended)
Step 34:
    Current Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 12] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,3))
Step 35:
    Current Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 13] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_arm_1,(block,3),puzzle_room_table)
Step 36:
    Current Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 14] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,3))
Step 37:
    Current Sub-goals:
        [Index = 15] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_arm_2,(block,4),(block,5))
Step 38:
    Current Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 16] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,2))
Step 39:
    Current Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 17] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_arm_1,(block,2),(block,3))
Step 40:
    Current Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 18] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_arm_1,(block,2))
Step 41:
    Current Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 19] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_arm_1,(block,1))
Step 42:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_arm_1,(block,1),(block,2))

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=31, total_plan_length=42, step_range=range(31, 43)

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 125, Total actions = 125, Produced sub-goal stages = 0

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Dividing abstract plan:
Lvl = 2 (par-ref), LE =  11, AC =  11, CF = 1.0, GT =   3.13s, ST =   3.08s, OT = 0.00s, TT =   6.21s, EF = (LE = 1.1, AC = 1.1), ED = (LE = 0.3, AC = 0.3), EB = (LE = 0.3, AC = 0.3)

[22-02-2022_03-44-00] DEBUG :: core.Strategies >> Making homogenous divisions: partial_problems=6, plan_length=11, start_step=31, blend=Blend(left=0, right=0)

[22-02-2022_03-44-00] DEBUG :: core.Strategies >> Decided: number_small_problems=1, number_large_problems=5, small_group_size=1, large_group_size=2

[22-02-2022_03-44-00] DEBUG :: core.Strategies >> Division points generated:
[DivisionPoint(index=32, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=34, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=36, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=38, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1), DivisionPoint(index=40, blend=Blend(left=0, right=0), inherited=False, reactive=None, interrupting=False, preemptive=0, committed_index=-1, committed_step=-1)]

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Division scenario generated:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Monolevel problem 2 at level 2 solved.

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 7 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [32-32]

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [32-32], problem number = 7, increment number = 7

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 32)
	('last_sgoals', 32)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [32-32] : Concurrency disabled : Minimum search length bound disabled with value 125

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 32
last_sgoals = 32
start_step = 125
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = False
search_length_bound = 125

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-44-00] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-44-00] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 125 as problem start state.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,5))', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 125})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 125})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 125})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 125})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,5)', 'S': 125})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 125})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 125})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 125})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 125})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 125})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 125})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 125})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 125})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 125})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 125})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 125})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 125})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,5)', 'S': 125})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 125})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 125})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 125})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 125})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 125})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 125})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 125})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 125})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 125})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 125})

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 125).
holds(1, complete_tower(red,puzzle_room_table), false, 125).
holds(1, configuration(manipulator_end_1), aligned_with((block,5)), 125).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 125).
holds(1, configuration(manipulator_limb_1), extended, 125).
holds(1, configuration(manipulator_limb_2), retracted, 125).
holds(1, configuration(puzzle_room_door), open, 125).
holds(1, configuration(starting_room_door), closed, 125).
holds(1, configuration(store_room_door), open, 125).
holds(1, grasping(manipulator_arm_1), (block,5), 125).
holds(1, grasping(manipulator_arm_2), (block,4), 125).
holds(1, grasping(manipulator_end_1), (block,5), 125).
holds(1, grasping(manipulator_end_2), (block,4), 125).
holds(1, in((block,1)), (puzzle_room,5,0), 125).
holds(1, in((block,2)), (puzzle_room,5,0), 125).
holds(1, in((block,3)), (puzzle_room,5,0), 125).
holds(1, in((block,4)), (puzzle_room,5,0), 125).
holds(1, in((block,5)), (puzzle_room,5,0), 125).
holds(1, in((block,6)), (puzzle_room,5,0), 125).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 125).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 125).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 125).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 125).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 125).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 125).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 125).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 125).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 125).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 125).
holds(1, in(talos), (puzzle_room,5,0), 125).
holds(1, in_tower((block,1),(block,1)), true, 125).
holds(1, in_tower((block,1),(block,2)), false, 125).
holds(1, in_tower((block,1),(block,3)), true, 125).
holds(1, in_tower((block,1),(block,4)), false, 125).
holds(1, in_tower((block,1),(block,5)), false, 125).
holds(1, in_tower((block,1),(block,6)), false, 125).
holds(1, in_tower((block,2),(block,1)), false, 125).
holds(1, in_tower((block,2),(block,2)), true, 125).
holds(1, in_tower((block,2),(block,3)), false, 125).
holds(1, in_tower((block,2),(block,4)), false, 125).
holds(1, in_tower((block,2),(block,5)), false, 125).
holds(1, in_tower((block,2),(block,6)), false, 125).
holds(1, in_tower((block,3),(block,1)), false, 125).
holds(1, in_tower((block,3),(block,2)), false, 125).
holds(1, in_tower((block,3),(block,3)), false, 125).
holds(1, in_tower((block,3),(block,4)), false, 125).
holds(1, in_tower((block,3),(block,5)), false, 125).
holds(1, in_tower((block,3),(block,6)), false, 125).
holds(1, in_tower((block,4),(block,1)), false, 125).
holds(1, in_tower((block,4),(block,2)), false, 125).
holds(1, in_tower((block,4),(block,3)), false, 125).
holds(1, in_tower((block,4),(block,4)), false, 125).
holds(1, in_tower((block,4),(block,5)), false, 125).
holds(1, in_tower((block,4),(block,6)), false, 125).
holds(1, in_tower((block,5),(block,1)), false, 125).
holds(1, in_tower((block,5),(block,2)), false, 125).
holds(1, in_tower((block,5),(block,3)), false, 125).
holds(1, in_tower((block,5),(block,4)), false, 125).
holds(1, in_tower((block,5),(block,5)), false, 125).
holds(1, in_tower((block,5),(block,6)), false, 125).
holds(1, in_tower((block,6),(block,1)), false, 125).
holds(1, in_tower((block,6),(block,2)), false, 125).
holds(1, in_tower((block,6),(block,3)), false, 125).
holds(1, in_tower((block,6),(block,4)), false, 125).
holds(1, in_tower((block,6),(block,5)), true, 125).
holds(1, in_tower((block,6),(block,6)), true, 125).
holds(1, on((block,1)), puzzle_room_table_left, 125).
holds(1, on((block,2)), puzzle_room_table_right, 125).
holds(1, on((block,3)), (block,1), 125).
holds(1, on((block,4)), nothing, 125).
holds(1, on((block,5)), (block,6), 125).
holds(1, on((block,6)), puzzle_room_table_middle, 125).
holds(1, tower_base((block,1),puzzle_room_table), true, 125).
holds(1, tower_base((block,2),puzzle_room_table), true, 125).
holds(1, tower_base((block,3),puzzle_room_table), false, 125).
holds(1, tower_base((block,4),puzzle_room_table), false, 125).
holds(1, tower_base((block,5),puzzle_room_table), false, 125).
holds(1, tower_base((block,6),puzzle_room_table), true, 125).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 125).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 125).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 125).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 125).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 125).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 125).
holds(2, complete_tower(blue,puzzle_room_table), false, 125).
holds(2, complete_tower(red,puzzle_room_table), false, 125).
holds(2, configuration(manipulator_arm_1), extended, 125).
holds(2, configuration(manipulator_arm_2), retracted, 125).
holds(2, configuration(puzzle_room_door), open, 125).
holds(2, configuration(starting_room_door), closed, 125).
holds(2, configuration(store_room_door), open, 125).
holds(2, grasping(manipulator_arm_1), (block,5), 125).
holds(2, grasping(manipulator_arm_2), (block,4), 125).
holds(2, in((block,1)), puzzle_room, 125).
holds(2, in((block,2)), puzzle_room, 125).
holds(2, in((block,3)), puzzle_room, 125).
holds(2, in((block,4)), puzzle_room, 125).
holds(2, in((block,5)), puzzle_room, 125).
holds(2, in((block,6)), puzzle_room, 125).
holds(2, in(manipulator_arm_1), puzzle_room, 125).
holds(2, in(manipulator_arm_2), puzzle_room, 125).
holds(2, in(puzzle_room_table), puzzle_room, 125).
holds(2, in(talos), puzzle_room, 125).
holds(2, in_tower((block,1),(block,1)), true, 125).
holds(2, in_tower((block,1),(block,2)), false, 125).
holds(2, in_tower((block,1),(block,3)), true, 125).
holds(2, in_tower((block,1),(block,4)), false, 125).
holds(2, in_tower((block,1),(block,5)), false, 125).
holds(2, in_tower((block,1),(block,6)), false, 125).
holds(2, in_tower((block,2),(block,1)), false, 125).
holds(2, in_tower((block,2),(block,2)), true, 125).
holds(2, in_tower((block,2),(block,3)), false, 125).
holds(2, in_tower((block,2),(block,4)), false, 125).
holds(2, in_tower((block,2),(block,5)), false, 125).
holds(2, in_tower((block,2),(block,6)), false, 125).
holds(2, in_tower((block,3),(block,1)), false, 125).
holds(2, in_tower((block,3),(block,2)), false, 125).
holds(2, in_tower((block,3),(block,3)), false, 125).
holds(2, in_tower((block,3),(block,4)), false, 125).
holds(2, in_tower((block,3),(block,5)), false, 125).
holds(2, in_tower((block,3),(block,6)), false, 125).
holds(2, in_tower((block,4),(block,1)), false, 125).
holds(2, in_tower((block,4),(block,2)), false, 125).
holds(2, in_tower((block,4),(block,3)), false, 125).
holds(2, in_tower((block,4),(block,4)), false, 125).
holds(2, in_tower((block,4),(block,5)), false, 125).
holds(2, in_tower((block,4),(block,6)), false, 125).
holds(2, in_tower((block,5),(block,1)), false, 125).
holds(2, in_tower((block,5),(block,2)), false, 125).
holds(2, in_tower((block,5),(block,3)), false, 125).
holds(2, in_tower((block,5),(block,4)), false, 125).
holds(2, in_tower((block,5),(block,5)), false, 125).
holds(2, in_tower((block,5),(block,6)), false, 125).
holds(2, in_tower((block,6),(block,1)), false, 125).
holds(2, in_tower((block,6),(block,2)), false, 125).
holds(2, in_tower((block,6),(block,3)), false, 125).
holds(2, in_tower((block,6),(block,4)), false, 125).
holds(2, in_tower((block,6),(block,5)), true, 125).
holds(2, in_tower((block,6),(block,6)), true, 125).
holds(2, on((block,1)), puzzle_room_table, 125).
holds(2, on((block,2)), puzzle_room_table, 125).
holds(2, on((block,3)), (block,1), 125).
holds(2, on((block,4)), nothing, 125).
holds(2, on((block,5)), (block,6), 125).
holds(2, on((block,6)), puzzle_room_table, 125).
holds(2, tower_base((block,1),puzzle_room_table), true, 125).
holds(2, tower_base((block,2),puzzle_room_table), true, 125).
holds(2, tower_base((block,3),puzzle_room_table), false, 125).
holds(2, tower_base((block,4),puzzle_room_table), false, 125).
holds(2, tower_base((block,5),puzzle_room_table), false, 125).
holds(2, tower_base((block,6),puzzle_room_table), true, 125).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 125).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 125).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 125).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 125).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 125).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 125).

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,5))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 32})

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 1 rules into program part base:

sub_goal(2, talos, release(manipulator_arm_1,(block,5)), grasping(manipulator_arm_1), nothing, 32).

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EEA6BD5DC0>]
	incrementor = SolveIncrementor(step_start=125, step_increase=1, step_increase_initial=2, step_end_min=126, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 125), range_=None), IncPart(name='plan_module', args=('#inc', 125, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 125, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 125, 32, 32, 'sequential', 'false'), range_=None)]

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 819 rules

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004749000000629167s

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122857s.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023141s with result Satisfiable.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF1726C9A0>

[22-02-2022_03-44-00] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 125)
	('last_sgoals', 32)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 32)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF1726C9A0>)

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 125). %* None *%
#program plan_module(#inc, 125, false, false). %* None *%
#program optimisation_module(#inc, 125, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 125, 32, 32, sequential, false). %* None *%

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    124 : Current =    126
Incrementor step ends | Minimum  =    126 : Maximum =    300

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(126)]), ('state_module', [Number(125), Number(125)]), ('plan_module', [Number(125), Number(125), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(125), Number(125), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(125)]), ('action_preconditions', [Number(125)]), ('variable_relations', [Number(125)]), ('abstraction_mappings', [Number(125)]), ('conformance_module', [Number(125), Number(125), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(126), Number(125)]), ('plan_module', [Number(126), Number(125), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(126), Number(125), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(126)]), ('action_preconditions', [Number(126)]), ('variable_relations', [Number(126)]), ('abstraction_mappings', [Number(126)]), ('conformance_module', [Number(126), Number(125), Number(32), Number(32), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.342476s.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.053030s with result Satisfiable.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3955058999999892, Incremental time limit = None
Running cumulative time = 0.3955058999999892, Cumulative time limit = 1800
Used memory = (RSS = 2338.191406Mb, VMS = 2361.484375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.342476s, Solving = 0.053030s, Total = 0.395506s, Memory = (RSS = 2338.191406Mb, VMS = 2361.484375Mb), Step range = [125-126]), Calls = 1
Final Model :: Total atoms = 20612, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.342476s, Solving = 0.053030s, Total = 0.395506s, Memory = (RSS = 2338.191406Mb, VMS = 2361.484375Mb), Step range = [125-126]

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.395506s due to: Stop condition reached.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-00] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 32, Last requested goal index = 32, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.342476s, Solving = 0.053030s, Total = 0.395506s, Memory = (RSS = 2338.191406Mb, VMS = 2361.484375Mb), Step range = [125-126]), Calls = 1
Model :: Total atoms = 20612, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 1 :: Actions = 1                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 126:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Monolevel problem 7 at level 1 solved.

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Online planning increment 7 finished.

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 7 : Total constraining sub-goal stages = 42 : Goals achieved = 32 : Goals unachieved = 10 : Complete = False

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 8 by method ground-first is [1-1].

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 8 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [33-34]

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [33-34], problem number = 8, increment number = 8

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 33)
	('last_sgoals', 34)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [33-34] : Concurrency disabled : Minimum search length bound enabled with value 127

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 33
last_sgoals = 34
start_step = 126
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 127

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-44-01] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-44-01] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 126 as problem start state.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'retracted', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 126})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 126})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 126})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 126})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 126})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 126})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 126})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 126})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 126})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 126})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 126})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 126})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 126})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'retracted', 'S': 126})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 126})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 126})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 126})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 126})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 126})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 126})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 126})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 126})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 126})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 126})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 126})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 126})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 126})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 126})

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 126).
holds(1, complete_tower(red,puzzle_room_table), false, 126).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 126).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 126).
holds(1, configuration(manipulator_limb_1), extended, 126).
holds(1, configuration(manipulator_limb_2), retracted, 126).
holds(1, configuration(puzzle_room_door), open, 126).
holds(1, configuration(starting_room_door), closed, 126).
holds(1, configuration(store_room_door), open, 126).
holds(1, grasping(manipulator_arm_1), nothing, 126).
holds(1, grasping(manipulator_arm_2), (block,4), 126).
holds(1, grasping(manipulator_end_1), nothing, 126).
holds(1, grasping(manipulator_end_2), (block,4), 126).
holds(1, in((block,1)), (puzzle_room,5,0), 126).
holds(1, in((block,2)), (puzzle_room,5,0), 126).
holds(1, in((block,3)), (puzzle_room,5,0), 126).
holds(1, in((block,4)), (puzzle_room,5,0), 126).
holds(1, in((block,5)), (puzzle_room,5,0), 126).
holds(1, in((block,6)), (puzzle_room,5,0), 126).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 126).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 126).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 126).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 126).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 126).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 126).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 126).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 126).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 126).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 126).
holds(1, in(talos), (puzzle_room,5,0), 126).
holds(1, in_tower((block,1),(block,1)), true, 126).
holds(1, in_tower((block,1),(block,2)), false, 126).
holds(1, in_tower((block,1),(block,3)), true, 126).
holds(1, in_tower((block,1),(block,4)), false, 126).
holds(1, in_tower((block,1),(block,5)), false, 126).
holds(1, in_tower((block,1),(block,6)), false, 126).
holds(1, in_tower((block,2),(block,1)), false, 126).
holds(1, in_tower((block,2),(block,2)), true, 126).
holds(1, in_tower((block,2),(block,3)), false, 126).
holds(1, in_tower((block,2),(block,4)), false, 126).
holds(1, in_tower((block,2),(block,5)), false, 126).
holds(1, in_tower((block,2),(block,6)), false, 126).
holds(1, in_tower((block,3),(block,1)), false, 126).
holds(1, in_tower((block,3),(block,2)), false, 126).
holds(1, in_tower((block,3),(block,3)), false, 126).
holds(1, in_tower((block,3),(block,4)), false, 126).
holds(1, in_tower((block,3),(block,5)), false, 126).
holds(1, in_tower((block,3),(block,6)), false, 126).
holds(1, in_tower((block,4),(block,1)), false, 126).
holds(1, in_tower((block,4),(block,2)), false, 126).
holds(1, in_tower((block,4),(block,3)), false, 126).
holds(1, in_tower((block,4),(block,4)), false, 126).
holds(1, in_tower((block,4),(block,5)), false, 126).
holds(1, in_tower((block,4),(block,6)), false, 126).
holds(1, in_tower((block,5),(block,1)), false, 126).
holds(1, in_tower((block,5),(block,2)), false, 126).
holds(1, in_tower((block,5),(block,3)), false, 126).
holds(1, in_tower((block,5),(block,4)), false, 126).
holds(1, in_tower((block,5),(block,5)), false, 126).
holds(1, in_tower((block,5),(block,6)), false, 126).
holds(1, in_tower((block,6),(block,1)), false, 126).
holds(1, in_tower((block,6),(block,2)), false, 126).
holds(1, in_tower((block,6),(block,3)), false, 126).
holds(1, in_tower((block,6),(block,4)), false, 126).
holds(1, in_tower((block,6),(block,5)), true, 126).
holds(1, in_tower((block,6),(block,6)), true, 126).
holds(1, on((block,1)), puzzle_room_table_left, 126).
holds(1, on((block,2)), puzzle_room_table_right, 126).
holds(1, on((block,3)), (block,1), 126).
holds(1, on((block,4)), nothing, 126).
holds(1, on((block,5)), (block,6), 126).
holds(1, on((block,6)), puzzle_room_table_middle, 126).
holds(1, tower_base((block,1),puzzle_room_table), true, 126).
holds(1, tower_base((block,2),puzzle_room_table), true, 126).
holds(1, tower_base((block,3),puzzle_room_table), false, 126).
holds(1, tower_base((block,4),puzzle_room_table), false, 126).
holds(1, tower_base((block,5),puzzle_room_table), false, 126).
holds(1, tower_base((block,6),puzzle_room_table), true, 126).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 126).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 126).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 126).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 126).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 126).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 126).
holds(2, complete_tower(blue,puzzle_room_table), false, 126).
holds(2, complete_tower(red,puzzle_room_table), false, 126).
holds(2, configuration(manipulator_arm_1), extended, 126).
holds(2, configuration(manipulator_arm_2), retracted, 126).
holds(2, configuration(puzzle_room_door), open, 126).
holds(2, configuration(starting_room_door), closed, 126).
holds(2, configuration(store_room_door), open, 126).
holds(2, grasping(manipulator_arm_1), nothing, 126).
holds(2, grasping(manipulator_arm_2), (block,4), 126).
holds(2, in((block,1)), puzzle_room, 126).
holds(2, in((block,2)), puzzle_room, 126).
holds(2, in((block,3)), puzzle_room, 126).
holds(2, in((block,4)), puzzle_room, 126).
holds(2, in((block,5)), puzzle_room, 126).
holds(2, in((block,6)), puzzle_room, 126).
holds(2, in(manipulator_arm_1), puzzle_room, 126).
holds(2, in(manipulator_arm_2), puzzle_room, 126).
holds(2, in(puzzle_room_table), puzzle_room, 126).
holds(2, in(talos), puzzle_room, 126).
holds(2, in_tower((block,1),(block,1)), true, 126).
holds(2, in_tower((block,1),(block,2)), false, 126).
holds(2, in_tower((block,1),(block,3)), true, 126).
holds(2, in_tower((block,1),(block,4)), false, 126).
holds(2, in_tower((block,1),(block,5)), false, 126).
holds(2, in_tower((block,1),(block,6)), false, 126).
holds(2, in_tower((block,2),(block,1)), false, 126).
holds(2, in_tower((block,2),(block,2)), true, 126).
holds(2, in_tower((block,2),(block,3)), false, 126).
holds(2, in_tower((block,2),(block,4)), false, 126).
holds(2, in_tower((block,2),(block,5)), false, 126).
holds(2, in_tower((block,2),(block,6)), false, 126).
holds(2, in_tower((block,3),(block,1)), false, 126).
holds(2, in_tower((block,3),(block,2)), false, 126).
holds(2, in_tower((block,3),(block,3)), false, 126).
holds(2, in_tower((block,3),(block,4)), false, 126).
holds(2, in_tower((block,3),(block,5)), false, 126).
holds(2, in_tower((block,3),(block,6)), false, 126).
holds(2, in_tower((block,4),(block,1)), false, 126).
holds(2, in_tower((block,4),(block,2)), false, 126).
holds(2, in_tower((block,4),(block,3)), false, 126).
holds(2, in_tower((block,4),(block,4)), false, 126).
holds(2, in_tower((block,4),(block,5)), false, 126).
holds(2, in_tower((block,4),(block,6)), false, 126).
holds(2, in_tower((block,5),(block,1)), false, 126).
holds(2, in_tower((block,5),(block,2)), false, 126).
holds(2, in_tower((block,5),(block,3)), false, 126).
holds(2, in_tower((block,5),(block,4)), false, 126).
holds(2, in_tower((block,5),(block,5)), false, 126).
holds(2, in_tower((block,5),(block,6)), false, 126).
holds(2, in_tower((block,6),(block,1)), false, 126).
holds(2, in_tower((block,6),(block,2)), false, 126).
holds(2, in_tower((block,6),(block,3)), false, 126).
holds(2, in_tower((block,6),(block,4)), false, 126).
holds(2, in_tower((block,6),(block,5)), true, 126).
holds(2, in_tower((block,6),(block,6)), true, 126).
holds(2, on((block,1)), puzzle_room_table, 126).
holds(2, on((block,2)), puzzle_room_table, 126).
holds(2, on((block,3)), (block,1), 126).
holds(2, on((block,4)), nothing, 126).
holds(2, on((block,5)), (block,6), 126).
holds(2, on((block,6)), puzzle_room_table, 126).
holds(2, tower_base((block,1),puzzle_room_table), true, 126).
holds(2, tower_base((block,2),puzzle_room_table), true, 126).
holds(2, tower_base((block,3),puzzle_room_table), false, 126).
holds(2, tower_base((block,4),puzzle_room_table), false, 126).
holds(2, tower_base((block,5),puzzle_room_table), false, 126).
holds(2, tower_base((block,6),puzzle_room_table), true, 126).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 126).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 126).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 126).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 126).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 126).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 126).

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=127']

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'configure(manipulator_arm_2,extended)', 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'I': 33})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'I': 34})

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, configure(manipulator_arm_2,extended), configuration(manipulator_arm_2), extended, 33).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), (block,3), 34).

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=127']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF137513A0>]
	incrementor = SolveIncrementor(step_start=126, step_increase=1, step_increase_initial=2, step_end_min=128, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 126), range_=None), IncPart(name='plan_module', args=('#inc', 126, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 126, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 126, 33, 34, 'sequential', 'false'), range_=None)]

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 820 rules

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004700600000433042s

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.120415s.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022420s with result Satisfiable.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF1776F1D0>

[22-02-2022_03-44-01] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 126)
	('last_sgoals', 34)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 33)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF1776F1D0>)

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 126). %* None *%
#program plan_module(#inc, 126, false, false). %* None *%
#program optimisation_module(#inc, 126, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 126, 33, 34, sequential, false). %* None *%

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    125 : Current =    127
Incrementor step ends | Minimum  =    128 : Maximum =    300

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(127)]), ('state_module', [Number(126), Number(126)]), ('plan_module', [Number(126), Number(126), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(126), Number(126), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(126)]), ('action_preconditions', [Number(126)]), ('variable_relations', [Number(126)]), ('abstraction_mappings', [Number(126)]), ('conformance_module', [Number(126), Number(126), Number(33), Number(34), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(127), Number(126)]), ('plan_module', [Number(127), Number(126), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(127), Number(126), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(127)]), ('action_preconditions', [Number(127)]), ('variable_relations', [Number(127)]), ('abstraction_mappings', [Number(127)]), ('conformance_module', [Number(127), Number(126), Number(33), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.342457s.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052711s with result Satisfiable.

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39516769999863754, Incremental time limit = None
Running cumulative time = 0.39516769999863754, Cumulative time limit = 1800
Used memory = (RSS = 2338.207031Mb, VMS = 2361.484375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.342457s, Solving = 0.052711s, Total = 0.395168s, Memory = (RSS = 2338.207031Mb, VMS = 2361.484375Mb), Step range = [126-127]), Calls = 1
Final Model :: Total atoms = 20617, Cost = (), Optimality proven = False, Number = 1, Thread ID = 3, Model type = ModelType.StableModel

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    127 : Current =    128
Incrementor step ends | Minimum  =    128 : Maximum =    300

[22-02-2022_03-44-01] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(128)]), ('state_module', [Number(128), Number(126)]), ('plan_module', [Number(128), Number(126), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(128), Number(126), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(128)]), ('action_preconditions', [Number(128)]), ('variable_relations', [Number(128)]), ('abstraction_mappings', [Number(128)]), ('conformance_module', [Number(128), Number(126), Number(33), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165308s.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011741s with result Unsatisfiable.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1770485999995799, Incremental time limit = None
Running cumulative time = 0.5722162999982174, Cumulative time limit = 1800
Used memory = (RSS = 2338.242188Mb, VMS = 2361.484375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    128 : Current =    129
Incrementor step ends | Minimum  =    128 : Maximum =    300

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(129)]), ('state_module', [Number(129), Number(126)]), ('plan_module', [Number(129), Number(126), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(129), Number(126), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(129)]), ('action_preconditions', [Number(129)]), ('variable_relations', [Number(129)]), ('abstraction_mappings', [Number(129)]), ('conformance_module', [Number(129), Number(126), Number(33), Number(34), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.167347s.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044287s with result Satisfiable.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.21163389999946958, Incremental time limit = None
Running cumulative time = 0.783850199997687, Cumulative time limit = 1800
Used memory = (RSS = 2342.648438Mb, VMS = 2365.992188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675112s, Solving = 0.108738s, Total = 0.783850s, Memory = (RSS = 2342.648438Mb, VMS = 2365.992188Mb), Step range = [126-129]), Calls = 3
Final Model :: Total atoms = 21408, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.342457s, Solving = 0.052711s, Total = 0.395168s, Memory = (RSS = 2338.207031Mb, VMS = 2361.484375Mb), Step range = [126-127]
2 : Statistics :: Grounding = 0.165308s, Solving = 0.011741s, Total = 0.177049s, Memory = (RSS = 2338.242188Mb, VMS = 2361.484375Mb), Step range = [128-128]
3 : Statistics :: Grounding = 0.167347s, Solving = 0.044287s, Total = 0.211634s, Memory = (RSS = 2342.648438Mb, VMS = 2365.992188Mb), Step range = [129-129]

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.783850s due to: Stop condition reached.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 34, Last requested goal index = 34, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.675112s, Solving = 0.108738s, Total = 0.783850s, Memory = (RSS = 2342.648438Mb, VMS = 2365.992188Mb), Step range = [126-129]), Calls = 3
Model :: Total atoms = 21408, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 126:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 127:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 128:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 129:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Monolevel problem 8 at level 1 solved.

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Online planning increment 8 finished.

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 8 : Total constraining sub-goal stages = 42 : Goals achieved = 34 : Goals unachieved = 8 : Complete = False

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 9 by method ground-first is [1-1].

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 9 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [35-36]

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [35-36], problem number = 9, increment number = 9

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 35)
	('last_sgoals', 36)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [35-36] : Concurrency disabled : Minimum search length bound enabled with value 130

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 35
last_sgoals = 36
start_step = 129
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 130

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-44-02] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-44-02] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 129 as problem start state.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,3))', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 129})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 129})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 129})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 129})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,3)', 'S': 129})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 129})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 129})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 129})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 129})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 129})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 129})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 129})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 129})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 129})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 129})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 129})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 129})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,3)', 'S': 129})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 129})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 129})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 129})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'S': 129})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 129})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 129})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 129})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'S': 129})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 129})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 129})

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 129).
holds(1, complete_tower(red,puzzle_room_table), false, 129).
holds(1, configuration(manipulator_end_1), aligned_with((block,3)), 129).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 129).
holds(1, configuration(manipulator_limb_1), extended, 129).
holds(1, configuration(manipulator_limb_2), extended, 129).
holds(1, configuration(puzzle_room_door), open, 129).
holds(1, configuration(starting_room_door), closed, 129).
holds(1, configuration(store_room_door), open, 129).
holds(1, grasping(manipulator_arm_1), (block,3), 129).
holds(1, grasping(manipulator_arm_2), (block,4), 129).
holds(1, grasping(manipulator_end_1), (block,3), 129).
holds(1, grasping(manipulator_end_2), (block,4), 129).
holds(1, in((block,1)), (puzzle_room,5,0), 129).
holds(1, in((block,2)), (puzzle_room,5,0), 129).
holds(1, in((block,3)), (puzzle_room,5,0), 129).
holds(1, in((block,4)), (puzzle_room,5,0), 129).
holds(1, in((block,5)), (puzzle_room,5,0), 129).
holds(1, in((block,6)), (puzzle_room,5,0), 129).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 129).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 129).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 129).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 129).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 129).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 129).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 129).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 129).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 129).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 129).
holds(1, in(talos), (puzzle_room,5,0), 129).
holds(1, in_tower((block,1),(block,1)), true, 129).
holds(1, in_tower((block,1),(block,2)), false, 129).
holds(1, in_tower((block,1),(block,3)), true, 129).
holds(1, in_tower((block,1),(block,4)), false, 129).
holds(1, in_tower((block,1),(block,5)), false, 129).
holds(1, in_tower((block,1),(block,6)), false, 129).
holds(1, in_tower((block,2),(block,1)), false, 129).
holds(1, in_tower((block,2),(block,2)), true, 129).
holds(1, in_tower((block,2),(block,3)), false, 129).
holds(1, in_tower((block,2),(block,4)), false, 129).
holds(1, in_tower((block,2),(block,5)), false, 129).
holds(1, in_tower((block,2),(block,6)), false, 129).
holds(1, in_tower((block,3),(block,1)), false, 129).
holds(1, in_tower((block,3),(block,2)), false, 129).
holds(1, in_tower((block,3),(block,3)), false, 129).
holds(1, in_tower((block,3),(block,4)), false, 129).
holds(1, in_tower((block,3),(block,5)), false, 129).
holds(1, in_tower((block,3),(block,6)), false, 129).
holds(1, in_tower((block,4),(block,1)), false, 129).
holds(1, in_tower((block,4),(block,2)), false, 129).
holds(1, in_tower((block,4),(block,3)), false, 129).
holds(1, in_tower((block,4),(block,4)), false, 129).
holds(1, in_tower((block,4),(block,5)), false, 129).
holds(1, in_tower((block,4),(block,6)), false, 129).
holds(1, in_tower((block,5),(block,1)), false, 129).
holds(1, in_tower((block,5),(block,2)), false, 129).
holds(1, in_tower((block,5),(block,3)), false, 129).
holds(1, in_tower((block,5),(block,4)), false, 129).
holds(1, in_tower((block,5),(block,5)), false, 129).
holds(1, in_tower((block,5),(block,6)), false, 129).
holds(1, in_tower((block,6),(block,1)), false, 129).
holds(1, in_tower((block,6),(block,2)), false, 129).
holds(1, in_tower((block,6),(block,3)), false, 129).
holds(1, in_tower((block,6),(block,4)), false, 129).
holds(1, in_tower((block,6),(block,5)), true, 129).
holds(1, in_tower((block,6),(block,6)), true, 129).
holds(1, on((block,1)), puzzle_room_table_left, 129).
holds(1, on((block,2)), puzzle_room_table_right, 129).
holds(1, on((block,3)), (block,1), 129).
holds(1, on((block,4)), nothing, 129).
holds(1, on((block,5)), (block,6), 129).
holds(1, on((block,6)), puzzle_room_table_middle, 129).
holds(1, tower_base((block,1),puzzle_room_table), true, 129).
holds(1, tower_base((block,2),puzzle_room_table), true, 129).
holds(1, tower_base((block,3),puzzle_room_table), false, 129).
holds(1, tower_base((block,4),puzzle_room_table), false, 129).
holds(1, tower_base((block,5),puzzle_room_table), false, 129).
holds(1, tower_base((block,6),puzzle_room_table), true, 129).
holds(1, unordered_tower((block,1),puzzle_room_table), true, 129).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 129).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 129).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 129).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 129).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 129).
holds(2, complete_tower(blue,puzzle_room_table), false, 129).
holds(2, complete_tower(red,puzzle_room_table), false, 129).
holds(2, configuration(manipulator_arm_1), extended, 129).
holds(2, configuration(manipulator_arm_2), extended, 129).
holds(2, configuration(puzzle_room_door), open, 129).
holds(2, configuration(starting_room_door), closed, 129).
holds(2, configuration(store_room_door), open, 129).
holds(2, grasping(manipulator_arm_1), (block,3), 129).
holds(2, grasping(manipulator_arm_2), (block,4), 129).
holds(2, in((block,1)), puzzle_room, 129).
holds(2, in((block,2)), puzzle_room, 129).
holds(2, in((block,3)), puzzle_room, 129).
holds(2, in((block,4)), puzzle_room, 129).
holds(2, in((block,5)), puzzle_room, 129).
holds(2, in((block,6)), puzzle_room, 129).
holds(2, in(manipulator_arm_1), puzzle_room, 129).
holds(2, in(manipulator_arm_2), puzzle_room, 129).
holds(2, in(puzzle_room_table), puzzle_room, 129).
holds(2, in(talos), puzzle_room, 129).
holds(2, in_tower((block,1),(block,1)), true, 129).
holds(2, in_tower((block,1),(block,2)), false, 129).
holds(2, in_tower((block,1),(block,3)), true, 129).
holds(2, in_tower((block,1),(block,4)), false, 129).
holds(2, in_tower((block,1),(block,5)), false, 129).
holds(2, in_tower((block,1),(block,6)), false, 129).
holds(2, in_tower((block,2),(block,1)), false, 129).
holds(2, in_tower((block,2),(block,2)), true, 129).
holds(2, in_tower((block,2),(block,3)), false, 129).
holds(2, in_tower((block,2),(block,4)), false, 129).
holds(2, in_tower((block,2),(block,5)), false, 129).
holds(2, in_tower((block,2),(block,6)), false, 129).
holds(2, in_tower((block,3),(block,1)), false, 129).
holds(2, in_tower((block,3),(block,2)), false, 129).
holds(2, in_tower((block,3),(block,3)), false, 129).
holds(2, in_tower((block,3),(block,4)), false, 129).
holds(2, in_tower((block,3),(block,5)), false, 129).
holds(2, in_tower((block,3),(block,6)), false, 129).
holds(2, in_tower((block,4),(block,1)), false, 129).
holds(2, in_tower((block,4),(block,2)), false, 129).
holds(2, in_tower((block,4),(block,3)), false, 129).
holds(2, in_tower((block,4),(block,4)), false, 129).
holds(2, in_tower((block,4),(block,5)), false, 129).
holds(2, in_tower((block,4),(block,6)), false, 129).
holds(2, in_tower((block,5),(block,1)), false, 129).
holds(2, in_tower((block,5),(block,2)), false, 129).
holds(2, in_tower((block,5),(block,3)), false, 129).
holds(2, in_tower((block,5),(block,4)), false, 129).
holds(2, in_tower((block,5),(block,5)), false, 129).
holds(2, in_tower((block,5),(block,6)), false, 129).
holds(2, in_tower((block,6),(block,1)), false, 129).
holds(2, in_tower((block,6),(block,2)), false, 129).
holds(2, in_tower((block,6),(block,3)), false, 129).
holds(2, in_tower((block,6),(block,4)), false, 129).
holds(2, in_tower((block,6),(block,5)), true, 129).
holds(2, in_tower((block,6),(block,6)), true, 129).
holds(2, on((block,1)), puzzle_room_table, 129).
holds(2, on((block,2)), puzzle_room_table, 129).
holds(2, on((block,3)), (block,1), 129).
holds(2, on((block,4)), nothing, 129).
holds(2, on((block,5)), (block,6), 129).
holds(2, on((block,6)), puzzle_room_table, 129).
holds(2, tower_base((block,1),puzzle_room_table), true, 129).
holds(2, tower_base((block,2),puzzle_room_table), true, 129).
holds(2, tower_base((block,3),puzzle_room_table), false, 129).
holds(2, tower_base((block,4),puzzle_room_table), false, 129).
holds(2, tower_base((block,5),puzzle_room_table), false, 129).
holds(2, tower_base((block,6),puzzle_room_table), true, 129).
holds(2, unordered_tower((block,1),puzzle_room_table), true, 129).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 129).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 129).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 129).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 129).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 129).

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=130']

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,3),puzzle_room_table)', 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'I': 35})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,3))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 36})

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,3),puzzle_room_table), on((block,3)), puzzle_room_table, 35).
sub_goal(2, talos, release(manipulator_arm_1,(block,3)), grasping(manipulator_arm_1), nothing, 36).

[22-02-2022_03-44-02] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=130']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF137518B0>]
	incrementor = SolveIncrementor(step_start=129, step_increase=1, step_increase_initial=2, step_end_min=131, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 129), range_=None), IncPart(name='plan_module', args=('#inc', 129, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 129, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 129, 35, 36, 'sequential', 'false'), range_=None)]

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 820 rules

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004694999999628635s

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-44-02] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122598s.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023100s with result Satisfiable.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF17754A40>

[22-02-2022_03-44-03] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 129)
	('last_sgoals', 36)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 35)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF17754A40>)

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 129). %* None *%
#program plan_module(#inc, 129, false, false). %* None *%
#program optimisation_module(#inc, 129, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 129, 35, 36, sequential, false). %* None *%

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    128 : Current =    130
Incrementor step ends | Minimum  =    131 : Maximum =    300

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(130)]), ('state_module', [Number(129), Number(129)]), ('plan_module', [Number(129), Number(129), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(129), Number(129), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(129)]), ('action_preconditions', [Number(129)]), ('variable_relations', [Number(129)]), ('abstraction_mappings', [Number(129)]), ('conformance_module', [Number(129), Number(129), Number(35), Number(36), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(130), Number(129)]), ('plan_module', [Number(130), Number(129), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(130), Number(129), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(130)]), ('action_preconditions', [Number(130)]), ('variable_relations', [Number(130)]), ('abstraction_mappings', [Number(130)]), ('conformance_module', [Number(130), Number(129), Number(35), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.338604s.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052448s with result Satisfiable.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39105190000009316, Incremental time limit = None
Running cumulative time = 0.39105190000009316, Cumulative time limit = 1800
Used memory = (RSS = 2338.820312Mb, VMS = 2361.984375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.338604s, Solving = 0.052448s, Total = 0.391052s, Memory = (RSS = 2338.820312Mb, VMS = 2361.984375Mb), Step range = [129-130]), Calls = 1
Final Model :: Total atoms = 20616, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    130 : Current =    131
Incrementor step ends | Minimum  =    131 : Maximum =    300

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(131)]), ('state_module', [Number(131), Number(129)]), ('plan_module', [Number(131), Number(129), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(131), Number(129), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(131)]), ('action_preconditions', [Number(131)]), ('variable_relations', [Number(131)]), ('abstraction_mappings', [Number(131)]), ('conformance_module', [Number(131), Number(129), Number(35), Number(36), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164015s.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029445s with result Satisfiable.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19345999999950436, Incremental time limit = None
Running cumulative time = 0.5845118999995975, Cumulative time limit = 1800
Used memory = (RSS = 2342.023438Mb, VMS = 2365.242188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.502619s, Solving = 0.081892s, Total = 0.584512s, Memory = (RSS = 2342.023438Mb, VMS = 2365.242188Mb), Step range = [129-131]), Calls = 2
Final Model :: Total atoms = 21011, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.338604s, Solving = 0.052448s, Total = 0.391052s, Memory = (RSS = 2338.820312Mb, VMS = 2361.984375Mb), Step range = [129-130]
2 : Statistics :: Grounding = 0.164015s, Solving = 0.029445s, Total = 0.193460s, Memory = (RSS = 2342.023438Mb, VMS = 2365.242188Mb), Step range = [131-131]

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.584512s due to: Stop condition reached.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-03] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-03] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 36, Last requested goal index = 36, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.502619s, Solving = 0.081892s, Total = 0.584512s, Memory = (RSS = 2342.023438Mb, VMS = 2365.242188Mb), Step range = [129-131]), Calls = 2
Model :: Total atoms = 21011, Cost = (), Optimality proven = False, Number = 1, Thread ID = 4, Model type = ModelType.StableModel

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 126:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 127:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 128:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 129:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 130:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_middle)
Step 131:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Monolevel problem 9 at level 1 solved.

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Online planning increment 9 finished.

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 9 : Total constraining sub-goal stages = 42 : Goals achieved = 36 : Goals unachieved = 6 : Complete = False

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 10 by method ground-first is [1-1].

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 10 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [37-38]

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [37-38], problem number = 10, increment number = 10

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 37)
	('last_sgoals', 38)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [37-38] : Concurrency disabled : Minimum search length bound enabled with value 132

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 37
last_sgoals = 38
start_step = 131
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 132

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-44-04] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-44-04] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 131 as problem start state.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 131})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 131})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 131})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 131})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 131})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 131})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 131})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 131})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 131})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 131})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 131})

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), false, 131).
holds(1, complete_tower(red,puzzle_room_table), false, 131).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 131).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 131).
holds(1, configuration(manipulator_limb_1), extended, 131).
holds(1, configuration(manipulator_limb_2), extended, 131).
holds(1, configuration(puzzle_room_door), open, 131).
holds(1, configuration(starting_room_door), closed, 131).
holds(1, configuration(store_room_door), open, 131).
holds(1, grasping(manipulator_arm_1), nothing, 131).
holds(1, grasping(manipulator_arm_2), (block,4), 131).
holds(1, grasping(manipulator_end_1), nothing, 131).
holds(1, grasping(manipulator_end_2), (block,4), 131).
holds(1, in((block,1)), (puzzle_room,5,0), 131).
holds(1, in((block,2)), (puzzle_room,5,0), 131).
holds(1, in((block,3)), (puzzle_room,5,0), 131).
holds(1, in((block,4)), (puzzle_room,5,0), 131).
holds(1, in((block,5)), (puzzle_room,5,0), 131).
holds(1, in((block,6)), (puzzle_room,5,0), 131).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 131).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 131).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 131).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 131).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 131).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 131).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 131).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 131).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 131).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 131).
holds(1, in(talos), (puzzle_room,5,0), 131).
holds(1, in_tower((block,1),(block,1)), true, 131).
holds(1, in_tower((block,1),(block,2)), false, 131).
holds(1, in_tower((block,1),(block,3)), false, 131).
holds(1, in_tower((block,1),(block,4)), false, 131).
holds(1, in_tower((block,1),(block,5)), false, 131).
holds(1, in_tower((block,1),(block,6)), false, 131).
holds(1, in_tower((block,2),(block,1)), false, 131).
holds(1, in_tower((block,2),(block,2)), true, 131).
holds(1, in_tower((block,2),(block,3)), false, 131).
holds(1, in_tower((block,2),(block,4)), false, 131).
holds(1, in_tower((block,2),(block,5)), false, 131).
holds(1, in_tower((block,2),(block,6)), false, 131).
holds(1, in_tower((block,3),(block,1)), false, 131).
holds(1, in_tower((block,3),(block,2)), false, 131).
holds(1, in_tower((block,3),(block,3)), true, 131).
holds(1, in_tower((block,3),(block,4)), false, 131).
holds(1, in_tower((block,3),(block,5)), false, 131).
holds(1, in_tower((block,3),(block,6)), false, 131).
holds(1, in_tower((block,4),(block,1)), false, 131).
holds(1, in_tower((block,4),(block,2)), false, 131).
holds(1, in_tower((block,4),(block,3)), false, 131).
holds(1, in_tower((block,4),(block,4)), false, 131).
holds(1, in_tower((block,4),(block,5)), false, 131).
holds(1, in_tower((block,4),(block,6)), false, 131).
holds(1, in_tower((block,5),(block,1)), false, 131).
holds(1, in_tower((block,5),(block,2)), false, 131).
holds(1, in_tower((block,5),(block,3)), false, 131).
holds(1, in_tower((block,5),(block,4)), false, 131).
holds(1, in_tower((block,5),(block,5)), false, 131).
holds(1, in_tower((block,5),(block,6)), false, 131).
holds(1, in_tower((block,6),(block,1)), false, 131).
holds(1, in_tower((block,6),(block,2)), false, 131).
holds(1, in_tower((block,6),(block,3)), false, 131).
holds(1, in_tower((block,6),(block,4)), false, 131).
holds(1, in_tower((block,6),(block,5)), true, 131).
holds(1, in_tower((block,6),(block,6)), true, 131).
holds(1, on((block,1)), puzzle_room_table_left, 131).
holds(1, on((block,2)), puzzle_room_table_right, 131).
holds(1, on((block,3)), puzzle_room_table_middle, 131).
holds(1, on((block,4)), nothing, 131).
holds(1, on((block,5)), (block,6), 131).
holds(1, on((block,6)), puzzle_room_table_middle, 131).
holds(1, tower_base((block,1),puzzle_room_table), true, 131).
holds(1, tower_base((block,2),puzzle_room_table), true, 131).
holds(1, tower_base((block,3),puzzle_room_table), true, 131).
holds(1, tower_base((block,4),puzzle_room_table), false, 131).
holds(1, tower_base((block,5),puzzle_room_table), false, 131).
holds(1, tower_base((block,6),puzzle_room_table), true, 131).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 131).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 131).
holds(2, complete_tower(blue,puzzle_room_table), false, 131).
holds(2, complete_tower(red,puzzle_room_table), false, 131).
holds(2, configuration(manipulator_arm_1), extended, 131).
holds(2, configuration(manipulator_arm_2), extended, 131).
holds(2, configuration(puzzle_room_door), open, 131).
holds(2, configuration(starting_room_door), closed, 131).
holds(2, configuration(store_room_door), open, 131).
holds(2, grasping(manipulator_arm_1), nothing, 131).
holds(2, grasping(manipulator_arm_2), (block,4), 131).
holds(2, in((block,1)), puzzle_room, 131).
holds(2, in((block,2)), puzzle_room, 131).
holds(2, in((block,3)), puzzle_room, 131).
holds(2, in((block,4)), puzzle_room, 131).
holds(2, in((block,5)), puzzle_room, 131).
holds(2, in((block,6)), puzzle_room, 131).
holds(2, in(manipulator_arm_1), puzzle_room, 131).
holds(2, in(manipulator_arm_2), puzzle_room, 131).
holds(2, in(puzzle_room_table), puzzle_room, 131).
holds(2, in(talos), puzzle_room, 131).
holds(2, in_tower((block,1),(block,1)), true, 131).
holds(2, in_tower((block,1),(block,2)), false, 131).
holds(2, in_tower((block,1),(block,3)), false, 131).
holds(2, in_tower((block,1),(block,4)), false, 131).
holds(2, in_tower((block,1),(block,5)), false, 131).
holds(2, in_tower((block,1),(block,6)), false, 131).
holds(2, in_tower((block,2),(block,1)), false, 131).
holds(2, in_tower((block,2),(block,2)), true, 131).
holds(2, in_tower((block,2),(block,3)), false, 131).
holds(2, in_tower((block,2),(block,4)), false, 131).
holds(2, in_tower((block,2),(block,5)), false, 131).
holds(2, in_tower((block,2),(block,6)), false, 131).
holds(2, in_tower((block,3),(block,1)), false, 131).
holds(2, in_tower((block,3),(block,2)), false, 131).
holds(2, in_tower((block,3),(block,3)), true, 131).
holds(2, in_tower((block,3),(block,4)), false, 131).
holds(2, in_tower((block,3),(block,5)), false, 131).
holds(2, in_tower((block,3),(block,6)), false, 131).
holds(2, in_tower((block,4),(block,1)), false, 131).
holds(2, in_tower((block,4),(block,2)), false, 131).
holds(2, in_tower((block,4),(block,3)), false, 131).
holds(2, in_tower((block,4),(block,4)), false, 131).
holds(2, in_tower((block,4),(block,5)), false, 131).
holds(2, in_tower((block,4),(block,6)), false, 131).
holds(2, in_tower((block,5),(block,1)), false, 131).
holds(2, in_tower((block,5),(block,2)), false, 131).
holds(2, in_tower((block,5),(block,3)), false, 131).
holds(2, in_tower((block,5),(block,4)), false, 131).
holds(2, in_tower((block,5),(block,5)), false, 131).
holds(2, in_tower((block,5),(block,6)), false, 131).
holds(2, in_tower((block,6),(block,1)), false, 131).
holds(2, in_tower((block,6),(block,2)), false, 131).
holds(2, in_tower((block,6),(block,3)), false, 131).
holds(2, in_tower((block,6),(block,4)), false, 131).
holds(2, in_tower((block,6),(block,5)), true, 131).
holds(2, in_tower((block,6),(block,6)), true, 131).
holds(2, on((block,1)), puzzle_room_table, 131).
holds(2, on((block,2)), puzzle_room_table, 131).
holds(2, on((block,3)), puzzle_room_table, 131).
holds(2, on((block,4)), nothing, 131).
holds(2, on((block,5)), (block,6), 131).
holds(2, on((block,6)), puzzle_room_table, 131).
holds(2, tower_base((block,1),puzzle_room_table), true, 131).
holds(2, tower_base((block,2),puzzle_room_table), true, 131).
holds(2, tower_base((block,3),puzzle_room_table), true, 131).
holds(2, tower_base((block,4),puzzle_room_table), false, 131).
holds(2, tower_base((block,5),puzzle_room_table), false, 131).
holds(2, tower_base((block,6),puzzle_room_table), true, 131).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 131).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 131).

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=132']

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_2,(block,4),(block,5))', 'F': 'on((block,4))', 'V': '(block,5)', 'I': 37})
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'I': 38})

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_2,(block,4),(block,5)), on((block,4)), (block,5), 37).
sub_goal(2, talos, grasp(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), (block,2), 38).

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=132']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF13751DC0>]
	incrementor = SolveIncrementor(step_start=131, step_increase=1, step_increase_initial=2, step_end_min=133, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 131), range_=None), IncPart(name='plan_module', args=('#inc', 131, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 131, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 131, 37, 38, 'sequential', 'false'), range_=None)]

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 820 rules

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004860299999563722s

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.121849s.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022418s with result Satisfiable.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF1775B130>

[22-02-2022_03-44-04] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 131)
	('last_sgoals', 38)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 37)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF1775B130>)

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 131). %* None *%
#program plan_module(#inc, 131, false, false). %* None *%
#program optimisation_module(#inc, 131, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 131, 37, 38, sequential, false). %* None *%

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    130 : Current =    132
Incrementor step ends | Minimum  =    133 : Maximum =    300

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(132)]), ('state_module', [Number(131), Number(131)]), ('plan_module', [Number(131), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(131), Number(131), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(131)]), ('action_preconditions', [Number(131)]), ('variable_relations', [Number(131)]), ('abstraction_mappings', [Number(131)]), ('conformance_module', [Number(131), Number(131), Number(37), Number(38), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(132), Number(131)]), ('plan_module', [Number(132), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(132), Number(131), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(132)]), ('action_preconditions', [Number(132)]), ('variable_relations', [Number(132)]), ('abstraction_mappings', [Number(132)]), ('conformance_module', [Number(132), Number(131), Number(37), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.345704s.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.058136s with result Satisfiable.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.40384050000011484, Incremental time limit = None
Running cumulative time = 0.40384050000011484, Cumulative time limit = 1800
Used memory = (RSS = 2339.359375Mb, VMS = 2362.484375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.345704s, Solving = 0.058136s, Total = 0.403841s, Memory = (RSS = 2339.359375Mb, VMS = 2362.484375Mb), Step range = [131-132]), Calls = 1
Final Model :: Total atoms = 20617, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    132 : Current =    133
Incrementor step ends | Minimum  =    133 : Maximum =    300

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(133)]), ('state_module', [Number(133), Number(131)]), ('plan_module', [Number(133), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(133), Number(131), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(133)]), ('action_preconditions', [Number(133)]), ('variable_relations', [Number(133)]), ('abstraction_mappings', [Number(133)]), ('conformance_module', [Number(133), Number(131), Number(37), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165262s.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.011535s with result Unsatisfiable.

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.17679759999919042, Incremental time limit = None
Running cumulative time = 0.5806380999993053, Cumulative time limit = 1800
Used memory = (RSS = 2339.359375Mb, VMS = 2362.484375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    133 : Current =    134
Incrementor step ends | Minimum  =    133 : Maximum =    300

[22-02-2022_03-44-04] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(134)]), ('state_module', [Number(134), Number(131)]), ('plan_module', [Number(134), Number(131), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(134), Number(131), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(134)]), ('action_preconditions', [Number(134)]), ('variable_relations', [Number(134)]), ('abstraction_mappings', [Number(134)]), ('conformance_module', [Number(134), Number(131), Number(37), Number(38), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165972s.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.037157s with result Satisfiable.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2031299999998737, Incremental time limit = None
Running cumulative time = 0.783768099999179, Cumulative time limit = 1800
Used memory = (RSS = 2343.617188Mb, VMS = 2366.675781Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.676939s, Solving = 0.106829s, Total = 0.783768s, Memory = (RSS = 2343.617188Mb, VMS = 2366.675781Mb), Step range = [131-134]), Calls = 3
Final Model :: Total atoms = 21408, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.345704s, Solving = 0.058136s, Total = 0.403841s, Memory = (RSS = 2339.359375Mb, VMS = 2362.484375Mb), Step range = [131-132]
2 : Statistics :: Grounding = 0.165262s, Solving = 0.011535s, Total = 0.176798s, Memory = (RSS = 2339.359375Mb, VMS = 2362.484375Mb), Step range = [133-133]
3 : Statistics :: Grounding = 0.165972s, Solving = 0.037157s, Total = 0.203130s, Memory = (RSS = 2343.617188Mb, VMS = 2366.675781Mb), Step range = [134-134]

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.783768s due to: Stop condition reached.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36, 132: 37, 133: 37, 134: 38}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131, 37: 133, 38: 134}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 38, Last requested goal index = 38, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.676939s, Solving = 0.106829s, Total = 0.783768s, Memory = (RSS = 2343.617188Mb, VMS = 2366.675781Mb), Step range = [131-134]), Calls = 3
Model :: Total atoms = 21408, Cost = (), Optimality proven = False, Number = 1, Thread ID = 2, Model type = ModelType.StableModel

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 3 :: Actions = 3                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 126:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 127:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 128:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 129:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 130:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_middle)
Step 131:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 132:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 133:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 134:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Monolevel problem 10 at level 1 solved.

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Online planning increment 10 finished.

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 10 : Total constraining sub-goal stages = 42 : Goals achieved = 38 : Goals unachieved = 4 : Complete = False

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 11 by method ground-first is [1-1].

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 11 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [39-40]

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [39-40], problem number = 11, increment number = 11

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 39)
	('last_sgoals', 40)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [39-40] : Concurrency disabled : Minimum search length bound enabled with value 135

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 39
last_sgoals = 40
start_step = 134
is_initial = False
is_final = False
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 135

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = True, chosen = False

[22-02-2022_03-44-05] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-44-05] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 134 as problem start state.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with((block,2))', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 134})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 134})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 134})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 134})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': '(block,2)', 'S': 134})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 134})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 134})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'S': 134})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'S': 134})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 134})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 134})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 134})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 134})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 134})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 134})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 134})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 134})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': '(block,2)', 'S': 134})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 134})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 134})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'S': 134})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 134})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 134})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 134})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 134})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 134})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 134})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 134})

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 134).
holds(1, complete_tower(red,puzzle_room_table), false, 134).
holds(1, configuration(manipulator_end_1), aligned_with((block,2)), 134).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 134).
holds(1, configuration(manipulator_limb_1), extended, 134).
holds(1, configuration(manipulator_limb_2), extended, 134).
holds(1, configuration(puzzle_room_door), open, 134).
holds(1, configuration(starting_room_door), closed, 134).
holds(1, configuration(store_room_door), open, 134).
holds(1, grasping(manipulator_arm_1), (block,2), 134).
holds(1, grasping(manipulator_arm_2), (block,4), 134).
holds(1, grasping(manipulator_end_1), (block,2), 134).
holds(1, grasping(manipulator_end_2), (block,4), 134).
holds(1, in((block,1)), (puzzle_room,5,0), 134).
holds(1, in((block,2)), (puzzle_room,5,0), 134).
holds(1, in((block,3)), (puzzle_room,5,0), 134).
holds(1, in((block,4)), (puzzle_room,5,0), 134).
holds(1, in((block,5)), (puzzle_room,5,0), 134).
holds(1, in((block,6)), (puzzle_room,5,0), 134).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 134).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 134).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 134).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 134).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 134).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 134).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 134).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 134).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 134).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 134).
holds(1, in(talos), (puzzle_room,5,0), 134).
holds(1, in_tower((block,1),(block,1)), true, 134).
holds(1, in_tower((block,1),(block,2)), false, 134).
holds(1, in_tower((block,1),(block,3)), false, 134).
holds(1, in_tower((block,1),(block,4)), false, 134).
holds(1, in_tower((block,1),(block,5)), false, 134).
holds(1, in_tower((block,1),(block,6)), false, 134).
holds(1, in_tower((block,2),(block,1)), false, 134).
holds(1, in_tower((block,2),(block,2)), true, 134).
holds(1, in_tower((block,2),(block,3)), false, 134).
holds(1, in_tower((block,2),(block,4)), false, 134).
holds(1, in_tower((block,2),(block,5)), false, 134).
holds(1, in_tower((block,2),(block,6)), false, 134).
holds(1, in_tower((block,3),(block,1)), false, 134).
holds(1, in_tower((block,3),(block,2)), false, 134).
holds(1, in_tower((block,3),(block,3)), true, 134).
holds(1, in_tower((block,3),(block,4)), false, 134).
holds(1, in_tower((block,3),(block,5)), false, 134).
holds(1, in_tower((block,3),(block,6)), false, 134).
holds(1, in_tower((block,4),(block,1)), false, 134).
holds(1, in_tower((block,4),(block,2)), false, 134).
holds(1, in_tower((block,4),(block,3)), false, 134).
holds(1, in_tower((block,4),(block,4)), false, 134).
holds(1, in_tower((block,4),(block,5)), false, 134).
holds(1, in_tower((block,4),(block,6)), false, 134).
holds(1, in_tower((block,5),(block,1)), false, 134).
holds(1, in_tower((block,5),(block,2)), false, 134).
holds(1, in_tower((block,5),(block,3)), false, 134).
holds(1, in_tower((block,5),(block,4)), false, 134).
holds(1, in_tower((block,5),(block,5)), false, 134).
holds(1, in_tower((block,5),(block,6)), false, 134).
holds(1, in_tower((block,6),(block,1)), false, 134).
holds(1, in_tower((block,6),(block,2)), false, 134).
holds(1, in_tower((block,6),(block,3)), false, 134).
holds(1, in_tower((block,6),(block,4)), true, 134).
holds(1, in_tower((block,6),(block,5)), true, 134).
holds(1, in_tower((block,6),(block,6)), true, 134).
holds(1, on((block,1)), puzzle_room_table_left, 134).
holds(1, on((block,2)), puzzle_room_table_right, 134).
holds(1, on((block,3)), puzzle_room_table_middle, 134).
holds(1, on((block,4)), (block,5), 134).
holds(1, on((block,5)), (block,6), 134).
holds(1, on((block,6)), puzzle_room_table_middle, 134).
holds(1, tower_base((block,1),puzzle_room_table), true, 134).
holds(1, tower_base((block,2),puzzle_room_table), true, 134).
holds(1, tower_base((block,3),puzzle_room_table), true, 134).
holds(1, tower_base((block,4),puzzle_room_table), false, 134).
holds(1, tower_base((block,5),puzzle_room_table), false, 134).
holds(1, tower_base((block,6),puzzle_room_table), true, 134).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 134).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 134).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 134).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 134).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 134).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 134).
holds(2, complete_tower(blue,puzzle_room_table), true, 134).
holds(2, complete_tower(red,puzzle_room_table), false, 134).
holds(2, configuration(manipulator_arm_1), extended, 134).
holds(2, configuration(manipulator_arm_2), extended, 134).
holds(2, configuration(puzzle_room_door), open, 134).
holds(2, configuration(starting_room_door), closed, 134).
holds(2, configuration(store_room_door), open, 134).
holds(2, grasping(manipulator_arm_1), (block,2), 134).
holds(2, grasping(manipulator_arm_2), (block,4), 134).
holds(2, in((block,1)), puzzle_room, 134).
holds(2, in((block,2)), puzzle_room, 134).
holds(2, in((block,3)), puzzle_room, 134).
holds(2, in((block,4)), puzzle_room, 134).
holds(2, in((block,5)), puzzle_room, 134).
holds(2, in((block,6)), puzzle_room, 134).
holds(2, in(manipulator_arm_1), puzzle_room, 134).
holds(2, in(manipulator_arm_2), puzzle_room, 134).
holds(2, in(puzzle_room_table), puzzle_room, 134).
holds(2, in(talos), puzzle_room, 134).
holds(2, in_tower((block,1),(block,1)), true, 134).
holds(2, in_tower((block,1),(block,2)), false, 134).
holds(2, in_tower((block,1),(block,3)), false, 134).
holds(2, in_tower((block,1),(block,4)), false, 134).
holds(2, in_tower((block,1),(block,5)), false, 134).
holds(2, in_tower((block,1),(block,6)), false, 134).
holds(2, in_tower((block,2),(block,1)), false, 134).
holds(2, in_tower((block,2),(block,2)), true, 134).
holds(2, in_tower((block,2),(block,3)), false, 134).
holds(2, in_tower((block,2),(block,4)), false, 134).
holds(2, in_tower((block,2),(block,5)), false, 134).
holds(2, in_tower((block,2),(block,6)), false, 134).
holds(2, in_tower((block,3),(block,1)), false, 134).
holds(2, in_tower((block,3),(block,2)), false, 134).
holds(2, in_tower((block,3),(block,3)), true, 134).
holds(2, in_tower((block,3),(block,4)), false, 134).
holds(2, in_tower((block,3),(block,5)), false, 134).
holds(2, in_tower((block,3),(block,6)), false, 134).
holds(2, in_tower((block,4),(block,1)), false, 134).
holds(2, in_tower((block,4),(block,2)), false, 134).
holds(2, in_tower((block,4),(block,3)), false, 134).
holds(2, in_tower((block,4),(block,4)), false, 134).
holds(2, in_tower((block,4),(block,5)), false, 134).
holds(2, in_tower((block,4),(block,6)), false, 134).
holds(2, in_tower((block,5),(block,1)), false, 134).
holds(2, in_tower((block,5),(block,2)), false, 134).
holds(2, in_tower((block,5),(block,3)), false, 134).
holds(2, in_tower((block,5),(block,4)), false, 134).
holds(2, in_tower((block,5),(block,5)), false, 134).
holds(2, in_tower((block,5),(block,6)), false, 134).
holds(2, in_tower((block,6),(block,1)), false, 134).
holds(2, in_tower((block,6),(block,2)), false, 134).
holds(2, in_tower((block,6),(block,3)), false, 134).
holds(2, in_tower((block,6),(block,4)), true, 134).
holds(2, in_tower((block,6),(block,5)), true, 134).
holds(2, in_tower((block,6),(block,6)), true, 134).
holds(2, on((block,1)), puzzle_room_table, 134).
holds(2, on((block,2)), puzzle_room_table, 134).
holds(2, on((block,3)), puzzle_room_table, 134).
holds(2, on((block,4)), (block,5), 134).
holds(2, on((block,5)), (block,6), 134).
holds(2, on((block,6)), puzzle_room_table, 134).
holds(2, tower_base((block,1),puzzle_room_table), true, 134).
holds(2, tower_base((block,2),puzzle_room_table), true, 134).
holds(2, tower_base((block,3),puzzle_room_table), true, 134).
holds(2, tower_base((block,4),puzzle_room_table), false, 134).
holds(2, tower_base((block,5),puzzle_room_table), false, 134).
holds(2, tower_base((block,6),puzzle_room_table), true, 134).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 134).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 134).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 134).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 134).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 134).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 134).

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=135']

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,2),(block,3))', 'F': 'on((block,2))', 'V': '(block,3)', 'I': 39})
SubGoal({'L': 2, 'R': 'talos', 'A': 'release(manipulator_arm_1,(block,2))', 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'I': 40})

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, put(manipulator_arm_1,(block,2),(block,3)), on((block,2)), (block,3), 39).
sub_goal(2, talos, release(manipulator_arm_1,(block,2)), grasping(manipulator_arm_1), nothing, 40).

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=135']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF16B5C310>]
	incrementor = SolveIncrementor(step_start=134, step_increase=1, step_increase_initial=2, step_end_min=136, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 134), range_=None), IncPart(name='plan_module', args=('#inc', 134, 'false', 'false'), range_=None), IncPart(name='optimisation_module', args=('#inc', 134, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 134, 39, 40, 'sequential', 'false'), range_=None)]

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 820 rules

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.004894500000773405s

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.122070s.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.023169s with result Satisfiable.

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF17449400>

[22-02-2022_03-44-05] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 134)
	('last_sgoals', 40)
	('finalise', False)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 39)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF17449400>)

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 134). %* None *%
#program plan_module(#inc, 134, false, false). %* None *%
#program optimisation_module(#inc, 134, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 134, 39, 40, sequential, false). %* None *%

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    133 : Current =    135
Incrementor step ends | Minimum  =    136 : Maximum =    300

[22-02-2022_03-44-05] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(135)]), ('state_module', [Number(134), Number(134)]), ('plan_module', [Number(134), Number(134), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(134), Number(134), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(134)]), ('action_preconditions', [Number(134)]), ('variable_relations', [Number(134)]), ('abstraction_mappings', [Number(134)]), ('conformance_module', [Number(134), Number(134), Number(39), Number(40), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(135), Number(134)]), ('plan_module', [Number(135), Number(134), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(135), Number(134), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(135)]), ('action_preconditions', [Number(135)]), ('variable_relations', [Number(135)]), ('abstraction_mappings', [Number(135)]), ('conformance_module', [Number(135), Number(134), Number(39), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.344982s.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.048306s with result Satisfiable.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39328800000021147, Incremental time limit = None
Running cumulative time = 0.39328800000021147, Cumulative time limit = 1800
Used memory = (RSS = 2340.062500Mb, VMS = 2363.234375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.344982s, Solving = 0.048306s, Total = 0.393288s, Memory = (RSS = 2340.062500Mb, VMS = 2363.234375Mb), Step range = [134-135]), Calls = 1
Final Model :: Total atoms = 20616, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    135 : Current =    136
Incrementor step ends | Minimum  =    136 : Maximum =    300

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(136)]), ('state_module', [Number(136), Number(134)]), ('plan_module', [Number(136), Number(134), Function('false', [], True), Function('false', [], True)]), ('optimisation_module', [Number(136), Number(134), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(136)]), ('action_preconditions', [Number(136)]), ('variable_relations', [Number(136)]), ('abstraction_mappings', [Number(136)]), ('conformance_module', [Number(136), Number(134), Number(39), Number(40), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.164852s.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.029339s with result Satisfiable.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.19419160000052216, Incremental time limit = None
Running cumulative time = 0.5874796000007336, Cumulative time limit = 1800
Used memory = (RSS = 2342.753906Mb, VMS = 2365.992188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.509834s, Solving = 0.077645s, Total = 0.587480s, Memory = (RSS = 2342.753906Mb, VMS = 2365.992188Mb), Step range = [134-136]), Calls = 2
Final Model :: Total atoms = 21011, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.344982s, Solving = 0.048306s, Total = 0.393288s, Memory = (RSS = 2340.062500Mb, VMS = 2363.234375Mb), Step range = [134-135]
2 : Statistics :: Grounding = 0.164852s, Solving = 0.029339s, Total = 0.194192s, Memory = (RSS = 2342.753906Mb, VMS = 2365.992188Mb), Step range = [136-136]

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 0.587480s due to: Stop condition reached.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36, 132: 37, 133: 37, 134: 38}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131, 37: 133, 38: 134}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36, 132: 37, 133: 37, 134: 38, 135: 39, 136: 40}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131, 37: 133, 38: 134, 39: 135, 40: 136}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 40, Last requested goal index = 40, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : PARTIAL PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.509834s, Solving = 0.077645s, Total = 0.587480s, Memory = (RSS = 2342.753906Mb, VMS = 2365.992188Mb), Step range = [134-136]), Calls = 2
Model :: Total atoms = 21011, Cost = (), Optimality proven = False, Number = 1, Thread ID = 0, Model type = ModelType.StableModel

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                  Steps = 2 :: Actions = 2                  
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 126:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 127:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 128:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 129:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 130:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_middle)
Step 131:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 132:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 133:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 134:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 135:
    Current Sub-goals:
        [Index = 39] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 39] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 136:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Monolevel problem 11 at level 1 solved.

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Online planning increment 11 finished.

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Current online planning diagram progression:
Level = 3 : Solved problems = 1 : Total constraining sub-goal stages = 0 : Goals achieved = 0 : Goals unachieved = 0 : Complete = True
Level = 2 : Solved problems = 2 : Total constraining sub-goal stages = 20 : Goals achieved = 20 : Goals unachieved = 0 : Complete = True
Level = 1 : Solved problems = 11 : Total constraining sub-goal stages = 42 : Goals achieved = 40 : Goals unachieved = 2 : Complete = False

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Current valid planning levels: Lowest = 1, Highest = 1.

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Chosen level range for online planning increment 12 by method ground-first is [1-1].

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Using division scenario from previous level 2 to proactively divide planning problem 12 at level 1:
Total Templated Partial Problems = 6, Problem Range = [7-12], Size = 11, Sub-goal Stage Range = [32-42]
Division points [total=5] : [(Index = 32, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 34, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 36, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 38, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive), (Index = 40, Blend = (Left = 0, Right = 0), Inherited = False, Type = proactive)]

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Proactively chosen sgoals range = [41-42]

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Starting refinement planning: level = 1, sgoals range = [41-42], problem number = 12, increment number = 12

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Starting monolevel planning with input arguments
	('concurrency', False)
	('conformance', True)
	('conformance_type', <ConformanceType.SequentialAchievement: 'sequential'>)
	('first_sgoals', 41)
	('last_sgoals', 42)
	('sequential_yield', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('save_grounding', False)
	('use_saved_grounding', False)
	('use_search_length_bound', True)
	('make_observable', False)
	('minimise_actions', None)
	('order_fgoals_achievement', None)
	('preempt_pos_fgoals', False)
	('preempt_neg_fgoals', False)
	('preempt_mode', <PreemptMode.Heuristic: 'heuristic'>)
	('detect_interleaving', False)
	('generate_search_space', False)
	('generate_solution_space', False)
	('time_limit', 1800)
	('length_limit', 300)
	('level', 1)
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Generating monolevel plan:
[Level = 1] partial conformance refinement (sequential) with sgoals range [41-42] : Concurrency disabled : Minimum search length bound enabled with value 137

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Problem specification obtained: level = 1
concurrency = False
conformance = True
conformance_type = ConformanceType.SequentialAchievement
first_sgoals = 41
last_sgoals = 42
start_step = 136
is_initial = False
is_final = True
complete_planning = False
sequential_yield = False
reactive_divisions = False
use_search_length_bound = True
search_length_bound = 137

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Optimisation details:
Action minimisation = False
Final-goal intermediate achievement ordering preferences = False
Positive final-goal preemptive achievement = False
Negative final-goal preemptive achievement = False
Final-goal preemptive achievement mode = PreemptMode.Heuristic

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Grounding Options:
Continue existing saved grounding: requested = False, available = False, chosen = FalseSave current grounding on completion: requested = False, possible = False, chosen = False

[22-02-2022_03-44-06] DEBUG :: Logic Program ASH #1 >> Creating copy of self: rename = Main #1 :: Generate monolevel plan

[22-02-2022_03-44-06] DEBUG :: ASP_Parser >> Attempting to instantiate new logic program:
	('name', 'Main #1 :: Generate monolevel plan')
	('silent', True)
	('warnings', True)
	('message_limit', 20)
	('enable_tqdm', True)

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Parsing raw logic program code:


[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program code parsed successfully.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Logic program instantiated successfully.

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Using new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Adding intermediate state at step 136 as problem start state.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_initial_state with rules:
Fluent({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_1)', 'V': 'aligned_with(nothing)', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(manipulator_end_2)', 'V': 'aligned_with((block,4))', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_1)', 'V': 'extended', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(manipulator_limb_2)', 'V': 'extended', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 136})
Fluent({'L': 1, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 136})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 136})
Fluent({'L': 1, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 136})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_1)', 'V': 'nothing', 'S': 136})
Fluent({'L': 1, 'F': 'grasping(manipulator_end_2)', 'V': '(block,4)', 'S': 136})
Fluent({'L': 1, 'F': 'in((block,1))', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in((block,2))', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in((block,3))', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in((block,4))', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in((block,5))', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in((block,6))', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(manipulator_arm_1)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(manipulator_arm_2)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(manipulator_end_1)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(manipulator_end_2)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(manipulator_limb_1)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(manipulator_limb_2)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(puzzle_room_table)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_left)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_middle)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(puzzle_room_table_right)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in(talos)', 'V': '(puzzle_room,5,0)', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'S': 136})
Fluent({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 136})
Fluent({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'S': 136})
Fluent({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 136})
Fluent({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 136})
Fluent({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'S': 136})
Fluent({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_1)', 'V': 'extended', 'S': 136})
Fluent({'L': 2, 'F': 'configuration(manipulator_arm_2)', 'V': 'extended', 'S': 136})
Fluent({'L': 2, 'F': 'configuration(puzzle_room_door)', 'V': 'open', 'S': 136})
Fluent({'L': 2, 'F': 'configuration(starting_room_door)', 'V': 'closed', 'S': 136})
Fluent({'L': 2, 'F': 'configuration(store_room_door)', 'V': 'open', 'S': 136})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_1)', 'V': 'nothing', 'S': 136})
Fluent({'L': 2, 'F': 'grasping(manipulator_arm_2)', 'V': '(block,4)', 'S': 136})
Fluent({'L': 2, 'F': 'in((block,1))', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in((block,2))', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in((block,3))', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in((block,4))', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in((block,5))', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in((block,6))', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in(manipulator_arm_1)', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in(manipulator_arm_2)', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in(puzzle_room_table)', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in(talos)', 'V': 'puzzle_room', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'S': 136})
Fluent({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'S': 136})
Fluent({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'S': 136})
Fluent({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'S': 136})
Fluent({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'S': 136})
Fluent({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'S': 136})
Fluent({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'S': 136})
Fluent({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'S': 136})
Fluent({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'S': 136})

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 157 rules into program part ash_initial_state:

holds(1, complete_tower(blue,puzzle_room_table), true, 136).
holds(1, complete_tower(red,puzzle_room_table), false, 136).
holds(1, configuration(manipulator_end_1), aligned_with(nothing), 136).
holds(1, configuration(manipulator_end_2), aligned_with((block,4)), 136).
holds(1, configuration(manipulator_limb_1), extended, 136).
holds(1, configuration(manipulator_limb_2), extended, 136).
holds(1, configuration(puzzle_room_door), open, 136).
holds(1, configuration(starting_room_door), closed, 136).
holds(1, configuration(store_room_door), open, 136).
holds(1, grasping(manipulator_arm_1), nothing, 136).
holds(1, grasping(manipulator_arm_2), (block,4), 136).
holds(1, grasping(manipulator_end_1), nothing, 136).
holds(1, grasping(manipulator_end_2), (block,4), 136).
holds(1, in((block,1)), (puzzle_room,5,0), 136).
holds(1, in((block,2)), (puzzle_room,5,0), 136).
holds(1, in((block,3)), (puzzle_room,5,0), 136).
holds(1, in((block,4)), (puzzle_room,5,0), 136).
holds(1, in((block,5)), (puzzle_room,5,0), 136).
holds(1, in((block,6)), (puzzle_room,5,0), 136).
holds(1, in(manipulator_arm_1), (puzzle_room,5,0), 136).
holds(1, in(manipulator_arm_2), (puzzle_room,5,0), 136).
holds(1, in(manipulator_end_1), (puzzle_room,5,0), 136).
holds(1, in(manipulator_end_2), (puzzle_room,5,0), 136).
holds(1, in(manipulator_limb_1), (puzzle_room,5,0), 136).
holds(1, in(manipulator_limb_2), (puzzle_room,5,0), 136).
holds(1, in(puzzle_room_table), (puzzle_room,5,0), 136).
holds(1, in(puzzle_room_table_left), (puzzle_room,5,0), 136).
holds(1, in(puzzle_room_table_middle), (puzzle_room,5,0), 136).
holds(1, in(puzzle_room_table_right), (puzzle_room,5,0), 136).
holds(1, in(talos), (puzzle_room,5,0), 136).
holds(1, in_tower((block,1),(block,1)), true, 136).
holds(1, in_tower((block,1),(block,2)), false, 136).
holds(1, in_tower((block,1),(block,3)), false, 136).
holds(1, in_tower((block,1),(block,4)), false, 136).
holds(1, in_tower((block,1),(block,5)), false, 136).
holds(1, in_tower((block,1),(block,6)), false, 136).
holds(1, in_tower((block,2),(block,1)), false, 136).
holds(1, in_tower((block,2),(block,2)), false, 136).
holds(1, in_tower((block,2),(block,3)), false, 136).
holds(1, in_tower((block,2),(block,4)), false, 136).
holds(1, in_tower((block,2),(block,5)), false, 136).
holds(1, in_tower((block,2),(block,6)), false, 136).
holds(1, in_tower((block,3),(block,1)), false, 136).
holds(1, in_tower((block,3),(block,2)), true, 136).
holds(1, in_tower((block,3),(block,3)), true, 136).
holds(1, in_tower((block,3),(block,4)), false, 136).
holds(1, in_tower((block,3),(block,5)), false, 136).
holds(1, in_tower((block,3),(block,6)), false, 136).
holds(1, in_tower((block,4),(block,1)), false, 136).
holds(1, in_tower((block,4),(block,2)), false, 136).
holds(1, in_tower((block,4),(block,3)), false, 136).
holds(1, in_tower((block,4),(block,4)), false, 136).
holds(1, in_tower((block,4),(block,5)), false, 136).
holds(1, in_tower((block,4),(block,6)), false, 136).
holds(1, in_tower((block,5),(block,1)), false, 136).
holds(1, in_tower((block,5),(block,2)), false, 136).
holds(1, in_tower((block,5),(block,3)), false, 136).
holds(1, in_tower((block,5),(block,4)), false, 136).
holds(1, in_tower((block,5),(block,5)), false, 136).
holds(1, in_tower((block,5),(block,6)), false, 136).
holds(1, in_tower((block,6),(block,1)), false, 136).
holds(1, in_tower((block,6),(block,2)), false, 136).
holds(1, in_tower((block,6),(block,3)), false, 136).
holds(1, in_tower((block,6),(block,4)), true, 136).
holds(1, in_tower((block,6),(block,5)), true, 136).
holds(1, in_tower((block,6),(block,6)), true, 136).
holds(1, on((block,1)), puzzle_room_table_left, 136).
holds(1, on((block,2)), (block,3), 136).
holds(1, on((block,3)), puzzle_room_table_middle, 136).
holds(1, on((block,4)), (block,5), 136).
holds(1, on((block,5)), (block,6), 136).
holds(1, on((block,6)), puzzle_room_table_middle, 136).
holds(1, tower_base((block,1),puzzle_room_table), true, 136).
holds(1, tower_base((block,2),puzzle_room_table), false, 136).
holds(1, tower_base((block,3),puzzle_room_table), true, 136).
holds(1, tower_base((block,4),puzzle_room_table), false, 136).
holds(1, tower_base((block,5),puzzle_room_table), false, 136).
holds(1, tower_base((block,6),puzzle_room_table), true, 136).
holds(1, unordered_tower((block,1),puzzle_room_table), false, 136).
holds(1, unordered_tower((block,2),puzzle_room_table), false, 136).
holds(1, unordered_tower((block,3),puzzle_room_table), false, 136).
holds(1, unordered_tower((block,4),puzzle_room_table), false, 136).
holds(1, unordered_tower((block,5),puzzle_room_table), false, 136).
holds(1, unordered_tower((block,6),puzzle_room_table), false, 136).
holds(2, complete_tower(blue,puzzle_room_table), true, 136).
holds(2, complete_tower(red,puzzle_room_table), false, 136).
holds(2, configuration(manipulator_arm_1), extended, 136).
holds(2, configuration(manipulator_arm_2), extended, 136).
holds(2, configuration(puzzle_room_door), open, 136).
holds(2, configuration(starting_room_door), closed, 136).
holds(2, configuration(store_room_door), open, 136).
holds(2, grasping(manipulator_arm_1), nothing, 136).
holds(2, grasping(manipulator_arm_2), (block,4), 136).
holds(2, in((block,1)), puzzle_room, 136).
holds(2, in((block,2)), puzzle_room, 136).
holds(2, in((block,3)), puzzle_room, 136).
holds(2, in((block,4)), puzzle_room, 136).
holds(2, in((block,5)), puzzle_room, 136).
holds(2, in((block,6)), puzzle_room, 136).
holds(2, in(manipulator_arm_1), puzzle_room, 136).
holds(2, in(manipulator_arm_2), puzzle_room, 136).
holds(2, in(puzzle_room_table), puzzle_room, 136).
holds(2, in(talos), puzzle_room, 136).
holds(2, in_tower((block,1),(block,1)), true, 136).
holds(2, in_tower((block,1),(block,2)), false, 136).
holds(2, in_tower((block,1),(block,3)), false, 136).
holds(2, in_tower((block,1),(block,4)), false, 136).
holds(2, in_tower((block,1),(block,5)), false, 136).
holds(2, in_tower((block,1),(block,6)), false, 136).
holds(2, in_tower((block,2),(block,1)), false, 136).
holds(2, in_tower((block,2),(block,2)), false, 136).
holds(2, in_tower((block,2),(block,3)), false, 136).
holds(2, in_tower((block,2),(block,4)), false, 136).
holds(2, in_tower((block,2),(block,5)), false, 136).
holds(2, in_tower((block,2),(block,6)), false, 136).
holds(2, in_tower((block,3),(block,1)), false, 136).
holds(2, in_tower((block,3),(block,2)), true, 136).
holds(2, in_tower((block,3),(block,3)), true, 136).
holds(2, in_tower((block,3),(block,4)), false, 136).
holds(2, in_tower((block,3),(block,5)), false, 136).
holds(2, in_tower((block,3),(block,6)), false, 136).
holds(2, in_tower((block,4),(block,1)), false, 136).
holds(2, in_tower((block,4),(block,2)), false, 136).
holds(2, in_tower((block,4),(block,3)), false, 136).
holds(2, in_tower((block,4),(block,4)), false, 136).
holds(2, in_tower((block,4),(block,5)), false, 136).
holds(2, in_tower((block,4),(block,6)), false, 136).
holds(2, in_tower((block,5),(block,1)), false, 136).
holds(2, in_tower((block,5),(block,2)), false, 136).
holds(2, in_tower((block,5),(block,3)), false, 136).
holds(2, in_tower((block,5),(block,4)), false, 136).
holds(2, in_tower((block,5),(block,5)), false, 136).
holds(2, in_tower((block,5),(block,6)), false, 136).
holds(2, in_tower((block,6),(block,1)), false, 136).
holds(2, in_tower((block,6),(block,2)), false, 136).
holds(2, in_tower((block,6),(block,3)), false, 136).
holds(2, in_tower((block,6),(block,4)), true, 136).
holds(2, in_tower((block,6),(block,5)), true, 136).
holds(2, in_tower((block,6),(block,6)), true, 136).
holds(2, on((block,1)), puzzle_room_table, 136).
holds(2, on((block,2)), (block,3), 136).
holds(2, on((block,3)), puzzle_room_table, 136).
holds(2, on((block,4)), (block,5), 136).
holds(2, on((block,5)), (block,6), 136).
holds(2, on((block,6)), puzzle_room_table, 136).
holds(2, tower_base((block,1),puzzle_room_table), true, 136).
holds(2, tower_base((block,2),puzzle_room_table), false, 136).
holds(2, tower_base((block,3),puzzle_room_table), true, 136).
holds(2, tower_base((block,4),puzzle_room_table), false, 136).
holds(2, tower_base((block,5),puzzle_room_table), false, 136).
holds(2, tower_base((block,6),puzzle_room_table), true, 136).
holds(2, unordered_tower((block,1),puzzle_room_table), false, 136).
holds(2, unordered_tower((block,2),puzzle_room_table), false, 136).
holds(2, unordered_tower((block,3),puzzle_room_table), false, 136).
holds(2, unordered_tower((block,4),puzzle_room_table), false, 136).
holds(2, unordered_tower((block,5),puzzle_room_table), false, 136).
holds(2, unordered_tower((block,6),puzzle_room_table), false, 136).

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part ash_goal_state with rules:
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,1))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,2))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_left', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,3))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,4))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,5))', 'V': 'puzzle_room_table_right', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_left', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_middle', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'on((block,6))', 'V': 'puzzle_room_table_right', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 1, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(blue,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'complete_tower(red,puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,1),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,2),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,1))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,2))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,3))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,3),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,4),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,4))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,5))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,5),(block,6))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,1))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,2))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,3))', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,4))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,5))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'in_tower((block,6),(block,6))', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,2)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,1))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,3)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,2))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,3))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,5)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': '(block,6)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,4))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': '(block,6)', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,5))', 'V': 'puzzle_room_table', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,1)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,2)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,3)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,4)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': '(block,5)', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'nothing', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'on((block,6))', 'V': 'puzzle_room_table', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,3),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'tower_base((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'false', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'tower_base((block,6),puzzle_room_table)', 'V': 'true', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,1),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,2),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,3),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,4),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,5),puzzle_room_table)', 'V': 'true', 'T': 'false'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'false', 'T': 'true'})
FinalGoal({'L': 2, 'F': 'unordered_tower((block,6),puzzle_room_table)', 'V': 'true', 'T': 'false'})

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 296 rules into program part ash_goal_state:

final_goal(1, complete_tower(blue,puzzle_room_table), false, false).
final_goal(1, complete_tower(blue,puzzle_room_table), true, true).
final_goal(1, complete_tower(red,puzzle_room_table), false, false).
final_goal(1, complete_tower(red,puzzle_room_table), true, true).
final_goal(1, in_tower((block,1),(block,1)), false, true).
final_goal(1, in_tower((block,1),(block,1)), true, false).
final_goal(1, in_tower((block,1),(block,2)), false, true).
final_goal(1, in_tower((block,1),(block,2)), true, false).
final_goal(1, in_tower((block,1),(block,3)), false, true).
final_goal(1, in_tower((block,1),(block,3)), true, false).
final_goal(1, in_tower((block,1),(block,4)), false, true).
final_goal(1, in_tower((block,1),(block,4)), true, false).
final_goal(1, in_tower((block,1),(block,5)), false, true).
final_goal(1, in_tower((block,1),(block,5)), true, false).
final_goal(1, in_tower((block,1),(block,6)), false, true).
final_goal(1, in_tower((block,1),(block,6)), true, false).
final_goal(1, in_tower((block,2),(block,1)), false, true).
final_goal(1, in_tower((block,2),(block,1)), true, false).
final_goal(1, in_tower((block,2),(block,2)), false, true).
final_goal(1, in_tower((block,2),(block,2)), true, false).
final_goal(1, in_tower((block,2),(block,3)), false, true).
final_goal(1, in_tower((block,2),(block,3)), true, false).
final_goal(1, in_tower((block,2),(block,4)), false, true).
final_goal(1, in_tower((block,2),(block,4)), true, false).
final_goal(1, in_tower((block,2),(block,5)), false, true).
final_goal(1, in_tower((block,2),(block,5)), true, false).
final_goal(1, in_tower((block,2),(block,6)), false, true).
final_goal(1, in_tower((block,2),(block,6)), true, false).
final_goal(1, in_tower((block,3),(block,1)), false, false).
final_goal(1, in_tower((block,3),(block,1)), true, true).
final_goal(1, in_tower((block,3),(block,2)), false, false).
final_goal(1, in_tower((block,3),(block,2)), true, true).
final_goal(1, in_tower((block,3),(block,3)), false, false).
final_goal(1, in_tower((block,3),(block,3)), true, true).
final_goal(1, in_tower((block,3),(block,4)), false, true).
final_goal(1, in_tower((block,3),(block,4)), true, false).
final_goal(1, in_tower((block,3),(block,5)), false, true).
final_goal(1, in_tower((block,3),(block,5)), true, false).
final_goal(1, in_tower((block,3),(block,6)), false, true).
final_goal(1, in_tower((block,3),(block,6)), true, false).
final_goal(1, in_tower((block,4),(block,1)), false, true).
final_goal(1, in_tower((block,4),(block,1)), true, false).
final_goal(1, in_tower((block,4),(block,2)), false, true).
final_goal(1, in_tower((block,4),(block,2)), true, false).
final_goal(1, in_tower((block,4),(block,3)), false, true).
final_goal(1, in_tower((block,4),(block,3)), true, false).
final_goal(1, in_tower((block,4),(block,4)), false, true).
final_goal(1, in_tower((block,4),(block,4)), true, false).
final_goal(1, in_tower((block,4),(block,5)), false, true).
final_goal(1, in_tower((block,4),(block,5)), true, false).
final_goal(1, in_tower((block,4),(block,6)), false, true).
final_goal(1, in_tower((block,4),(block,6)), true, false).
final_goal(1, in_tower((block,5),(block,1)), false, true).
final_goal(1, in_tower((block,5),(block,1)), true, false).
final_goal(1, in_tower((block,5),(block,2)), false, true).
final_goal(1, in_tower((block,5),(block,2)), true, false).
final_goal(1, in_tower((block,5),(block,3)), false, true).
final_goal(1, in_tower((block,5),(block,3)), true, false).
final_goal(1, in_tower((block,5),(block,4)), false, true).
final_goal(1, in_tower((block,5),(block,4)), true, false).
final_goal(1, in_tower((block,5),(block,5)), false, true).
final_goal(1, in_tower((block,5),(block,5)), true, false).
final_goal(1, in_tower((block,5),(block,6)), false, true).
final_goal(1, in_tower((block,5),(block,6)), true, false).
final_goal(1, in_tower((block,6),(block,1)), false, true).
final_goal(1, in_tower((block,6),(block,1)), true, false).
final_goal(1, in_tower((block,6),(block,2)), false, true).
final_goal(1, in_tower((block,6),(block,2)), true, false).
final_goal(1, in_tower((block,6),(block,3)), false, true).
final_goal(1, in_tower((block,6),(block,3)), true, false).
final_goal(1, in_tower((block,6),(block,4)), false, false).
final_goal(1, in_tower((block,6),(block,4)), true, true).
final_goal(1, in_tower((block,6),(block,5)), false, false).
final_goal(1, in_tower((block,6),(block,5)), true, true).
final_goal(1, in_tower((block,6),(block,6)), false, false).
final_goal(1, in_tower((block,6),(block,6)), true, true).
final_goal(1, on((block,1)), (block,2), true).
final_goal(1, on((block,1)), (block,3), false).
final_goal(1, on((block,1)), (block,4), false).
final_goal(1, on((block,1)), (block,5), false).
final_goal(1, on((block,1)), (block,6), false).
final_goal(1, on((block,1)), nothing, false).
final_goal(1, on((block,1)), puzzle_room_table_left, false).
final_goal(1, on((block,1)), puzzle_room_table_middle, false).
final_goal(1, on((block,1)), puzzle_room_table_right, false).
final_goal(1, on((block,2)), (block,1), false).
final_goal(1, on((block,2)), (block,3), true).
final_goal(1, on((block,2)), (block,4), false).
final_goal(1, on((block,2)), (block,5), false).
final_goal(1, on((block,2)), (block,6), false).
final_goal(1, on((block,2)), nothing, false).
final_goal(1, on((block,2)), puzzle_room_table_left, false).
final_goal(1, on((block,2)), puzzle_room_table_middle, false).
final_goal(1, on((block,2)), puzzle_room_table_right, false).
final_goal(1, on((block,3)), (block,1), false).
final_goal(1, on((block,3)), (block,2), false).
final_goal(1, on((block,3)), (block,4), false).
final_goal(1, on((block,3)), (block,5), false).
final_goal(1, on((block,3)), (block,6), false).
final_goal(1, on((block,3)), nothing, false).
final_goal(1, on((block,3)), puzzle_room_table_left, true).
final_goal(1, on((block,3)), puzzle_room_table_middle, false).
final_goal(1, on((block,3)), puzzle_room_table_right, false).
final_goal(1, on((block,4)), (block,1), false).
final_goal(1, on((block,4)), (block,2), false).
final_goal(1, on((block,4)), (block,3), false).
final_goal(1, on((block,4)), (block,5), true).
final_goal(1, on((block,4)), (block,6), false).
final_goal(1, on((block,4)), nothing, false).
final_goal(1, on((block,4)), puzzle_room_table_left, false).
final_goal(1, on((block,4)), puzzle_room_table_middle, false).
final_goal(1, on((block,4)), puzzle_room_table_right, false).
final_goal(1, on((block,5)), (block,1), false).
final_goal(1, on((block,5)), (block,2), false).
final_goal(1, on((block,5)), (block,3), false).
final_goal(1, on((block,5)), (block,4), false).
final_goal(1, on((block,5)), (block,6), true).
final_goal(1, on((block,5)), nothing, false).
final_goal(1, on((block,5)), puzzle_room_table_left, false).
final_goal(1, on((block,5)), puzzle_room_table_middle, false).
final_goal(1, on((block,5)), puzzle_room_table_right, false).
final_goal(1, on((block,6)), (block,1), false).
final_goal(1, on((block,6)), (block,2), false).
final_goal(1, on((block,6)), (block,3), false).
final_goal(1, on((block,6)), (block,4), false).
final_goal(1, on((block,6)), (block,5), false).
final_goal(1, on((block,6)), nothing, false).
final_goal(1, on((block,6)), puzzle_room_table_left, false).
final_goal(1, on((block,6)), puzzle_room_table_middle, false).
final_goal(1, on((block,6)), puzzle_room_table_right, true).
final_goal(1, tower_base((block,1),puzzle_room_table), false, true).
final_goal(1, tower_base((block,1),puzzle_room_table), true, false).
final_goal(1, tower_base((block,2),puzzle_room_table), false, true).
final_goal(1, tower_base((block,2),puzzle_room_table), true, false).
final_goal(1, tower_base((block,3),puzzle_room_table), false, false).
final_goal(1, tower_base((block,3),puzzle_room_table), true, true).
final_goal(1, tower_base((block,4),puzzle_room_table), false, true).
final_goal(1, tower_base((block,4),puzzle_room_table), true, false).
final_goal(1, tower_base((block,5),puzzle_room_table), false, true).
final_goal(1, tower_base((block,5),puzzle_room_table), true, false).
final_goal(1, tower_base((block,6),puzzle_room_table), false, false).
final_goal(1, tower_base((block,6),puzzle_room_table), true, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(1, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(1, unordered_tower((block,6),puzzle_room_table), true, false).
final_goal(2, complete_tower(blue,puzzle_room_table), false, false).
final_goal(2, complete_tower(blue,puzzle_room_table), true, true).
final_goal(2, complete_tower(red,puzzle_room_table), false, false).
final_goal(2, complete_tower(red,puzzle_room_table), true, true).
final_goal(2, in_tower((block,1),(block,1)), false, true).
final_goal(2, in_tower((block,1),(block,1)), true, false).
final_goal(2, in_tower((block,1),(block,2)), false, true).
final_goal(2, in_tower((block,1),(block,2)), true, false).
final_goal(2, in_tower((block,1),(block,3)), false, true).
final_goal(2, in_tower((block,1),(block,3)), true, false).
final_goal(2, in_tower((block,1),(block,4)), false, true).
final_goal(2, in_tower((block,1),(block,4)), true, false).
final_goal(2, in_tower((block,1),(block,5)), false, true).
final_goal(2, in_tower((block,1),(block,5)), true, false).
final_goal(2, in_tower((block,1),(block,6)), false, true).
final_goal(2, in_tower((block,1),(block,6)), true, false).
final_goal(2, in_tower((block,2),(block,1)), false, true).
final_goal(2, in_tower((block,2),(block,1)), true, false).
final_goal(2, in_tower((block,2),(block,2)), false, true).
final_goal(2, in_tower((block,2),(block,2)), true, false).
final_goal(2, in_tower((block,2),(block,3)), false, true).
final_goal(2, in_tower((block,2),(block,3)), true, false).
final_goal(2, in_tower((block,2),(block,4)), false, true).
final_goal(2, in_tower((block,2),(block,4)), true, false).
final_goal(2, in_tower((block,2),(block,5)), false, true).
final_goal(2, in_tower((block,2),(block,5)), true, false).
final_goal(2, in_tower((block,2),(block,6)), false, true).
final_goal(2, in_tower((block,2),(block,6)), true, false).
final_goal(2, in_tower((block,3),(block,1)), false, false).
final_goal(2, in_tower((block,3),(block,1)), true, true).
final_goal(2, in_tower((block,3),(block,2)), false, false).
final_goal(2, in_tower((block,3),(block,2)), true, true).
final_goal(2, in_tower((block,3),(block,3)), false, false).
final_goal(2, in_tower((block,3),(block,3)), true, true).
final_goal(2, in_tower((block,3),(block,4)), false, true).
final_goal(2, in_tower((block,3),(block,4)), true, false).
final_goal(2, in_tower((block,3),(block,5)), false, true).
final_goal(2, in_tower((block,3),(block,5)), true, false).
final_goal(2, in_tower((block,3),(block,6)), false, true).
final_goal(2, in_tower((block,3),(block,6)), true, false).
final_goal(2, in_tower((block,4),(block,1)), false, true).
final_goal(2, in_tower((block,4),(block,1)), true, false).
final_goal(2, in_tower((block,4),(block,2)), false, true).
final_goal(2, in_tower((block,4),(block,2)), true, false).
final_goal(2, in_tower((block,4),(block,3)), false, true).
final_goal(2, in_tower((block,4),(block,3)), true, false).
final_goal(2, in_tower((block,4),(block,4)), false, true).
final_goal(2, in_tower((block,4),(block,4)), true, false).
final_goal(2, in_tower((block,4),(block,5)), false, true).
final_goal(2, in_tower((block,4),(block,5)), true, false).
final_goal(2, in_tower((block,4),(block,6)), false, true).
final_goal(2, in_tower((block,4),(block,6)), true, false).
final_goal(2, in_tower((block,5),(block,1)), false, true).
final_goal(2, in_tower((block,5),(block,1)), true, false).
final_goal(2, in_tower((block,5),(block,2)), false, true).
final_goal(2, in_tower((block,5),(block,2)), true, false).
final_goal(2, in_tower((block,5),(block,3)), false, true).
final_goal(2, in_tower((block,5),(block,3)), true, false).
final_goal(2, in_tower((block,5),(block,4)), false, true).
final_goal(2, in_tower((block,5),(block,4)), true, false).
final_goal(2, in_tower((block,5),(block,5)), false, true).
final_goal(2, in_tower((block,5),(block,5)), true, false).
final_goal(2, in_tower((block,5),(block,6)), false, true).
final_goal(2, in_tower((block,5),(block,6)), true, false).
final_goal(2, in_tower((block,6),(block,1)), false, true).
final_goal(2, in_tower((block,6),(block,1)), true, false).
final_goal(2, in_tower((block,6),(block,2)), false, true).
final_goal(2, in_tower((block,6),(block,2)), true, false).
final_goal(2, in_tower((block,6),(block,3)), false, true).
final_goal(2, in_tower((block,6),(block,3)), true, false).
final_goal(2, in_tower((block,6),(block,4)), false, false).
final_goal(2, in_tower((block,6),(block,4)), true, true).
final_goal(2, in_tower((block,6),(block,5)), false, false).
final_goal(2, in_tower((block,6),(block,5)), true, true).
final_goal(2, in_tower((block,6),(block,6)), false, false).
final_goal(2, in_tower((block,6),(block,6)), true, true).
final_goal(2, on((block,1)), (block,2), true).
final_goal(2, on((block,1)), (block,3), false).
final_goal(2, on((block,1)), (block,4), false).
final_goal(2, on((block,1)), (block,5), false).
final_goal(2, on((block,1)), (block,6), false).
final_goal(2, on((block,1)), nothing, false).
final_goal(2, on((block,1)), puzzle_room_table, false).
final_goal(2, on((block,2)), (block,1), false).
final_goal(2, on((block,2)), (block,3), true).
final_goal(2, on((block,2)), (block,4), false).
final_goal(2, on((block,2)), (block,5), false).
final_goal(2, on((block,2)), (block,6), false).
final_goal(2, on((block,2)), nothing, false).
final_goal(2, on((block,2)), puzzle_room_table, false).
final_goal(2, on((block,3)), (block,1), false).
final_goal(2, on((block,3)), (block,2), false).
final_goal(2, on((block,3)), (block,4), false).
final_goal(2, on((block,3)), (block,5), false).
final_goal(2, on((block,3)), (block,6), false).
final_goal(2, on((block,3)), nothing, false).
final_goal(2, on((block,3)), puzzle_room_table, true).
final_goal(2, on((block,4)), (block,1), false).
final_goal(2, on((block,4)), (block,2), false).
final_goal(2, on((block,4)), (block,3), false).
final_goal(2, on((block,4)), (block,5), true).
final_goal(2, on((block,4)), (block,6), false).
final_goal(2, on((block,4)), nothing, false).
final_goal(2, on((block,4)), puzzle_room_table, false).
final_goal(2, on((block,5)), (block,1), false).
final_goal(2, on((block,5)), (block,2), false).
final_goal(2, on((block,5)), (block,3), false).
final_goal(2, on((block,5)), (block,4), false).
final_goal(2, on((block,5)), (block,6), true).
final_goal(2, on((block,5)), nothing, false).
final_goal(2, on((block,5)), puzzle_room_table, false).
final_goal(2, on((block,6)), (block,1), false).
final_goal(2, on((block,6)), (block,2), false).
final_goal(2, on((block,6)), (block,3), false).
final_goal(2, on((block,6)), (block,4), false).
final_goal(2, on((block,6)), (block,5), false).
final_goal(2, on((block,6)), nothing, false).
final_goal(2, on((block,6)), puzzle_room_table, true).
final_goal(2, tower_base((block,1),puzzle_room_table), false, true).
final_goal(2, tower_base((block,1),puzzle_room_table), true, false).
final_goal(2, tower_base((block,2),puzzle_room_table), false, true).
final_goal(2, tower_base((block,2),puzzle_room_table), true, false).
final_goal(2, tower_base((block,3),puzzle_room_table), false, false).
final_goal(2, tower_base((block,3),puzzle_room_table), true, true).
final_goal(2, tower_base((block,4),puzzle_room_table), false, true).
final_goal(2, tower_base((block,4),puzzle_room_table), true, false).
final_goal(2, tower_base((block,5),puzzle_room_table), false, true).
final_goal(2, tower_base((block,5),puzzle_room_table), true, false).
final_goal(2, tower_base((block,6),puzzle_room_table), false, false).
final_goal(2, tower_base((block,6),puzzle_room_table), true, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,1),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,2),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,2),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,3),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,3),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,4),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,4),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,5),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,5),puzzle_room_table), true, false).
final_goal(2, unordered_tower((block,6),puzzle_room_table), false, true).
final_goal(2, unordered_tower((block,6),puzzle_room_table), true, false).

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Solver options determined:
['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=137']

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program part base with rules:
SubGoal({'L': 2, 'R': 'talos', 'A': 'grasp(manipulator_arm_1,(block,1))', 'F': 'grasping(manipulator_arm_1)', 'V': '(block,1)', 'I': 41})
SubGoal({'L': 2, 'R': 'talos', 'A': 'put(manipulator_arm_1,(block,1),(block,2))', 'F': 'on((block,1))', 'V': '(block,2)', 'I': 42})

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Extending program AST permenantly.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> The logic program was extended with 2 rules into program part base:

sub_goal(2, talos, grasp(manipulator_arm_1,(block,1)), grasping(manipulator_arm_1), (block,1), 41).
sub_goal(2, talos, put(manipulator_arm_1,(block,1),(block,2)), on((block,1)), (block,2), 42).

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Starting new logic program: Logic Program Main #1 :: Generate monolevel plan #1

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Starting new controllable incremental solve call.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = ['--heuristic=Domain', '--stats', '--parallel-mode=6,compete', '--warn=none', '--opt-mode=ignore', '-c', 'minimum_search_length_bound=137']
	count_multiple_models = False
	assumptions = []
	context = [<function HierarchicalPlanner.monolevel_plan.<locals>.get_total_last_sgoals at 0x000002EF16B5C820>]
	incrementor = SolveIncrementor(step_start=136, step_increase=1, step_increase_initial=2, step_end_min=138, step_end_max=300, stop_condition=<SolveResult.Satisfiable: 'SAT'>, increment_limit=None, increment_time_limit=None, cumulative_time_limit=1800, preempt=False)
	base_parts = [BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]
	inc_parts = [IncPart(name='state_module', args=('#inc', 136), range_=None), IncPart(name='plan_module', args=('#inc', 136, 'false', 'true'), range_=None), IncPart(name='optimisation_module', args=('#inc', 136, 'false', 'false', 'false', 'false', 'heuristic'), range_=None), IncPart(name='action_effects', args=('#inc',), range_=None), IncPart(name='action_preconditions', args=('#inc',), range_=None), IncPart(name='variable_relations', args=('#inc',), range_=None), IncPart(name='abstraction_mappings', args=('#inc',), range_=None), IncPart(name='conformance_module', args=('#inc', 136, 41, 42, 'sequential', 'false'), range_=None)]

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Resetting output storing variables.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Output storing variables reset.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building started :: Processing 820 rules

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Program building completed in 0.00476639999942563s

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running one-shot ground and solve of program parts:
[BasePart(name='base', args=()), BasePart(name='abstraction_levels', args=(1, 'refinement')), BasePart(name='instance_module', args=()), BasePart(name='domain_sorts', args=()), BasePart(name='entities', args=()), BasePart(name='static_state', args=()), BasePart(name='ash_initial_state', args=()), BasePart(name='ash_goal_state', args=())]

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('base', []), ('abstraction_levels', [Number(1), Function('refinement', [], True)]), ('instance_module', []), ('domain_sorts', []), ('entities', []), ('static_state', []), ('ash_initial_state', []), ('ash_goal_state', [])]

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.119903s.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.022670s with result Satisfiable.

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Creating solve signal...

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solve signal created:
<ASP_Parser.SolveSignal object at 0x000002EF17784BD0>

[22-02-2022_03-44-06] DEBUG :: ASH Planner Main #1 >> Starting search:
	('self', HierarchicalPlanner(PlanningDomain(['./problems/blocks_world_plus/single_puzzle/BWP_system_laws.lp', './problems/blocks_world_plus/single_puzzle/BWP_problem_large_2.lp'], Anon #1), Main #1, 6, Verbosity.Minimal, True))
	('level', 1)
	('start_step', 136)
	('last_sgoals', 42)
	('finalise', True)
	('sequential_yield', False)
	('detect_interleaving', False)
	('generate_search_space', False)
	('make_observable', False)
	('division_strategy', <core.Strategies.Basic object at 0x000002EEA7CBFA00>)
	('first_sgoals', 41)
	('solve_signal', <ASP_Parser.SolveSignal object at 0x000002EF17784BD0>)

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Running incremental ground and solve of program parts:
#program state_module(#inc, 136). %* None *%
#program plan_module(#inc, 136, false, true). %* None *%
#program optimisation_module(#inc, 136, false, false, false, false, heuristic). %* None *%
#program action_effects(#inc). %* None *%
#program action_preconditions(#inc). %* None *%
#program variable_relations(#inc). %* None *%
#program abstraction_mappings(#inc). %* None *%
#program conformance_module(#inc, 136, 41, 42, sequential, false). %* None *%

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [1]:
Running step bounds   | Previous =    135 : Current =    137
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-06] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(137)]), ('state_module', [Number(136), Number(136)]), ('plan_module', [Number(136), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(136), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(136)]), ('action_preconditions', [Number(136)]), ('variable_relations', [Number(136)]), ('abstraction_mappings', [Number(136)]), ('conformance_module', [Number(136), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)]), ('state_module', [Number(137), Number(136)]), ('plan_module', [Number(137), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(137), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(137)]), ('action_preconditions', [Number(137)]), ('variable_relations', [Number(137)]), ('abstraction_mappings', [Number(137)]), ('conformance_module', [Number(137), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.342874s.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.052560s with result Satisfiable.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [1]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39543420000063634, Incremental time limit = None
Running cumulative time = 0.39543420000063634, Cumulative time limit = 1800
Used memory = (RSS = 2340.601562Mb, VMS = 2363.734375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 2
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 0.342874s, Solving = 0.052560s, Total = 0.395434s, Memory = (RSS = 2340.601562Mb, VMS = 2363.734375Mb), Step range = [136-137]), Calls = 1
Final Model :: Total atoms = 20900, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [2]:
Running step bounds   | Previous =    137 : Current =    138
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(138)]), ('state_module', [Number(138), Number(136)]), ('plan_module', [Number(138), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(138), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(138)]), ('action_preconditions', [Number(138)]), ('variable_relations', [Number(138)]), ('abstraction_mappings', [Number(138)]), ('conformance_module', [Number(138), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165003s.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.010718s with result Unsatisfiable.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [2]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.175721200001135, Incremental time limit = None
Running cumulative time = 0.5711554000017713, Cumulative time limit = 1800
Used memory = (RSS = 2340.644531Mb, VMS = 2363.734375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [3]:
Running step bounds   | Previous =    138 : Current =    139
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(139)]), ('state_module', [Number(139), Number(136)]), ('plan_module', [Number(139), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(139), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(139)]), ('action_preconditions', [Number(139)]), ('variable_relations', [Number(139)]), ('abstraction_mappings', [Number(139)]), ('conformance_module', [Number(139), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.165761s.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.015261s with result Unsatisfiable.

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [3]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.1810218000000532, Incremental time limit = None
Running cumulative time = 0.7521772000018245, Cumulative time limit = 1800
Used memory = (RSS = 2340.664062Mb, VMS = 2363.734375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [4]:
Running step bounds   | Previous =    139 : Current =    140
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-07] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(140)]), ('state_module', [Number(140), Number(136)]), ('plan_module', [Number(140), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(140), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(140)]), ('action_preconditions', [Number(140)]), ('variable_relations', [Number(140)]), ('abstraction_mappings', [Number(140)]), ('conformance_module', [Number(140), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.245412s.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.033365s with result Unsatisfiable.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [4]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.2787767999998323, Incremental time limit = None
Running cumulative time = 1.0309540000016568, Cumulative time limit = 1800
Used memory = (RSS = 2342.171875Mb, VMS = 2365.015625Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [5]:
Running step bounds   | Previous =    140 : Current =    141
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(141)]), ('state_module', [Number(141), Number(136)]), ('plan_module', [Number(141), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(141), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(141)]), ('action_preconditions', [Number(141)]), ('variable_relations', [Number(141)]), ('abstraction_mappings', [Number(141)]), ('conformance_module', [Number(141), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.256973s.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.041260s with result Unsatisfiable.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [5]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.298232399999506, Incremental time limit = None
Running cumulative time = 1.3291864000011628, Cumulative time limit = 1800
Used memory = (RSS = 2342.777344Mb, VMS = 2365.531250Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [6]:
Running step bounds   | Previous =    141 : Current =    142
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(142)]), ('state_module', [Number(142), Number(136)]), ('plan_module', [Number(142), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(142), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(142)]), ('action_preconditions', [Number(142)]), ('variable_relations', [Number(142)]), ('abstraction_mappings', [Number(142)]), ('conformance_module', [Number(142), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.273904s.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.045089s with result Unsatisfiable.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [6]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.31899329999941983, Incremental time limit = None
Running cumulative time = 1.6481797000005827, Cumulative time limit = 1800
Used memory = (RSS = 2349.605469Mb, VMS = 2373.808594Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [7]:
Running step bounds   | Previous =    142 : Current =    143
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(143)]), ('state_module', [Number(143), Number(136)]), ('plan_module', [Number(143), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(143), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(143)]), ('action_preconditions', [Number(143)]), ('variable_relations', [Number(143)]), ('abstraction_mappings', [Number(143)]), ('conformance_module', [Number(143), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.280815s.

[22-02-2022_03-44-08] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.044235s with result Unsatisfiable.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [7]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.3250496999999086, Incremental time limit = None
Running cumulative time = 1.9732294000004913, Cumulative time limit = 1800
Used memory = (RSS = 2352.273438Mb, VMS = 2375.402344Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [8]:
Running step bounds   | Previous =    143 : Current =    144
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(144)]), ('state_module', [Number(144), Number(136)]), ('plan_module', [Number(144), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(144), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(144)]), ('action_preconditions', [Number(144)]), ('variable_relations', [Number(144)]), ('abstraction_mappings', [Number(144)]), ('conformance_module', [Number(144), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.285873s.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.050796s with result Unsatisfiable.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [8]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.33666940000057366, Incremental time limit = None
Running cumulative time = 2.309898800001065, Cumulative time limit = 1800
Used memory = (RSS = 2356.046875Mb, VMS = 2382.136719Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [9]:
Running step bounds   | Previous =    144 : Current =    145
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(145)]), ('state_module', [Number(145), Number(136)]), ('plan_module', [Number(145), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(145), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(145)]), ('action_preconditions', [Number(145)]), ('variable_relations', [Number(145)]), ('abstraction_mappings', [Number(145)]), ('conformance_module', [Number(145), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.293637s.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.051722s with result Unsatisfiable.

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [9]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.345358300000953, Incremental time limit = None
Running cumulative time = 2.655257100002018, Cumulative time limit = 1800
Used memory = (RSS = 2358.351562Mb, VMS = 2382.667969Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [10]:
Running step bounds   | Previous =    145 : Current =    146
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-09] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(146)]), ('state_module', [Number(146), Number(136)]), ('plan_module', [Number(146), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(146), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(146)]), ('action_preconditions', [Number(146)]), ('variable_relations', [Number(146)]), ('abstraction_mappings', [Number(146)]), ('conformance_module', [Number(146), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.299015s.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.055872s with result Unsatisfiable.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [10]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.35488729999997304, Incremental time limit = None
Running cumulative time = 3.010144400001991, Cumulative time limit = 1800
Used memory = (RSS = 2361.535156Mb, VMS = 2385.316406Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [11]:
Running step bounds   | Previous =    146 : Current =    147
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(147)]), ('state_module', [Number(147), Number(136)]), ('plan_module', [Number(147), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(147), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(147)]), ('action_preconditions', [Number(147)]), ('variable_relations', [Number(147)]), ('abstraction_mappings', [Number(147)]), ('conformance_module', [Number(147), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.307466s.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.065523s with result Unsatisfiable.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [11]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.37298850000115635, Incremental time limit = None
Running cumulative time = 3.3831329000031474, Cumulative time limit = 1800
Used memory = (RSS = 2368.308594Mb, VMS = 2397.960938Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [12]:
Running step bounds   | Previous =    147 : Current =    148
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(148)]), ('state_module', [Number(148), Number(136)]), ('plan_module', [Number(148), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(148), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(148)]), ('action_preconditions', [Number(148)]), ('variable_relations', [Number(148)]), ('abstraction_mappings', [Number(148)]), ('conformance_module', [Number(148), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.313815s.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.079865s with result Unsatisfiable.

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [12]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.39367959999981395, Incremental time limit = None
Running cumulative time = 3.7768125000029613, Cumulative time limit = 1800
Used memory = (RSS = 2370.914062Mb, VMS = 2398.492188Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [13]:
Running step bounds   | Previous =    148 : Current =    149
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-10] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(149)]), ('state_module', [Number(149), Number(136)]), ('plan_module', [Number(149), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(149), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(149)]), ('action_preconditions', [Number(149)]), ('variable_relations', [Number(149)]), ('abstraction_mappings', [Number(149)]), ('conformance_module', [Number(149), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.321092s.

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.108001s with result Unsatisfiable.

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [13]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4290925999994215, Incremental time limit = None
Running cumulative time = 4.205905100002383, Cumulative time limit = 1800
Used memory = (RSS = 2373.746094Mb, VMS = 2399.726562Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [14]:
Running step bounds   | Previous =    149 : Current =    150
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(150)]), ('state_module', [Number(150), Number(136)]), ('plan_module', [Number(150), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(150), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(150)]), ('action_preconditions', [Number(150)]), ('variable_relations', [Number(150)]), ('abstraction_mappings', [Number(150)]), ('conformance_module', [Number(150), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.317273s.

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.147976s with result Unsatisfiable.

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [14]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.4652496999997311, Incremental time limit = None
Running cumulative time = 4.671154800002114, Cumulative time limit = 1800
Used memory = (RSS = 2376.519531Mb, VMS = 2400.253906Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [15]:
Running step bounds   | Previous =    150 : Current =    151
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-11] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(151)]), ('state_module', [Number(151), Number(136)]), ('plan_module', [Number(151), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(151), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(151)]), ('action_preconditions', [Number(151)]), ('variable_relations', [Number(151)]), ('abstraction_mappings', [Number(151)]), ('conformance_module', [Number(151), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.329424s.

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.187456s with result Unsatisfiable.

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [15]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.5168801000008898, Incremental time limit = None
Running cumulative time = 5.188034900003004, Cumulative time limit = 1800
Used memory = (RSS = 2380.187500Mb, VMS = 2414.261719Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [16]:
Running step bounds   | Previous =    151 : Current =    152
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(152)]), ('state_module', [Number(152), Number(136)]), ('plan_module', [Number(152), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(152), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(152)]), ('action_preconditions', [Number(152)]), ('variable_relations', [Number(152)]), ('abstraction_mappings', [Number(152)]), ('conformance_module', [Number(152), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.334692s.

[22-02-2022_03-44-12] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.321126s with result Unsatisfiable.

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [16]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.6558187000000544, Incremental time limit = None
Running cumulative time = 5.843853600003058, Cumulative time limit = 1800
Used memory = (RSS = 2383.027344Mb, VMS = 2416.289062Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [17]:
Running step bounds   | Previous =    152 : Current =    153
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(153)]), ('state_module', [Number(153), Number(136)]), ('plan_module', [Number(153), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(153), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(153)]), ('action_preconditions', [Number(153)]), ('variable_relations', [Number(153)]), ('abstraction_mappings', [Number(153)]), ('conformance_module', [Number(153), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.340088s.

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.434556s with result Unsatisfiable.

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [17]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.774643400000059, Incremental time limit = None
Running cumulative time = 6.618497000003117, Cumulative time limit = 1800
Used memory = (RSS = 2385.992188Mb, VMS = 2416.816406Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [18]:
Running step bounds   | Previous =    153 : Current =    154
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-13] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(154)]), ('state_module', [Number(154), Number(136)]), ('plan_module', [Number(154), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(154), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(154)]), ('action_preconditions', [Number(154)]), ('variable_relations', [Number(154)]), ('abstraction_mappings', [Number(154)]), ('conformance_module', [Number(154), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.353458s.

[22-02-2022_03-44-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.542733s with result Unsatisfiable.

[22-02-2022_03-44-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [18]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.896190899999965, Incremental time limit = None
Running cumulative time = 7.514687900003082, Cumulative time limit = 1800
Used memory = (RSS = 2390.691406Mb, VMS = 2420.597656Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [19]:
Running step bounds   | Previous =    154 : Current =    155
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-14] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(155)]), ('state_module', [Number(155), Number(136)]), ('plan_module', [Number(155), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(155), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(155)]), ('action_preconditions', [Number(155)]), ('variable_relations', [Number(155)]), ('abstraction_mappings', [Number(155)]), ('conformance_module', [Number(155), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.350022s.

[22-02-2022_03-44-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.643021s with result Unsatisfiable.

[22-02-2022_03-44-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [19]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 0.9930426000000807, Incremental time limit = None
Running cumulative time = 8.507730500003163, Cumulative time limit = 1800
Used memory = (RSS = 2395.660156Mb, VMS = 2423.421875Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [20]:
Running step bounds   | Previous =    155 : Current =    156
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-15] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(156)]), ('state_module', [Number(156), Number(136)]), ('plan_module', [Number(156), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(156), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(156)]), ('action_preconditions', [Number(156)]), ('variable_relations', [Number(156)]), ('abstraction_mappings', [Number(156)]), ('conformance_module', [Number(156), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.354401s.

[22-02-2022_03-44-16] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 0.912628s with result Unsatisfiable.

[22-02-2022_03-44-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [20]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.2670293999999558, Incremental time limit = None
Running cumulative time = 9.774759900003119, Cumulative time limit = 1800
Used memory = (RSS = 2399.285156Mb, VMS = 2424.734375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [21]:
Running step bounds   | Previous =    156 : Current =    157
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(157)]), ('state_module', [Number(157), Number(136)]), ('plan_module', [Number(157), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(157), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(157)]), ('action_preconditions', [Number(157)]), ('variable_relations', [Number(157)]), ('abstraction_mappings', [Number(157)]), ('conformance_module', [Number(157), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.362418s.

[22-02-2022_03-44-17] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.343630s with result Unsatisfiable.

[22-02-2022_03-44-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [21]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.7060480000009193, Incremental time limit = None
Running cumulative time = 11.480807900004038, Cumulative time limit = 1800
Used memory = (RSS = 2405.449219Mb, VMS = 2449.375000Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [22]:
Running step bounds   | Previous =    157 : Current =    158
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-18] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(158)]), ('state_module', [Number(158), Number(136)]), ('plan_module', [Number(158), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(158), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(158)]), ('action_preconditions', [Number(158)]), ('variable_relations', [Number(158)]), ('abstraction_mappings', [Number(158)]), ('conformance_module', [Number(158), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.366526s.

[22-02-2022_03-44-19] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 1.614658s with result Unsatisfiable.

[22-02-2022_03-44-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [22]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 1.9811845999993238, Incremental time limit = None
Running cumulative time = 13.461992500003362, Cumulative time limit = 1800
Used memory = (RSS = 2411.082031Mb, VMS = 2452.214844Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [23]:
Running step bounds   | Previous =    158 : Current =    159
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-20] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(159)]), ('state_module', [Number(159), Number(136)]), ('plan_module', [Number(159), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(159), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(159)]), ('action_preconditions', [Number(159)]), ('variable_relations', [Number(159)]), ('abstraction_mappings', [Number(159)]), ('conformance_module', [Number(159), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.374497s.

[22-02-2022_03-44-21] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.168404s with result Unsatisfiable.

[22-02-2022_03-44-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [23]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.542901300000267, Incremental time limit = None
Running cumulative time = 16.00489380000363, Cumulative time limit = 1800
Used memory = (RSS = 2418.921875Mb, VMS = 2459.109375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [24]:
Running step bounds   | Previous =    159 : Current =    160
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(160)]), ('state_module', [Number(160), Number(136)]), ('plan_module', [Number(160), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(160), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(160)]), ('action_preconditions', [Number(160)]), ('variable_relations', [Number(160)]), ('abstraction_mappings', [Number(160)]), ('conformance_module', [Number(160), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.384740s.

[22-02-2022_03-44-23] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.905849s with result Unsatisfiable.

[22-02-2022_03-44-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [24]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.290588700000626, Incremental time limit = None
Running cumulative time = 19.295482500004255, Cumulative time limit = 1800
Used memory = (RSS = 2424.945312Mb, VMS = 2463.359375Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [25]:
Running step bounds   | Previous =    160 : Current =    161
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-26] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(161)]), ('state_module', [Number(161), Number(136)]), ('plan_module', [Number(161), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(161), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(161)]), ('action_preconditions', [Number(161)]), ('variable_relations', [Number(161)]), ('abstraction_mappings', [Number(161)]), ('conformance_module', [Number(161), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.387887s.

[22-02-2022_03-44-27] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 3.513848s with result Unsatisfiable.

[22-02-2022_03-44-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [25]:
Result = SolveResult.Unsatisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 3.9017350000003717, Incremental time limit = None
Running cumulative time = 23.197217500004626, Cumulative time limit = 1800
Used memory = (RSS = 2427.410156Mb, VMS = 2464.718750Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Beginning incremental call [26]:
Running step bounds   | Previous =    161 : Current =    162
Incrementor step ends | Minimum  =    138 : Maximum =    300

[22-02-2022_03-44-30] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding program parts:
[('check', [Number(162)]), ('state_module', [Number(162), Number(136)]), ('plan_module', [Number(162), Number(136), Function('false', [], True), Function('true', [], True)]), ('optimisation_module', [Number(162), Number(136), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('false', [], True), Function('heuristic', [], True)]), ('action_effects', [Number(162)]), ('action_preconditions', [Number(162)]), ('variable_relations', [Number(162)]), ('abstraction_mappings', [Number(162)]), ('conformance_module', [Number(162), Number(136), Number(41), Number(42), Function('sequential', [], True), Function('false', [], True)])]

[22-02-2022_03-44-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Grounding completed in 0.397227s.

[22-02-2022_03-44-31] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving program.

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Solving completed in 2.119003s with result Satisfiable.

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Completed incremental call [26]:
Result = SolveResult.Satisfiable, Stop condition = SolveResult.Satisfiable
Increment time = 2.5162301999998817, Incremental time limit = None
Running cumulative time = 25.713447700004508, Cumulative time limit = 1800
Used memory = (RSS = 2439.093750Mb, VMS = 2473.871094Mb), Total system virtual memory = 16324.0078125Mb

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental solving has found an answer set:
Result :: SATISFIABLE : SEARCH INTERRUPTED : Total models = 3
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.204292s, Solving = 17.509155s, Total = 25.713448s, Memory = (RSS = 2439.093750Mb, VMS = 2473.871094Mb), Step range = [136-162]), Calls = 26
Final Model :: Total atoms = 34161, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental statistics:
1 : Statistics :: Grounding = 0.342874s, Solving = 0.052560s, Total = 0.395434s, Memory = (RSS = 2340.601562Mb, VMS = 2363.734375Mb), Step range = [136-137]
2 : Statistics :: Grounding = 0.165003s, Solving = 0.010718s, Total = 0.175721s, Memory = (RSS = 2340.644531Mb, VMS = 2363.734375Mb), Step range = [138-138]
3 : Statistics :: Grounding = 0.165761s, Solving = 0.015261s, Total = 0.181022s, Memory = (RSS = 2340.664062Mb, VMS = 2363.734375Mb), Step range = [139-139]
4 : Statistics :: Grounding = 0.245412s, Solving = 0.033365s, Total = 0.278777s, Memory = (RSS = 2342.171875Mb, VMS = 2365.015625Mb), Step range = [140-140]
5 : Statistics :: Grounding = 0.256973s, Solving = 0.041260s, Total = 0.298232s, Memory = (RSS = 2342.777344Mb, VMS = 2365.531250Mb), Step range = [141-141]
6 : Statistics :: Grounding = 0.273904s, Solving = 0.045089s, Total = 0.318993s, Memory = (RSS = 2349.605469Mb, VMS = 2373.808594Mb), Step range = [142-142]
7 : Statistics :: Grounding = 0.280815s, Solving = 0.044235s, Total = 0.325050s, Memory = (RSS = 2352.273438Mb, VMS = 2375.402344Mb), Step range = [143-143]
8 : Statistics :: Grounding = 0.285873s, Solving = 0.050796s, Total = 0.336669s, Memory = (RSS = 2356.046875Mb, VMS = 2382.136719Mb), Step range = [144-144]
9 : Statistics :: Grounding = 0.293637s, Solving = 0.051722s, Total = 0.345358s, Memory = (RSS = 2358.351562Mb, VMS = 2382.667969Mb), Step range = [145-145]
10 : Statistics :: Grounding = 0.299015s, Solving = 0.055872s, Total = 0.354887s, Memory = (RSS = 2361.535156Mb, VMS = 2385.316406Mb), Step range = [146-146]
11 : Statistics :: Grounding = 0.307466s, Solving = 0.065523s, Total = 0.372989s, Memory = (RSS = 2368.308594Mb, VMS = 2397.960938Mb), Step range = [147-147]
12 : Statistics :: Grounding = 0.313815s, Solving = 0.079865s, Total = 0.393680s, Memory = (RSS = 2370.914062Mb, VMS = 2398.492188Mb), Step range = [148-148]
13 : Statistics :: Grounding = 0.321092s, Solving = 0.108001s, Total = 0.429093s, Memory = (RSS = 2373.746094Mb, VMS = 2399.726562Mb), Step range = [149-149]
14 : Statistics :: Grounding = 0.317273s, Solving = 0.147976s, Total = 0.465250s, Memory = (RSS = 2376.519531Mb, VMS = 2400.253906Mb), Step range = [150-150]
15 : Statistics :: Grounding = 0.329424s, Solving = 0.187456s, Total = 0.516880s, Memory = (RSS = 2380.187500Mb, VMS = 2414.261719Mb), Step range = [151-151]
16 : Statistics :: Grounding = 0.334692s, Solving = 0.321126s, Total = 0.655819s, Memory = (RSS = 2383.027344Mb, VMS = 2416.289062Mb), Step range = [152-152]
17 : Statistics :: Grounding = 0.340088s, Solving = 0.434556s, Total = 0.774643s, Memory = (RSS = 2385.992188Mb, VMS = 2416.816406Mb), Step range = [153-153]
18 : Statistics :: Grounding = 0.353458s, Solving = 0.542733s, Total = 0.896191s, Memory = (RSS = 2390.691406Mb, VMS = 2420.597656Mb), Step range = [154-154]
19 : Statistics :: Grounding = 0.350022s, Solving = 0.643021s, Total = 0.993043s, Memory = (RSS = 2395.660156Mb, VMS = 2423.421875Mb), Step range = [155-155]
20 : Statistics :: Grounding = 0.354401s, Solving = 0.912628s, Total = 1.267029s, Memory = (RSS = 2399.285156Mb, VMS = 2424.734375Mb), Step range = [156-156]
21 : Statistics :: Grounding = 0.362418s, Solving = 1.343630s, Total = 1.706048s, Memory = (RSS = 2405.449219Mb, VMS = 2449.375000Mb), Step range = [157-157]
22 : Statistics :: Grounding = 0.366526s, Solving = 1.614658s, Total = 1.981185s, Memory = (RSS = 2411.082031Mb, VMS = 2452.214844Mb), Step range = [158-158]
23 : Statistics :: Grounding = 0.374497s, Solving = 2.168404s, Total = 2.542901s, Memory = (RSS = 2418.921875Mb, VMS = 2459.109375Mb), Step range = [159-159]
24 : Statistics :: Grounding = 0.384740s, Solving = 2.905849s, Total = 3.290589s, Memory = (RSS = 2424.945312Mb, VMS = 2463.359375Mb), Step range = [160-160]
25 : Statistics :: Grounding = 0.387887s, Solving = 3.513848s, Total = 3.901735s, Memory = (RSS = 2427.410156Mb, VMS = 2464.718750Mb), Step range = [161-161]
26 : Statistics :: Grounding = 0.397227s, Solving = 2.119003s, Total = 2.516230s, Memory = (RSS = 2439.093750Mb, VMS = 2473.871094Mb), Step range = [162-162]

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Incremental ground and solve completed in 25.713448s due to: Stop condition reached.

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Stopping incremental solve call.

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Freeing held grounding...

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Setting input storing variables:
	solver_options = []
	count_multiple_models = False
	assumptions = []
	context = []
	incrementor = None
	base_parts = #program base().
	inc_parts = #program step(#inc). %* None *%

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Input storing variables set.

[22-02-2022_03-44-33] DEBUG :: Logic Program Main #1 :: Generate monolevel plan #1 >> Held grounding freed successfully.

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Previous conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36, 132: 37, 133: 37, 134: 38, 135: 39, 136: 40}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131, 37: 133, 38: 134, 39: 135, 40: 136}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Updated conformance mappings:
Level = 1 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 2, 9: 2, 10: 2, 11: 2, 12: 2, 13: 2, 14: 3, 15: 3, 16: 4, 17: 5, 18: 6, 19: 6, 20: 6, 21: 6, 22: 6, 23: 6, 24: 6, 25: 6, 26: 6, 27: 6, 28: 6, 29: 6, 30: 7, 31: 8, 32: 9, 33: 10, 34: 11, 35: 11, 36: 11, 37: 11, 38: 11, 39: 11, 40: 11, 41: 11, 42: 11, 43: 12, 44: 13, 45: 14, 46: 15, 47: 16, 48: 17, 49: 17, 50: 17, 51: 17, 52: 17, 53: 17, 54: 17, 55: 18, 56: 18, 57: 18, 58: 18, 59: 18, 60: 18, 61: 18, 62: 18, 63: 18, 64: 19, 65: 19, 66: 19, 67: 19, 68: 19, 69: 19, 70: 19, 71: 20, 72: 21, 73: 22, 74: 23, 75: 23, 76: 23, 77: 23, 78: 23, 79: 23, 80: 23, 81: 24, 82: 24, 83: 24, 84: 24, 85: 24, 86: 24, 87: 24, 88: 24, 89: 24, 90: 25, 91: 26, 92: 26, 93: 26, 94: 26, 95: 26, 96: 26, 97: 26, 98: 26, 99: 26, 100: 26, 101: 27, 102: 28, 103: 28, 104: 28, 105: 28, 106: 28, 107: 28, 108: 28, 109: 29, 110: 29, 111: 29, 112: 29, 113: 29, 114: 29, 115: 29, 116: 29, 117: 29, 118: 30, 119: 30, 120: 30, 121: 30, 122: 30, 123: 30, 124: 30, 125: 31, 126: 32, 127: 33, 128: 33, 129: 34, 130: 35, 131: 36, 132: 37, 133: 37, 134: 38, 135: 39, 136: 40, 137: 41, 138: 41, 139: 41, 140: 41, 141: 41, 142: 41, 143: 41, 144: 41, 145: 41, 146: 41, 147: 41, 148: 41, 149: 41, 150: 41, 151: 41, 152: 41, 153: 41, 154: 41, 155: 41, 156: 41, 157: 41, 158: 41, 159: 41, 160: 41, 161: 41, 162: 42}
Sub-goal achievement steps: {1: 7, 2: 13, 3: 15, 4: 16, 5: 17, 6: 29, 7: 30, 8: 31, 9: 32, 10: 33, 11: 42, 12: 43, 13: 44, 14: 45, 15: 46, 16: 47, 17: 54, 18: 63, 19: 70, 20: 71, 21: 72, 22: 73, 23: 80, 24: 89, 25: 90, 26: 100, 27: 101, 28: 108, 29: 117, 30: 124, 31: 125, 32: 126, 33: 128, 34: 129, 35: 130, 36: 131, 37: 133, 38: 134, 39: 135, 40: 136, 41: 161, 42: 162}

Level = 2 >> Current sub-goals: {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 2, 12: 2, 13: 2, 14: 2, 15: 2, 16: 3, 17: 4, 18: 4, 19: 5, 20: 5, 21: 6, 22: 7, 23: 7, 24: 7, 25: 8, 26: 8, 27: 9, 28: 9, 29: 9, 30: 10, 31: 10, 32: 11, 33: 12, 34: 12, 35: 13, 36: 14, 37: 15, 38: 16, 39: 17, 40: 18, 41: 19, 42: 20}
Sub-goal achievement steps: {1: 10, 2: 15, 3: 16, 4: 18, 5: 20, 6: 21, 7: 24, 8: 26, 9: 29, 10: 31, 11: 32, 12: 34, 13: 35, 14: 36, 15: 37, 16: 38, 17: 39, 18: 40, 19: 41, 20: 42}

Level = 3 >> Current sub-goals: {}
Sub-goal achievement steps: {}

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Search ended :: Last achieved goal index = 42, Last requested goal index = 42, The problem was 100.0% solved:
Search finished as expected, the requested partial problem has been solved entirely.

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Monolevel plan generated successfully:
Result :: SATISFIABLE : SEARCH INTERRUPTED : COMPLETE PLAN OBTAINED
IncrementalStatistics :: Cumulative = (Statistics :: Grounding = 8.204292s, Solving = 17.509155s, Total = 25.713448s, Memory = (RSS = 2439.093750Mb, VMS = 2473.871094Mb), Step range = [136-162]), Calls = 26
Model :: Total atoms = 34161, Cost = (), Optimality proven = False, Number = 1, Thread ID = 5, Model type = ModelType.StableModel

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> 

          ========================================          
                Plan at abstraction level 1                 
          ========================================          
                 Steps = 26 :: Actions = 26                 
                ----------------------------                

Step 1:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,1,0))
Step 2:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,2,0))
Step 3:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,0))
Step 4:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,3,1))
Step 5:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,4,1))
Step 6:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((starting_room,5,1))
Step 7:
    Current Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 1] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,4,0))
Step 8:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,0))
Step 9:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,0))
Step 10:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,0))
Step 11:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,0))
Step 12:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 13:
    Current Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 2] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 14:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(puzzle_room_door_handle_outer))
Step 15:
    Current Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 3] talos : grasp(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = puzzle_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,puzzle_room_door_handle_outer)
Step 16:
    Current Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Achieved Sub-goals:
        [Index = 4] talos : actuate(manipulator_arm_2,puzzle_room_door) -> configuration(puzzle_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,puzzle_room_door)
Step 17:
    Current Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 5] talos : release(manipulator_arm_2,puzzle_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,puzzle_room_door_handle_outer)
Step 18:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 19:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 20:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 21:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 22:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 23:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 24:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 25:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 26:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 27:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 28:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with(store_room_door_handle_outer))
Step 29:
    Current Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Achieved Sub-goals:
        [Index = 6] talos : grasp(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = store_room_door_handle_outer
    Planned actions:
        talos : grasp(manipulator_end_2,store_room_door_handle_outer)
Step 30:
    Current Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Achieved Sub-goals:
        [Index = 7] talos : actuate(manipulator_arm_2,store_room_door) -> configuration(store_room_door) = open
    Planned actions:
        talos : actuate(manipulator_end_2,store_room_door)
Step 31:
    Current Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 8] talos : release(manipulator_arm_2,store_room_door_handle_outer) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,store_room_door_handle_outer)
Step 32:
    Current Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 9] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 33:
    Current Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 10] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 34:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 35:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 36:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 37:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 38:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 39:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 40:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 41:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,6)))
Step 42:
    Current Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 11] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 43:
    Current Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 12] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : grasp(manipulator_end_2,(block,6))
Step 44:
    Current Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Achieved Sub-goals:
        [Index = 13] talos : grasp(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = (block,6)
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,5)))
Step 45:
    Current Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 14] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 46:
    Current Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Achieved Sub-goals:
        [Index = 15] talos : grasp(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = (block,5)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,5))
Step 47:
    Current Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Achieved Sub-goals:
        [Index = 16] talos : configure(manipulator_arm_1,retracted) -> configuration(manipulator_arm_1) = retracted
    Planned actions:
        talos : configure(manipulator_limb_1,retracted)
Step 48:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 49:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 50:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 51:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,0))
Step 52:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,0))
Step 53:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 54:
    Current Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 17] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 55:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 56:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 57:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 58:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 59:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 60:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 61:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 62:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 63:
    Current Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 18] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 64:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 65:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,1))
Step 66:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 67:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 68:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 69:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 70:
    Current Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 19] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 71:
    Current Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 20] talos : put(manipulator_arm_2,(block,6),puzzle_room_table) -> on((block,6)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_2,(block,6),puzzle_room_table_middle)
Step 72:
    Current Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Achieved Sub-goals:
        [Index = 21] talos : release(manipulator_arm_2,(block,6)) -> grasping(manipulator_arm_2) = nothing
    Planned actions:
        talos : release(manipulator_end_2,(block,6))
Step 73:
    Current Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 22] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 74:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 75:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 76:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 77:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 78:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,0))
Step 79:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 80:
    Current Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 23] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,8,1))
Step 81:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 82:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 83:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 84:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 85:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 86:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 87:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 88:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,0,1))
Step 89:
    Current Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Achieved Sub-goals:
        [Index = 24] talos : move(store_room) -> in(talos) = store_room
    Planned actions:
        talos : move((store_room,5,1))
Step 90:
    Current Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 25] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 91:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 92:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 93:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 94:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,1))
Step 95:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 96:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 97:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,0,0))
Step 98:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 99:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 100:
    Current Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Achieved Sub-goals:
        [Index = 26] talos : grasp(manipulator_arm_2,(block,4)) -> grasping(manipulator_arm_2) = (block,4)
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 101:
    Current Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Achieved Sub-goals:
        [Index = 27] talos : configure(manipulator_arm_2,retracted) -> configuration(manipulator_arm_2) = retracted
    Planned actions:
        talos : configure(manipulator_limb_2,retracted)
Step 102:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,1,0))
Step 103:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,2,0))
Step 104:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,0))
Step 105:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,3,1))
Step 106:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,4,1))
Step 107:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
    Planned actions:
        talos : move((store_room,5,1))
Step 108:
    Current Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Achieved Sub-goals:
        [Index = 28] talos : move(hallway) -> in(talos) = hallway
    Planned actions:
        talos : move((hallway,0,1))
Step 109:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,1,1))
Step 110:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,2,1))
Step 111:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,3,1))
Step 112:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,4,1))
Step 113:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,5,1))
Step 114:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,6,1))
Step 115:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,7,1))
Step 116:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
    Planned actions:
        talos : move((hallway,8,1))
Step 117:
    Current Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Achieved Sub-goals:
        [Index = 29] talos : move(puzzle_room) -> in(talos) = puzzle_room
    Planned actions:
        talos : move((puzzle_room,0,1))
Step 118:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,1))
Step 119:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,1,0))
Step 120:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,2,0))
Step 121:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,3,0))
Step 122:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,4,0))
Step 123:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : move((puzzle_room,5,0))
Step 124:
    Current Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Achieved Sub-goals:
        [Index = 30] talos : configure(manipulator_arm_1,extended) -> configuration(manipulator_arm_1) = extended
    Planned actions:
        talos : configure(manipulator_limb_1,extended)
Step 125:
    Current Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Achieved Sub-goals:
        [Index = 31] talos : put(manipulator_arm_1,(block,5),(block,6)) -> on((block,5)) = (block,6)
    Planned actions:
        talos : put(manipulator_end_1,(block,5),(block,6))
Step 126:
    Current Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 32] talos : release(manipulator_arm_1,(block,5)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,5))
Step 127:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,3)))
Step 128:
    Current Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Achieved Sub-goals:
        [Index = 33] talos : configure(manipulator_arm_2,extended) -> configuration(manipulator_arm_2) = extended
    Planned actions:
        talos : configure(manipulator_limb_2,extended)
Step 129:
    Current Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Achieved Sub-goals:
        [Index = 34] talos : grasp(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = (block,3)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,3))
Step 130:
    Current Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Achieved Sub-goals:
        [Index = 35] talos : put(manipulator_arm_1,(block,3),puzzle_room_table) -> on((block,3)) = puzzle_room_table
    Planned actions:
        talos : put(manipulator_end_1,(block,3),puzzle_room_table_middle)
Step 131:
    Current Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 36] talos : release(manipulator_arm_1,(block,3)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,3))
Step 132:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 133:
    Current Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Achieved Sub-goals:
        [Index = 37] talos : put(manipulator_arm_2,(block,4),(block,5)) -> on((block,4)) = (block,5)
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 134:
    Current Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Achieved Sub-goals:
        [Index = 38] talos : grasp(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = (block,2)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 135:
    Current Sub-goals:
        [Index = 39] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Achieved Sub-goals:
        [Index = 39] talos : put(manipulator_arm_1,(block,2),(block,3)) -> on((block,2)) = (block,3)
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 136:
    Current Sub-goals:
        [Index = 40] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Achieved Sub-goals:
        [Index = 40] talos : release(manipulator_arm_1,(block,2)) -> grasping(manipulator_arm_1) = nothing
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 137:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : lift(manipulator_end_2,(block,4))
Step 138:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,2)))
Step 139:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,(block,4))
Step 140:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,3)))
Step 141:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,2))
Step 142:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,2),puzzle_room_table_left)
Step 143:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,3))
Step 144:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_2,(block,3),puzzle_room_table_left)
Step 145:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,(block,3))
Step 146:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,2),(block,3))
Step 147:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,2))
Step 148:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,5)))
Step 149:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,6)))
Step 150:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,5))
Step 151:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,1))
Step 152:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_1,(block,6))
Step 153:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_1,(block,6),puzzle_room_table_right)
Step 154:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_1,(block,6))
Step 155:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_1,aligned_with((block,1)))
Step 156:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_2,(block,5),(block,6))
Step 157:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : release(manipulator_end_2,(block,5))
Step 158:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : configure(manipulator_end_2,aligned_with((block,4)))
Step 159:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : grasp(manipulator_end_2,(block,4))
Step 160:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
    Planned actions:
        talos : put(manipulator_end_2,(block,4),(block,5))
Step 161:
    Current Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Achieved Sub-goals:
        [Index = 41] talos : grasp(manipulator_arm_1,(block,1)) -> grasping(manipulator_arm_1) = (block,1)
    Planned actions:
        talos : grasp(manipulator_end_1,(block,1))
Step 162:
    Current Sub-goals:
        [Index = 42] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Achieved Sub-goals:
        [Index = 42] talos : put(manipulator_arm_1,(block,1),(block,2)) -> on((block,1)) = (block,2)
    Planned actions:
        talos : put(manipulator_end_1,(block,1),(block,2))

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Monolevel problem 12 at level 1 solved.

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Online planning increment 12 finished.

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=162, step_range=range(0, 163)

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 162, Total actions = 162, Produced sub-goal stages = 0

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=42, step_range=range(0, 43)

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 162, Total actions = 162, Produced sub-goal stages = 0

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 162, Total actions = 162, Produced sub-goal stages = 0

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Hierarchical plan generated successfully :: Ground Plan Quality >> Length = 162, Actions = 162

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Hierarchical planning summary: (Execution latency = 14.511952100002418, Average ground wait time = 10.59540315000057, Absolution time = 125.38670630000797)

     ========================================================================================================================================================================================================     
     |        Lvl = 3 (classic), LE =  20, AC =  20, CF = 1.0, GT =   1.25s, ST =   0.88s, OT = 0.00s, TT =   2.13s, EF = (LE = 1.0, AC = 1.0), ED = (LE = 0.0, AC = 0.0), EB = (LE = 0.0, AC = 0.0)        |     
     |        Lvl = 2 (com-ref), LE =  42, AC =  42, CF = 1.0, GT =   3.13s, ST =   3.08s, OT = 0.00s, TT =   6.21s, EF = (LE = 2.1, AC = 2.1), ED = (LE = 2.1, AC = 2.1), EB = (LE = 1.0, AC = 1.0)        |     
     |        Lvl = 1 (com-ref), LE = 162, AC = 162, CF = 1.0, GT =  50.39s, ST =  66.66s, OT = 0.00s, TT = 117.05s, EF = (LE = 3.9, AC = 3.9), ED = (LE = 4.8, AC = 4.8), EB = (LE = 1.2, AC = 1.2)        |     
     ========================================================================================================================================================================================================     

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=1, start_step=0, total_plan_length=162, step_range=range(0, 163)

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 162, Total actions = 162, Produced sub-goal stages = 0

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=2, start_step=0, total_plan_length=42, step_range=range(0, 43)

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 162, Total actions = 162, Produced sub-goal stages = 0

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Extracting monolevel plan: level=3, start_step=0, total_plan_length=20, step_range=range(0, 21)

[22-02-2022_03-44-34] DEBUG :: ASH Planner Main #1 >> Current concatenated monoevel plan lengths:
Level [3]: Length = 20, Total actions = 20, Produced sub-goal stages = 20
Level [2]: Length = 42, Total actions = 42, Produced sub-goal stages = 42
Level [1]: Length = 162, Total actions = 162, Produced sub-goal stages = 0

[22-02-2022_03-44-34] DEBUG :: Experiment >> 

      ================================================      
           Experimental run 50 : Time 142.721081s           
      ================================================      

[22-02-2022_03-44-34] INFO :: Experiment >> 

  ################################################################################################  
        Completed 50 experimental runs : Real time 4697.846615s, Proccess time 8812.734375s         
  ################################################################################################  

[22-02-2022_03-44-34] DEBUG :: Experiment >> Refinement spread at run=0, level=2:
Root Mean Squared Errors: rmse_mchild=7.349829930005182, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.799999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-34] DEBUG :: Experiment >> Refinement spread at run=0, level=1:
Root Mean Squared Errors: rmse_mchild=5.531465216198738, rmse_div_indices=4.25069124594766, rmse_div_steps=18.701889844630237
Mean Absolute Errors: mae_mchild=4.41528925619835, mae_div_indices=3.384615384615385, mae_div_steps=15.230769230769228

[22-02-2022_03-44-34] DEBUG :: Experiment >> Refinement spread at run=1, level=2:
Root Mean Squared Errors: rmse_mchild=7.297259759663211, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.749999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-34] DEBUG :: Experiment >> Refinement spread at run=1, level=1:
Root Mean Squared Errors: rmse_mchild=5.7184275131490905, rmse_div_indices=4.25069124594766, rmse_div_steps=18.59280257767257
Mean Absolute Errors: mae_mchild=4.725206611570248, mae_div_indices=3.384615384615385, mae_div_steps=15.23076923076923

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=2, level=2:
Root Mean Squared Errors: rmse_mchild=7.594405835876825, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.949999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=2, level=1:
Root Mean Squared Errors: rmse_mchild=6.063190801125601, rmse_div_indices=5.170180773509688, rmse_div_steps=21.288113131129325
Mean Absolute Errors: mae_mchild=4.5816326530612255, mae_div_indices=4.230769230769231, mae_div_steps=16.05128205128205

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=3, level=2:
Root Mean Squared Errors: rmse_mchild=7.291776189653656, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.749999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=3, level=1:
Root Mean Squared Errors: rmse_mchild=5.820134615466276, rmse_div_indices=4.25069124594766, rmse_div_steps=18.59280257767257
Mean Absolute Errors: mae_mchild=4.770661157024794, mae_div_indices=3.384615384615385, mae_div_steps=15.23076923076923

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=4, level=2:
Root Mean Squared Errors: rmse_mchild=7.23740284908889, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=4, level=1:
Root Mean Squared Errors: rmse_mchild=5.660687982017033, rmse_div_indices=4.25069124594766, rmse_div_steps=18.459935827874126
Mean Absolute Errors: mae_mchild=4.679752066115703, mae_div_indices=3.384615384615385, mae_div_steps=15.076923076923077

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=5, level=2:
Root Mean Squared Errors: rmse_mchild=7.0746024623295956, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.549999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=5, level=1:
Root Mean Squared Errors: rmse_mchild=5.416128920118028, rmse_div_indices=4.25069124594766, rmse_div_steps=12.760658357208758
Mean Absolute Errors: mae_mchild=4.248966942148763, mae_div_indices=3.384615384615385, mae_div_steps=10.282051282051283

[22-02-2022_03-44-35] DEBUG :: Experiment >> Refinement spread at run=6, level=2:
Root Mean Squared Errors: rmse_mchild=7.123201527403249, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.599999999999999, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=6, level=1:
Root Mean Squared Errors: rmse_mchild=5.778428644822549, rmse_div_indices=4.25069124594766, rmse_div_steps=13.858757914768947
Mean Absolute Errors: mae_mchild=4.563016528925619, mae_div_indices=3.384615384615385, mae_div_steps=11.17948717948718

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=7, level=2:
Root Mean Squared Errors: rmse_mchild=5.035871324805668, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.399999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=7, level=1:
Root Mean Squared Errors: rmse_mchild=7.600072721487658, rmse_div_indices=0.9957173250742362, rmse_div_steps=7.8732615772148575
Mean Absolute Errors: mae_mchild=5.935950413223142, mae_div_indices=0.769230769230769, mae_div_steps=6.307692307692306

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=8, level=2:
Root Mean Squared Errors: rmse_mchild=7.137926869897168, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=6.549999999999997, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=8, level=1:
Root Mean Squared Errors: rmse_mchild=5.832369066307435, rmse_div_indices=2.849501380883702, rmse_div_steps=12.857868654049406
Mean Absolute Errors: mae_mchild=4.607438016528928, mae_div_indices=2.1538461538461546, mae_div_steps=9.717948717948717

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=9, level=2:
Root Mean Squared Errors: rmse_mchild=5.888123640006211, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.649999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-36] DEBUG :: Experiment >> Refinement spread at run=9, level=1:
Root Mean Squared Errors: rmse_mchild=10.056131204065926, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.715355429382975
Mean Absolute Errors: mae_mchild=7.604338842975206, mae_div_indices=1.5384615384615397, mae_div_steps=5.923076923076921

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=10, level=2:
Root Mean Squared Errors: rmse_mchild=7.598684096605147, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.999999999999997, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=10, level=1:
Root Mean Squared Errors: rmse_mchild=5.314757055781895, rmse_div_indices=4.25069124594766, rmse_div_steps=13.757088305033106
Mean Absolute Errors: mae_mchild=4.193181818181817, mae_div_indices=3.384615384615385, mae_div_steps=11.205128205128204

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=11, level=2:
Root Mean Squared Errors: rmse_mchild=7.1923570545406035, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.649999999999999, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=11, level=1:
Root Mean Squared Errors: rmse_mchild=5.4628724318449535, rmse_div_indices=4.25069124594766, rmse_div_steps=18.609114575904606
Mean Absolute Errors: mae_mchild=4.392561983471077, mae_div_indices=3.384615384615385, mae_div_steps=15.153846153846152

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=12, level=2:
Root Mean Squared Errors: rmse_mchild=6.403124237432848, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.6999999999999975, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=12, level=1:
Root Mean Squared Errors: rmse_mchild=9.083107447844649, rmse_div_indices=1.9785170998831216, rmse_div_steps=4.994976108530086
Mean Absolute Errors: mae_mchild=7.088842975206612, mae_div_indices=1.5384615384615397, mae_div_steps=4.012820512820516

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=13, level=2:
Root Mean Squared Errors: rmse_mchild=5.787918451395112, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.799999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[22-02-2022_03-44-37] DEBUG :: Experiment >> Refinement spread at run=13, level=1:
Root Mean Squared Errors: rmse_mchild=13.519078957819895, rmse_div_indices=1.374368541872554, rmse_div_steps=12.231911466310489
Mean Absolute Errors: mae_mchild=9.971074380165293, mae_div_indices=1.0512820512820515, mae_div_steps=8.871794871794869

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=14, level=2:
Root Mean Squared Errors: rmse_mchild=5.196152422706631, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.499999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=14, level=1:
Root Mean Squared Errors: rmse_mchild=6.227003146122393, rmse_div_indices=0.9957173250742362, rmse_div_steps=6.48082312488687
Mean Absolute Errors: mae_mchild=5.045454545454546, mae_div_indices=0.769230769230769, mae_div_steps=4.948717948717952

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=15, level=2:
Root Mean Squared Errors: rmse_mchild=5.999999999999999, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.899999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=15, level=1:
Root Mean Squared Errors: rmse_mchild=17.1051379357681, rmse_div_indices=1.9785170998831216, rmse_div_steps=13.265693818215187
Mean Absolute Errors: mae_mchild=13.16322314049587, mae_div_indices=1.5384615384615397, mae_div_steps=9.589743589743593

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=16, level=2:
Root Mean Squared Errors: rmse_mchild=8.571172615225992, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.749999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=16, level=1:
Root Mean Squared Errors: rmse_mchild=7.254335112810086, rmse_div_indices=5.170180773509688, rmse_div_steps=25.650281983088718
Mean Absolute Errors: mae_mchild=5.433673469387752, mae_div_indices=4.230769230769231, mae_div_steps=19.499999999999996

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=17, level=2:
Root Mean Squared Errors: rmse_mchild=7.255342858886821, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-38] DEBUG :: Experiment >> Refinement spread at run=17, level=1:
Root Mean Squared Errors: rmse_mchild=5.486271370768952, rmse_div_indices=4.25069124594766, rmse_div_steps=18.701889844630237
Mean Absolute Errors: mae_mchild=4.392561983471077, mae_div_indices=3.384615384615385, mae_div_steps=15.230769230769228

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=18, level=2:
Root Mean Squared Errors: rmse_mchild=5.870264048575668, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=18, level=1:
Root Mean Squared Errors: rmse_mchild=16.412395789073276, rmse_div_indices=1.9785170998831216, rmse_div_steps=12.735138816823339
Mean Absolute Errors: mae_mchild=12.60950413223141, mae_div_indices=1.5384615384615397, mae_div_steps=9.487179487179484

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=19, level=2:
Root Mean Squared Errors: rmse_mchild=5.818075283115541, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.249999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=19, level=1:
Root Mean Squared Errors: rmse_mchild=6.867529750647831, rmse_div_indices=1.9785170998831216, rmse_div_steps=4.689162810486311
Mean Absolute Errors: mae_mchild=5.240702479338843, mae_div_indices=1.5384615384615397, mae_div_steps=3.192307692307695

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=20, level=2:
Root Mean Squared Errors: rmse_mchild=5.999999999999999, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.899999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=20, level=1:
Root Mean Squared Errors: rmse_mchild=12.843332434244978, rmse_div_indices=1.9785170998831216, rmse_div_steps=9.291630734666644
Mean Absolute Errors: mae_mchild=9.717975206611571, mae_div_indices=1.5384615384615397, mae_div_steps=7.051282051282055

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=21, level=2:
Root Mean Squared Errors: rmse_mchild=5.478138369920933, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.329999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-39] DEBUG :: Experiment >> Refinement spread at run=21, level=1:
Root Mean Squared Errors: rmse_mchild=10.524948224289131, rmse_div_indices=1.9785170998831216, rmse_div_steps=8.19950227799454
Mean Absolute Errors: mae_mchild=7.9225206611570265, mae_div_indices=1.5384615384615397, mae_div_steps=6.538461538461541

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=22, level=2:
Root Mean Squared Errors: rmse_mchild=5.077400909914441, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=22, level=1:
Root Mean Squared Errors: rmse_mchild=8.713649404836824, rmse_div_indices=0.9957173250742362, rmse_div_steps=8.894923165472429
Mean Absolute Errors: mae_mchild=6.840909090909088, mae_div_indices=0.769230769230769, mae_div_steps=6.846153846153844

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=23, level=2:
Root Mean Squared Errors: rmse_mchild=5.315072906367324, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.649999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=23, level=1:
Root Mean Squared Errors: rmse_mchild=6.603886127385228, rmse_div_indices=0.9957173250742362, rmse_div_steps=7.641052529637773
Mean Absolute Errors: mae_mchild=5.422520661157025, mae_div_indices=0.769230769230769, mae_div_steps=6.30769230769231

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=24, level=2:
Root Mean Squared Errors: rmse_mchild=8.38838482665167, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.549999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=24, level=1:
Root Mean Squared Errors: rmse_mchild=6.201051711447205, rmse_div_indices=5.170180773509688, rmse_div_steps=24.249262038291178
Mean Absolute Errors: mae_mchild=4.781746031746031, mae_div_indices=4.230769230769231, mae_div_steps=18.358974358974358

[22-02-2022_03-44-40] DEBUG :: Experiment >> Refinement spread at run=25, level=2:
Root Mean Squared Errors: rmse_mchild=6.333245613427604, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.849999999999997, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=25, level=1:
Root Mean Squared Errors: rmse_mchild=6.6219488529865735, rmse_div_indices=2.849501380883702, rmse_div_steps=8.336666000266533
Mean Absolute Errors: mae_mchild=5.4297520661157, mae_div_indices=2.1538461538461546, mae_div_steps=5.923076923076923

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=26, level=2:
Root Mean Squared Errors: rmse_mchild=5.787918451395112, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.799999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=26, level=1:
Root Mean Squared Errors: rmse_mchild=8.99246413153952, rmse_div_indices=1.374368541872554, rmse_div_steps=8.476778234138795
Mean Absolute Errors: mae_mchild=6.922520661157028, mae_div_indices=1.0512820512820515, mae_div_steps=6.923076923076923

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=27, level=2:
Root Mean Squared Errors: rmse_mchild=7.247068372797374, rmse_div_indices=0.0, rmse_div_steps=4.618802153517006
Mean Absolute Errors: mae_mchild=6.699999999999998, mae_div_indices=0.0, mae_div_steps=2.6666666666666665

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=27, level=1:
Root Mean Squared Errors: rmse_mchild=8.472594980434234, rmse_div_indices=4.25069124594766, rmse_div_steps=21.72932262033176
Mean Absolute Errors: mae_mchild=6.917355371900826, mae_div_indices=3.384615384615385, mae_div_steps=18.192307692307693

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=28, level=2:
Root Mean Squared Errors: rmse_mchild=5.936328831862331, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.399999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-41] DEBUG :: Experiment >> Refinement spread at run=28, level=1:
Root Mean Squared Errors: rmse_mchild=11.637062745334104, rmse_div_indices=1.9785170998831216, rmse_div_steps=7.17374426904158
Mean Absolute Errors: mae_mchild=9.297520661157025, mae_div_indices=1.5384615384615397, mae_div_steps=5.858974358974363

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=29, level=2:
Root Mean Squared Errors: rmse_mchild=6.479583319936553, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.949999999999998, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=29, level=1:
Root Mean Squared Errors: rmse_mchild=4.176733869916277, rmse_div_indices=2.7942248133771033, rmse_div_steps=11.432681075810542
Mean Absolute Errors: mae_mchild=3.4790249433106557, mae_div_indices=2.076923076923077, mae_div_steps=9.102564102564102

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=30, level=2:
Root Mean Squared Errors: rmse_mchild=5.665686189686116, rmse_div_indices=0.0, rmse_div_steps=1.7320508075688772
Mean Absolute Errors: mae_mchild=4.599999999999997, mae_div_indices=0.0, mae_div_steps=1.0

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=30, level=1:
Root Mean Squared Errors: rmse_mchild=9.994820456136926, rmse_div_indices=1.374368541872554, rmse_div_steps=8.562053531937345
Mean Absolute Errors: mae_mchild=7.49380165289256, mae_div_indices=1.0512820512820515, mae_div_steps=6.820512820512824

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=31, level=2:
Root Mean Squared Errors: rmse_mchild=5.997499478949538, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.4499999999999975, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=31, level=1:
Root Mean Squared Errors: rmse_mchild=6.119167825450865, rmse_div_indices=1.9785170998831216, rmse_div_steps=5.448280525428245
Mean Absolute Errors: mae_mchild=4.766528925619834, mae_div_indices=1.5384615384615397, mae_div_steps=3.9230769230769216

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=32, level=2:
Root Mean Squared Errors: rmse_mchild=6.42884126417817, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.749999999999997, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-42] DEBUG :: Experiment >> Refinement spread at run=32, level=1:
Root Mean Squared Errors: rmse_mchild=9.867131240924069, rmse_div_indices=1.9785170998831216, rmse_div_steps=6.121368625246633
Mean Absolute Errors: mae_mchild=7.576446280991731, mae_div_indices=1.5384615384615397, mae_div_steps=4.730769230769231

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=33, level=2:
Root Mean Squared Errors: rmse_mchild=4.838388161361177, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.149999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=33, level=1:
Root Mean Squared Errors: rmse_mchild=7.410467663497057, rmse_div_indices=0.9957173250742362, rmse_div_steps=7.66032346285426
Mean Absolute Errors: mae_mchild=5.9132231404958695, mae_div_indices=0.769230769230769, mae_div_steps=6.1538461538461515

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=34, level=2:
Root Mean Squared Errors: rmse_mchild=6.399218702310461, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.9499999999999975, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=34, level=1:
Root Mean Squared Errors: rmse_mchild=6.611019476026118, rmse_div_indices=2.849501380883702, rmse_div_steps=8.126405203930059
Mean Absolute Errors: mae_mchild=5.427685950413221, mae_div_indices=2.1538461538461546, mae_div_steps=5.769230769230769

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=35, level=2:
Root Mean Squared Errors: rmse_mchild=7.648856123630512, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.999999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=35, level=1:
Root Mean Squared Errors: rmse_mchild=6.164812493202176, rmse_div_indices=5.170180773509688, rmse_div_steps=21.326020381195022
Mean Absolute Errors: mae_mchild=4.722222222222222, mae_div_indices=4.230769230769231, mae_div_steps=16.28205128205128

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=36, level=2:
Root Mean Squared Errors: rmse_mchild=5.0990195135927845, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-43] DEBUG :: Experiment >> Refinement spread at run=36, level=1:
Root Mean Squared Errors: rmse_mchild=5.851798303806255, rmse_div_indices=0.9957173250742362, rmse_div_steps=5.9334809834697
Mean Absolute Errors: mae_mchild=4.735537190082645, mae_div_indices=0.769230769230769, mae_div_steps=4.923076923076921

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=37, level=2:
Root Mean Squared Errors: rmse_mchild=6.675702210254737, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=6.099999999999999, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=37, level=1:
Root Mean Squared Errors: rmse_mchild=4.0819621465646145, rmse_div_indices=2.7942248133771033, rmse_div_steps=10.693725694572926
Mean Absolute Errors: mae_mchild=3.362244897959184, mae_div_indices=2.076923076923077, mae_div_steps=8.538461538461538

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=38, level=2:
Root Mean Squared Errors: rmse_mchild=5.315072906367324, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.649999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=38, level=1:
Root Mean Squared Errors: rmse_mchild=6.864595808919466, rmse_div_indices=0.9957173250742362, rmse_div_steps=7.741896783861553
Mean Absolute Errors: mae_mchild=5.740702479338843, mae_div_indices=0.769230769230769, mae_div_steps=6.384615384615387

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=39, level=2:
Root Mean Squared Errors: rmse_mchild=5.162363799656122, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.4499999999999975, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=39, level=1:
Root Mean Squared Errors: rmse_mchild=8.819353249277246, rmse_div_indices=0.9957173250742362, rmse_div_steps=8.786158500538283
Mean Absolute Errors: mae_mchild=7.037190082644625, mae_div_indices=0.769230769230769, mae_div_steps=6.769230769230767

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=40, level=2:
Root Mean Squared Errors: rmse_mchild=7.3576490810584305, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=6.749999999999998, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[22-02-2022_03-44-44] DEBUG :: Experiment >> Refinement spread at run=40, level=1:
Root Mean Squared Errors: rmse_mchild=6.731234939409247, rmse_div_indices=5.170180773509688, rmse_div_steps=23.16329988448238
Mean Absolute Errors: mae_mchild=5.214285714285714, mae_div_indices=4.230769230769231, mae_div_steps=17.923076923076923

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=41, level=2:
Root Mean Squared Errors: rmse_mchild=5.064582904840239, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.249999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=41, level=1:
Root Mean Squared Errors: rmse_mchild=7.793168230853237, rmse_div_indices=0.9957173250742362, rmse_div_steps=8.565983211288033
Mean Absolute Errors: mae_mchild=6.452479338842977, mae_div_indices=0.769230769230769, mae_div_steps=6.8461538461538485

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=42, level=2:
Root Mean Squared Errors: rmse_mchild=5.476312628037226, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.329999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=42, level=1:
Root Mean Squared Errors: rmse_mchild=10.554842510109903, rmse_div_indices=1.9785170998831216, rmse_div_steps=8.19950227799454
Mean Absolute Errors: mae_mchild=7.9948347107438025, mae_div_indices=1.5384615384615397, mae_div_steps=6.538461538461541

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=43, level=2:
Root Mean Squared Errors: rmse_mchild=5.051732376126035, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.299999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=43, level=1:
Root Mean Squared Errors: rmse_mchild=5.969771477000045, rmse_div_indices=0.9957173250742362, rmse_div_steps=6.861340353968127
Mean Absolute Errors: mae_mchild=4.84090909090909, mae_div_indices=0.769230769230769, mae_div_steps=5.384615384615387

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=44, level=2:
Root Mean Squared Errors: rmse_mchild=5.895337140486538, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=5.049999999999999, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-45] DEBUG :: Experiment >> Refinement spread at run=44, level=1:
Root Mean Squared Errors: rmse_mchild=8.996997063478558, rmse_div_indices=1.8292495308606331, rmse_div_steps=6.352198623345101
Mean Absolute Errors: mae_mchild=6.8696145124716494, mae_div_indices=1.4615384615384615, mae_div_steps=4.8461538461538485

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=45, level=2:
Root Mean Squared Errors: rmse_mchild=6.376127351300317, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=5.849999999999999, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=45, level=1:
Root Mean Squared Errors: rmse_mchild=4.292928231898689, rmse_div_indices=2.7942248133771033, rmse_div_steps=10.006461587607957
Mean Absolute Errors: mae_mchild=3.4642857142857144, mae_div_indices=2.076923076923077, mae_div_steps=8.051282051282051

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=46, level=2:
Root Mean Squared Errors: rmse_mchild=6.9670653793401405, rmse_div_indices=0.0, rmse_div_steps=3.4641016151377544
Mean Absolute Errors: mae_mchild=6.399999999999997, mae_div_indices=0.0, mae_div_steps=2.0

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=46, level=1:
Root Mean Squared Errors: rmse_mchild=4.395215984877081, rmse_div_indices=2.849501380883702, rmse_div_steps=10.529618380922606
Mean Absolute Errors: mae_mchild=3.5464876033057853, mae_div_indices=2.1538461538461546, mae_div_steps=7.948717948717948

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=47, level=2:
Root Mean Squared Errors: rmse_mchild=5.315072906367324, rmse_div_indices=0.0, rmse_div_steps=1.1547005383792515
Mean Absolute Errors: mae_mchild=4.649999999999997, mae_div_indices=0.0, mae_div_steps=0.6666666666666666

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=47, level=1:
Root Mean Squared Errors: rmse_mchild=5.7486748383165835, rmse_div_indices=0.9957173250742362, rmse_div_steps=6.769163995397156
Mean Absolute Errors: mae_mchild=4.666322314049586, mae_div_indices=0.769230769230769, mae_div_steps=5.076923076923075

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=48, level=2:
Root Mean Squared Errors: rmse_mchild=5.225897052181567, rmse_div_indices=0.0, rmse_div_steps=2.309401076758503
Mean Absolute Errors: mae_mchild=4.129999999999998, mae_div_indices=0.0, mae_div_steps=1.3333333333333333

[22-02-2022_03-44-46] DEBUG :: Experiment >> Refinement spread at run=48, level=1:
Root Mean Squared Errors: rmse_mchild=14.891922973031747, rmse_div_indices=1.9785170998831216, rmse_div_steps=10.921094228386599
Mean Absolute Errors: mae_mchild=10.929752066115698, mae_div_indices=1.5384615384615397, mae_div_steps=7.948717948717945

[22-02-2022_03-44-47] DEBUG :: Experiment >> Refinement spread at run=49, level=2:
Root Mean Squared Errors: rmse_mchild=7.827196177431608, rmse_div_indices=0.0, rmse_div_steps=5.773502691896258
Mean Absolute Errors: mae_mchild=7.149999999999999, mae_div_indices=0.0, mae_div_steps=3.3333333333333335

[22-02-2022_03-44-47] DEBUG :: Experiment >> Refinement spread at run=49, level=1:
Root Mean Squared Errors: rmse_mchild=7.343607521414216, rmse_div_indices=5.170180773509688, rmse_div_steps=18.58556097950979
Mean Absolute Errors: mae_mchild=5.806122448979592, mae_div_indices=4.230769230769231, mae_div_steps=13.384615384615385

[22-02-2022_03-44-47] INFO :: Experiment >> 

          ========================================          
                    Experimental Results                    
          ========================================          

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                     Concatenated Plans                     

 RU  AL  LE  AC  CF        GT        ST  OT         TT        LT         CT        WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  0   3  20  20 1.0  1.254419  0.841139 0.0   2.095558  2.095558   2.095558  2.095558  695.527344  698.847656  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  0   2  44  44 1.0  3.288603  1.542596 0.0   4.831199  5.940657   6.926757  3.527300  723.054688  735.542969  0.954545  0.911544  0.856729  1.000000   1.000000  0.870110  0.817787  0.954545   0.954545 0.926400
  0   1 160 160 1.0 44.911592 15.489401 0.0  60.400992 12.196968  67.327749  5.758887  805.503906  830.656250  0.806250  0.719331  0.446561  0.924664   0.978643  0.579961  0.360040  0.745511   0.789031 0.725081
  1   3  20  20 1.0  1.262884  0.879900 0.0   2.142784  2.142784   2.142784  2.142784  701.664062  705.742188  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  1   2  44  44 1.0  3.240710  1.423728 0.0   4.664438  5.763704   6.807222  3.465867  744.773438  752.832031  0.954545  0.924300  0.862292  1.000000   1.000000  0.882286  0.823097  0.954545   0.954545 0.930459
  1   1 156 156 1.0 43.852023 17.401973 0.0  61.253996 12.156459  68.061218  5.823018  835.058594  860.558594  0.826923  0.719992  0.445025  0.919887   0.970524  0.595378  0.368001  0.760675   0.802548 0.741617
  2   3  20  20 1.0  1.254705  0.893270 0.0   2.147974  2.147974   2.147974  2.147974  739.617188  744.828125  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  2   2  42  42 1.0  3.113728  1.419448 0.0   4.533176  5.994863   6.681151  3.402973  866.121094  877.042969  1.000000  0.907869  0.868422  1.000000   1.000000  0.907869  0.868422  1.000000   1.000000 0.969290
  2   1 170 170 1.0 51.247368 53.737969 0.0 104.985336 12.252839 111.666487  9.454637 1014.738281 1051.445312  0.758824  0.718425  0.375757  0.773670   0.780042  0.545158  0.285133  0.587079   0.591914 0.631965
  3   3  20  20 1.0  1.248875  0.841139 0.0   2.090014  2.090014   2.090014  2.090014  869.281250  877.347656  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  3   2  44  44 1.0  3.291370  2.032857 0.0   5.324226  6.310950   7.414240  3.770549  898.847656  916.058594  0.954545  0.888246  0.836175  1.000000   1.000000  0.847871  0.798167  0.954545   0.954545 0.918987
  3   1 156 156 1.0 43.857882 16.147596 0.0  60.005478 12.867544  67.419718  5.780879  984.187500 1011.953125  0.826923  0.708841  0.446368  0.923007   0.982913  0.586157  0.369112  0.763255   0.812794 0.741958
  4   3  20  20 1.0  1.250005  0.842459 0.0   2.092465  2.092465   2.092465  2.092465  854.273438  864.398438  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  4   2  44  44 1.0  3.247449  1.547288 0.0   4.794736  5.918916   6.887201  3.506000  910.023438  919.335938  0.954545  0.913047  0.858544  1.000000   1.000000  0.871545  0.819520  0.954545   0.954545 0.926879
  4   1 156 156 1.0 43.998394 18.738415 0.0  62.736809 12.532082  69.624009  5.954550  998.261719 1025.121094  0.826923  0.713986  0.441809  0.910592   0.959312  0.590411  0.365342  0.752990   0.793278 0.736871
  5   3  20  20 1.0  1.296858  0.902643 0.0   2.199501  2.199501   2.199501  2.199501  906.140625  913.234375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  5   2  44  44 1.0  3.245351  1.498259 0.0   4.743610  5.983331   6.943111  3.534426  983.968750  993.273438  0.954545  0.908642  0.855985  1.000000   1.000000  0.867340  0.817077  0.954545   0.954545 0.925477
  5   1 155 155 1.0 43.893715 14.680838 0.0  58.574552 12.338556  65.517663  5.615645 1072.753906 1100.062500  0.832258  0.717046  0.450430  0.935997   0.999405  0.596768  0.374874  0.778991   0.831763 0.753596
  6   3  20  20 1.0  1.256611  0.867650 0.0   2.124261  2.124261   2.124261  2.124261  977.902344  987.527344  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  6   2  44  44 1.0  3.228690  1.611057 0.0   4.839747  6.010120   6.964008  3.543997 1014.691406 1025.976562  0.954545  0.906852  0.855042  1.000000   1.000000  0.865631  0.816176  0.954545   0.954545 0.924907
  6   1 169 169 1.0 47.778152 29.521320 0.0  77.299472 12.465152  84.263480  7.181636 1100.265625 1128.929688  0.763314  0.715036  0.414944  0.845589   0.867423  0.545797  0.316732  0.645449   0.662116 0.657075
  7   3  20  20 1.0  1.254083  1.313966 0.0   2.568049  2.568049   2.568049  2.568049 1010.570312 1018.429688  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  7   2  44  44 1.0  3.145272  0.851792 0.0   3.997064  4.860038   6.565113  3.468788 1038.957031 1050.562500  0.954545  1.000000  0.874325  1.000000   1.000000  0.954545  0.834583  0.954545   0.954545 0.954545
  7   1 161 161 1.0 44.274664 19.488688 0.0  63.763353 10.684517  70.328465  6.042261 1101.718750 1116.640625  0.801242  0.746543  0.440385  0.904736   0.935619  0.598162  0.352855  0.724912   0.749657 0.716354
  8   3  20  20 1.0  1.252039  0.973871 0.0   2.225909  2.225909   2.225909  2.225909 1034.183594 1042.031250  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  8   2  44  44 1.0  3.197553  1.621433 0.0   4.818985  5.868009   7.044895  3.584897 1071.894531 1083.320312  0.954545  0.916634  0.851450  1.000000   1.000000  0.874969  0.812747  0.954545   0.954545 0.928020
  8   1 160 160 1.0 45.195971 17.433818 0.0  62.629789 11.819632  69.674684  5.993199 1152.382812 1187.273438  0.806250  0.725619  0.441706  0.907980   0.949190  0.585030  0.356126  0.732059   0.765285 0.718855
  9   3  20  20 1.0  1.257273  0.795331 0.0   2.052604  2.052604   2.052604  2.052604 1064.882812 1074.367188  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  9   2  44  44 1.0  3.158641  1.262890 0.0   4.421531  5.001402   6.474135  3.300253 1091.960938 1102.804688  0.954545  0.999813  0.879143  1.000000   1.000000  0.954367  0.839182  0.954545   0.954545 0.954486
  9   1 167 167 1.0 46.379973 18.274052 0.0  64.654025 10.852484  71.128161  6.067821 1170.882812 1203.714844  0.772455  0.743233  0.438786  0.903076   0.934584  0.574114  0.338942  0.697586   0.721924 0.689498
 10   3  20  20 1.0  1.254620  0.850361 0.0   2.104981  2.104981   2.104981  2.104981 1086.683594 1097.019531  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 10   2  44  44 1.0  3.316398  1.457254 0.0   4.773652  5.916369   6.878632  3.502295 1123.871094 1137.324219  0.954545  0.913224  0.858941  1.000000   1.000000  0.871714  0.819898  0.954545   0.954545 0.926935
 10   1 173 173 1.0 48.606936 24.744385 0.0  73.351321 12.266990  80.229953  6.826738 1210.128906 1241.742188  0.745665  0.718196  0.421822  0.861368   0.887026  0.535534  0.314538  0.642292   0.661424 0.647541
 11   3  20  20 1.0  1.263924  0.848757 0.0   2.112681  2.112681   2.112681  2.112681 1116.312500 1127.234375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 11   2  44  44 1.0  3.299252  1.923091 0.0   5.222343  6.379078   7.335025  3.731076 1156.011719 1169.683594  0.954545  0.884370  0.839307  1.000000   1.000000  0.844171  0.801157  0.954545   0.954545 0.917754
 11   1 160 160 1.0 44.474875 16.535597 0.0  61.010472 13.230148  68.345497  5.867393 1243.167969 1274.859375  0.806250  0.703494  0.444434  0.916678   0.975893  0.567192  0.358325  0.739072   0.786814 0.720085
 12   3  20  20 1.0  1.257941  0.887362 0.0   2.145303  2.145303   2.145303  2.145303 1151.902344 1163.035156  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 12   2  44  44 1.0  3.199939  1.029953 0.0   4.229892  4.934928   6.375195  3.250186 1179.210938 1191.136719  0.954545  1.000000  0.884587  1.000000   1.000000  0.954545  0.844379  0.954545   0.954545 0.954545
 12   1 163 163 1.0 45.318439 15.817196 0.0  61.135635 10.887873  67.510830  5.799786 1260.121094 1292.171875  0.791411  0.742545  0.446176  0.921598   0.961230  0.587659  0.353109  0.729363   0.760728 0.713266
 13   3  20  20 1.0  1.261602  1.242458 0.0   2.504060  2.504060   2.504060  2.504060 1177.269531 1188.378906  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 13   2  44  44 1.0  3.191086  1.055503 0.0   4.246588  5.049522   6.750648  3.438548 1206.671875 1218.246094  0.954545  0.993551  0.865008  1.000000   1.000000  0.948390  0.825690  0.954545   0.954545 0.952494
 13   1 170 170 1.0 48.813936 46.808356 0.0  95.622292 10.891870 102.372940  8.672734 1406.492188 1437.554688  0.758824  0.742468  0.387801  0.794312   0.800200  0.563402  0.294272  0.602743   0.607210 0.643145
 14   3  20  20 1.0  1.258888  0.898614 0.0   2.157502  2.157502   2.157502  2.157502 1280.156250 1295.593750  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 14   2  44  44 1.0  3.160187  0.883541 0.0   4.043728  4.490496   6.201230  3.164827 1315.406250 1329.246094  0.954545  1.000000  0.894735  1.000000   1.000000  0.954545  0.854065  0.954545   0.954545 0.954545
 14   1 143 143 1.0 38.686917 11.237858 0.0  49.924775 10.595901  56.126006  4.857829 1366.882812 1400.351562  0.902098  0.748324  0.472531  1.000000   1.000000  0.675061  0.426269  0.902098   0.902098 0.826419
 15   3  20  20 1.0  1.263751  0.781960 0.0   2.045711  2.045711   2.045711  2.045711 1308.851562 1322.996094  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 15   2  44  44 1.0  3.199308  1.101128 0.0   4.300435  4.854557   6.346147  3.236045 1337.921875 1352.000000  0.954545  1.000000  0.886229  1.000000   1.000000  0.954545  0.845946  0.954545   0.954545 0.954545
 15   1 166 166 1.0 47.385603 52.681417 0.0 100.067020 11.201944 106.413166  9.009045 1454.917969 1484.921875  0.777108  0.736597  0.382431  0.785040   0.790458  0.572415  0.297190  0.610061   0.614271 0.654598
 16   3  20  20 1.0  1.254982  0.738833 0.0   1.993814  1.993814   1.993814  1.993814 1337.007812 1351.996094  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 16   2  42  42 1.0  3.143577  1.654226 0.0   4.797802  6.101405   6.791617  3.458731 1403.023438 1420.503906  1.000000  0.900927  0.863036  1.000000   1.000000  0.900927  0.863036  1.000000   1.000000 0.966976
 16   1 157 157 1.0 46.397271 37.978557 0.0  84.375828 13.092310  91.167445  7.739132 1548.589844 1591.800781  0.821656  0.705501  0.403935  0.824048   0.842651  0.579679  0.331896  0.677084   0.692369 0.697901
 17   3  20  20 1.0  1.257136  0.938299 0.0   2.195435  2.195435   2.195435  2.195435 1400.832031 1417.078125  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 17   2  44  44 1.0  3.236226  2.023679 0.0   5.259905  5.923846   7.455340  3.791844 1436.265625 1454.941406  0.954545  0.912705  0.834579  1.000000   1.000000  0.871218  0.796643  0.954545   0.954545 0.926770
 17   1 160 160 1.0 44.597314 16.717073 0.0  61.314387 12.179680  68.769727  5.872437 1525.476562 1562.523438  0.806250  0.719613  0.443557  0.916318   0.965095  0.580188  0.357618  0.738782   0.778108 0.721515
 18   3  20  20 1.0  1.255737  0.825491 0.0   2.081228  2.081228   2.081228  2.081228 1433.769531 1449.425781  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 18   2  44  44 1.0  3.170801  0.972716 0.0   4.143517  4.702913   6.224745  3.175491 1463.320312 1479.667969  0.954545  1.000000  0.893318  1.000000   1.000000  0.954545  0.852712  0.954545   0.954545 0.954545
 18   1 170 170 1.0 48.885160 77.157452 0.0 126.042612 10.609884 132.267357 11.164208 1577.835938 1608.441406  0.758824  0.748041  0.352399  0.737298   0.736362  0.567631  0.267409  0.559479   0.558769 0.628408
 19   3  20  20 1.0  1.249302  0.712264 0.0   1.961566  1.961566   1.961566  1.961566 1457.371094 1473.136719  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 19   2  44  44 1.0  3.116092  0.898338 0.0   4.014430  4.565234   5.975996  3.050792 1489.847656 1506.203125  0.954545  1.000000  0.909136  1.000000   1.000000  0.954545  0.867812  0.954545   0.954545 0.954545
 19   1 169 169 1.0 45.969678 16.777668 0.0  62.747347 10.916458  68.723343  5.866828 1570.054688 1606.898438  0.763314  0.741993  0.443653  0.916718   0.954372  0.566373  0.338646  0.699744   0.728485 0.686057
 20   3  20  20 1.0  1.243041  0.726639 0.0   1.969681  1.969681   1.969681  1.969681 1483.957031 1499.656250  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 20   2  44  44 1.0  3.133987  1.009540 0.0   4.143527  4.620750   6.113207  3.118778 1513.890625 1530.363281  0.954545  1.000000  0.900180  1.000000   1.000000  0.954545  0.859262  0.954545   0.954545 0.954545
 20   1 157 157 1.0 42.999852 17.479557 0.0  60.479409 10.283822  66.592617  5.741827 1590.722656 1627.335938  0.821656  0.754790  0.448119  0.925965   0.962062  0.620178  0.368200  0.760825   0.790484 0.744106
 21   3  20  20 1.0  1.241667  0.842720 0.0   2.084387  2.084387   2.084387  2.084387 1508.101562 1523.859375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 21   2  44  44 1.0  3.124707  0.937342 0.0   4.062049  4.714127   6.146435  3.135236 1538.667969 1555.007812  0.954545  1.000000  0.898098  1.000000   1.000000  0.954545  0.857276  0.954545   0.954545 0.954545
 21   1 163 163 1.0 44.642837 16.838875 0.0  61.481712 10.457438  67.628147  5.829772 1615.796875 1652.417969  0.791411  0.751154  0.445930  0.919393   0.954248  0.594472  0.352914  0.727618   0.755203 0.713695
 22   3  20  20 1.0  1.243973  0.747312 0.0   1.991285  1.991285   1.991285  1.991285 1535.304688 1551.183594  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 22   2  44  44 1.0  3.101419  1.526438 0.0   4.627857  4.949189   6.619142  3.714854 1564.417969 1584.304688  0.954545  1.000000  0.871544  1.000000   1.000000  0.954545  0.831928  0.954545   0.954545 0.954545
 22   1 164 164 1.0 44.992580 33.089208 0.0  78.081788 10.698279  84.700930  7.255575 1654.660156 1699.683594  0.786585  0.746269  0.414218  0.842524   0.856009  0.587004  0.325818  0.662717   0.673324 0.682304
 23   3  20  20 1.0  1.240996  0.762181 0.0   2.003176  2.003176   2.003176  2.003176 1561.957031 1577.906250  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 23   2  44  44 1.0  3.136298  0.880161 0.0   4.016460  4.339791   6.019636  3.072285 1592.191406 1612.027344  0.954545  1.000000  0.906222  1.000000   1.000000  0.954545  0.865030  0.954545   0.954545 0.954545
 23   1 169 169 1.0 45.953622 20.025644 0.0  65.979266 10.183836  71.998902  6.139559 1655.109375 1676.855469  0.763314  0.756930  0.437067  0.898526   0.923681  0.577775  0.333619  0.685857   0.705058 0.682049
 24   3  20  20 1.0  1.252467  0.774017 0.0   2.026483  2.026483   2.026483  2.026483 1585.058594 1600.750000  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 24   2  42  42 1.0  3.084356  1.543289 0.0   4.627645  5.981886   6.654129  3.390069 1642.386719 1662.160156  1.000000  0.908739  0.869774  1.000000   1.000000  0.908739  0.869774  1.000000   1.000000 0.969580
 24   1 161 161 1.0 46.593158 42.808786 0.0  89.401944 12.273546  96.056073  8.144657 1785.187500 1831.574219  0.801242  0.718091  0.396655  0.810311   0.822976  0.575365  0.317817  0.649256   0.659403 0.678670
 25   3  20  20 1.0  1.248753  0.930477 0.0   2.179230  2.179230   2.179230  2.179230 1642.167969 1661.074219  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 25   2  44  44 1.0  3.169878  1.084115 0.0   4.253992  5.265038   6.433222  3.279713 1676.847656 1696.718750  0.954545  0.968634  0.881367  1.000000   1.000000  0.924606  0.841305  0.954545   0.954545 0.944566
 25   1 162 162 1.0 45.579745 33.020124 0.0  78.599869 10.977756  85.033091  7.291788 1763.722656 1807.878906  0.796296  0.740816  0.413670  0.841048   0.855371  0.589909  0.329404  0.669723   0.681129 0.689111
 26   3  20  20 1.0  1.243464  1.044596 0.0   2.288060  2.288060   2.288060  2.288060 1667.292969 1684.929688  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 26   2  44  44 1.0  3.117033  0.985562 0.0   4.102595  4.744019   6.390656  3.663575 1700.621094 1719.066406  0.954545  1.000000  0.883722  1.000000   1.000000  0.954545  0.843553  0.954545   0.954545 0.954545
 26   1 159 159 1.0 43.497133 13.937365 0.0  57.434498 10.519933  63.825154  5.526624 1770.414062 1797.054688  0.811321  0.749869  0.454152  0.943559   0.990639  0.608385  0.368463  0.765529   0.803726 0.741144
 27   3  20  20 1.0  1.245845  0.806321 0.0   2.052167  2.052167   2.052167  2.052167 1697.437500 1715.355469  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 27   2  44  44 1.0  3.206407  2.068062 0.0   5.274469  6.377615   7.326635  3.725681 1727.140625 1754.066406  0.954545  0.884452  0.839643  1.000000   1.000000  0.844249  0.801478  0.954545   0.954545 0.917780
 27   1 153 153 1.0 41.696410 13.082606 0.0  54.779016 12.505898  62.105652  5.385792 1812.933594 1849.437500  0.843137  0.714396  0.458043  0.956471   1.000000  0.602334  0.386193  0.806437   0.843137 0.762869
 28   3  20  20 1.0  1.244292  0.771399 0.0   2.015691  2.015691   2.015691  2.015691 1720.449219 1737.984375  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 28   2  44  44 1.0  3.144866  0.920598 0.0   4.065464  4.642199   6.081155  3.103756 1750.128906 1768.417969  0.954545  1.000000  0.902219  1.000000   1.000000  0.954545  0.861209  0.954545   0.954545 0.954545
 28   1 169 169 1.0 46.561243 26.742728 0.0  73.303971 10.270514  79.385126  6.827193 1830.300781 1869.273438  0.763314  0.755073  0.423309  0.861346   0.877002  0.576358  0.323118  0.657477   0.669427 0.669700
 29   3  20  20 1.0  1.252963  0.859733 0.0   2.112695  2.112695   2.112695  2.112695 1743.820312 1761.339844  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 29   2  42  42 1.0  2.965378  0.888796 0.0   3.854174  4.898998   5.966870  3.046614 1772.773438 1792.335938  1.000000  1.000000  0.909754  1.000000   1.000000  1.000000  0.909754  1.000000   1.000000 1.000000
 29   1 157 157 1.0 42.235585 12.005642 0.0  54.241227 10.791059  60.208096  5.308237 1821.914062 1855.492188  0.821656  0.744434  0.462472  0.964155   1.000000  0.611669  0.379993  0.792204   0.821656 0.751660
 30   3  20  20 1.0  1.241770  0.799543 0.0   2.041313  2.041313   2.041313  2.041313 1766.664062 1784.296875  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 30   2  44  44 1.0  3.144231  1.042744 0.0   4.186974  4.578795   6.228287  3.642655 1795.414062 1813.414062  0.954545  1.000000  0.893105  1.000000   1.000000  0.954545  0.852510  0.954545   0.954545 0.954545
 30   1 151 151 1.0 41.128708 13.645887 0.0  54.774596 10.421305  61.002883  5.301349 1863.480469 1890.500000  0.854305  0.751903  0.460599  0.964859   1.000000  0.642354  0.393492  0.824283   0.854305 0.783655
 31   3  20  20 1.0  1.243800  0.891592 0.0   2.135392  2.135392   2.135392  2.135392 1792.222656 1810.425781  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 31   2  44  44 1.0  3.152590  1.066399 0.0   4.218989  4.931090   6.354381  3.239999 1821.031250 1839.746094  0.954545  1.000000  0.885762  1.000000   1.000000  0.954545  0.845500  0.954545   0.954545 0.954545
 31   1 160 160 1.0 43.488604 15.530197 0.0  59.018801 11.650049  65.373182  5.587834 1899.785156 1939.582031  0.806250  0.728544  0.450744  0.938314   0.995188  0.587388  0.363412  0.756516   0.802371 0.732003
 32   3  20  20 1.0  1.244652  0.840547 0.0   2.085199  2.085199   2.085199  2.085199 1814.601562 1832.226562  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 32   2  44  44 1.0  3.159401  0.947748 0.0   4.107149  4.762060   6.192348  3.159199 1842.218750 1860.906250  0.954545  1.000000  0.895275  1.000000   1.000000  0.954545  0.854580  0.954545   0.954545 0.954545
 32   1 177 177 1.0 48.743885 24.273525 0.0  73.017411 10.463166  79.209759  6.741258 1921.253906 1960.593750  0.728814  0.751036  0.423620  0.865464   0.883040  0.547365  0.308740  0.630762   0.643572 0.639917
 33   3  20  20 1.0  1.246570  0.831776 0.0   2.078346  2.078346   2.078346  2.078346 1838.437500 1856.132812  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 33   2  44  44 1.0  3.123131  1.867155 0.0   4.990287  5.375749   7.068633  3.597040 1868.917969 1886.644531  0.954545  0.957442  0.850413  1.000000   1.000000  0.913921  0.811758  0.954545   0.954545 0.941004
 33   1 161 161 1.0 43.417504 19.980600 0.0  63.398104 11.045169  70.466736  6.012377 1933.656250 1958.261719  0.801242  0.739533  0.440107  0.906702   0.941114  0.592545  0.352632  0.726488   0.754061 0.715949
 34   3  20  20 1.0  1.245677  0.820871 0.0   2.066548  2.066548   2.066548  2.066548 1862.320312 1879.871094  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 34   2  44  44 1.0  3.204223  1.173750 0.0   4.377973  5.270343   6.444521  3.285624 1892.121094 1911.765625  0.954545  0.968076  0.880749  1.000000   1.000000  0.924073  0.840715  0.954545   0.954545 0.944388
 34   1 162 162 1.0 45.632752 28.817468 0.0  74.450220 11.085365  80.894741  6.881640 1979.484375 2023.710938  0.796296  0.738774  0.420664  0.858801   0.877783  0.588283  0.334973  0.683860   0.698975 0.694518
 35   3  20  20 1.0  1.247002  0.835434 0.0   2.082436  2.082436   2.082436  2.082436 1882.441406 1902.320312  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 35   2  42  42 1.0  3.089232  2.609781 0.0   5.699013  7.104428   7.781450  3.955104 1914.492188 1942.488281  1.000000  0.848866  0.822547  1.000000   1.000000  0.848866  0.822547  1.000000   1.000000 0.949622
 35   1 170 170 1.0 49.913339 60.905969 0.0 110.819307 13.379906 118.600757 10.023873 2107.226562 2155.046875  0.758824  0.701347  0.367430  0.760427   0.767361  0.532198  0.278815  0.577030   0.582292 0.624438
 36   3  20  20 1.0  1.247966  0.692625 0.0   1.940591  1.940591   1.940591  1.940591 1923.019531 1943.601562  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 36   2  44  44 1.0  3.119418  2.006924 0.0   5.126343  4.260708   7.066933  3.596538 1967.511719 1990.242188  0.954545  1.000000  0.850487  1.000000   1.000000  0.954545  0.811829  0.954545   0.954545 0.954545
 36   1 155 155 1.0 41.653367 11.247282 0.0  52.900649 10.006009  59.967582  5.138176 2019.093750 2056.449219  0.832258  0.760823  0.463044  0.982733   1.000000  0.633201  0.385373  0.817887   0.832258 0.765906
 37   3  20  20 1.0  1.247957  0.911779 0.0   2.159737  2.159737   2.159737  2.159737 1962.039062 1980.304688  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 37   2  42  42 1.0  2.968634  0.923292 0.0   3.891926  4.978212   6.051663  3.087786 1989.605469 2009.933594  1.000000  1.000000  0.904123  1.000000   1.000000  1.000000  0.904123  1.000000   1.000000 1.000000
 37   1 159 159 1.0 43.008409 12.832892 0.0  55.841301 10.674349  61.892963  5.298280 2044.773438 2073.449219  0.811321  0.746747  0.458532  0.965174   1.000000  0.605851  0.372017  0.783066   0.811321 0.742831
 38   3  20  20 1.0  1.245242  1.922089 0.0   3.167331  3.167331   3.167331  3.167331 1985.867188 2003.851562  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 38   2  44  44 1.0  3.125467  0.862965 0.0   3.988432  5.475422   7.155763  3.640982 2017.093750 2039.246094  0.954545  0.948110  0.846678  1.000000   1.000000  0.905014  0.808193  0.954545   0.954545 0.938035
 38   1 169 169 1.0 46.012042 22.004251 0.0  68.016294 11.150275  75.172057  6.404867 2090.863281 2115.941406  0.763314  0.737557  0.430982  0.882931   0.909307  0.562987  0.328974  0.673953   0.694087 0.673463
 39   3  20  20 1.0  1.246057  0.801142 0.0   2.047199  2.047199   2.047199  2.047199 2009.562500 2027.539062  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 39   2  44  44 1.0  3.097897  2.038444 0.0   5.136341  4.297495   7.183540  3.655172 2039.003906 2061.214844  0.954545  1.000000  0.845509  1.000000   1.000000  0.954545  0.807077  0.954545   0.954545 0.954545
 39   1 164 164 1.0 44.721934 25.943165 0.0  70.665099 10.068285  77.848639  6.628193 2137.953125 2186.878906  0.786585  0.759447  0.426056  0.871084   0.887986  0.597370  0.335130  0.685182   0.698477 0.694144
 40   3  20  20 1.0  1.242392  0.798620 0.0   2.041012  2.041012   2.041012  2.041012 2036.007812 2053.960938  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 40   2  42  42 1.0  3.084776  1.596111 0.0   4.680887  6.046176   6.721899  3.424130 2071.199219 2094.601562  1.000000  0.904480  0.866410  1.000000   1.000000  0.904480  0.866410  1.000000   1.000000 0.968160
 40   1 168 168 1.0 48.814937 44.166608 0.0  92.981545 12.245584  99.703445  8.449395 2163.289062 2203.300781  0.767857  0.718542  0.391471  0.800846   0.811617  0.551738  0.300594  0.614935   0.623206 0.647600
 41   3  20  20 1.0  1.245722  0.836527 0.0   2.082249  2.082249   2.082249  2.082249 2068.652344 2086.726562  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 41   2  44  44 1.0  3.121832  0.846918 0.0   3.968749  4.348664   6.050998  3.087944 2099.097656 2121.058594  0.954545  1.000000  0.904166  1.000000   1.000000  0.954545  0.863068  0.954545   0.954545 0.954545
 41   1 172 172 1.0 47.260867 34.032052 0.0  81.292919 11.293390  87.343917  7.419158 2188.140625 2235.750000  0.750000  0.734913  0.409919  0.835983   0.850486  0.551185  0.307439  0.626987   0.637865 0.646350
 42   3  20  20 1.0  1.247578  0.838899 0.0   2.086477  2.086477   2.086477  2.086477 2094.542969 2112.796875  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 42   2  44  44 1.0  3.125950  0.953186 0.0   4.079136  4.726137   6.165613  3.145943 2121.632812 2140.269531  0.954545  1.000000  0.896912  1.000000   1.000000  0.954545  0.856143  0.954545   0.954545 0.954545
 42   1 163 163 1.0 44.938601 18.580547 0.0  63.519148 10.622382  69.684761  5.947603 2202.585938 2242.988281  0.791411  0.747789  0.441686  0.911067   0.943909  0.591809  0.349555  0.721029   0.747020 0.710080
 43   3  20  20 1.0  1.248882  0.785785 0.0   2.034667  2.034667   2.034667  2.034667 2117.703125 2136.003906  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 43   2  44  44 1.0  3.110316  0.852495 0.0   3.962811  4.320741   5.997479  3.061844 2147.921875 2170.117188  0.954545  1.000000  0.907694  1.000000   1.000000  0.954545  0.866435  0.954545   0.954545 0.954545
 43   1 163 163 1.0 43.830444 12.101653 0.0  55.932097 10.219777  61.929576  5.301280 2198.277344 2235.886719  0.791411  0.756157  0.458448  0.964866   1.000000  0.598431  0.362821  0.763606   0.791411 0.727084
 44   3  20  20 1.0  1.246720  0.768310 0.0   2.015030  2.015030   2.015030  2.015030 2141.722656 2159.796875  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 44   2  42  42 1.0  2.966631  0.910758 0.0   3.877388  4.584855   5.892418  3.009374 2167.984375 2190.882812  1.000000  1.000000  0.914902  1.000000   1.000000  1.000000  0.914902  1.000000   1.000000 1.000000
 44   1 172 172 1.0 47.683875 28.840950 0.0  76.524825 10.323822  82.417243  7.008580 2245.562500 2272.949219  0.750000  0.753944  0.418048  0.853050   0.867133  0.565458  0.313536  0.639788   0.650349 0.655269
 45   3  20  20 1.0  1.245533  0.753213 0.0   1.998747  1.998747   1.998747  1.998747 2165.347656 2184.835938  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 45   2  42  42 1.0  3.006624  1.093620 0.0   4.100244  5.026884   6.098991  3.112230 2195.718750 2216.660156  1.000000  0.996461  0.901080  1.000000   1.000000  0.996461  0.901080  1.000000   1.000000 0.998820
 45   1 161 161 1.0 43.411642 12.442650 0.0  55.854293 10.768139  61.953283  5.418104 2242.339844 2277.539062  0.801242  0.744885  0.458393  0.953396   1.000000  0.596833  0.367284  0.763901   0.801242 0.733106
 46   3  20  20 1.0  1.248146  0.762441 0.0   2.010587  2.010587   2.010587  2.010587 2189.148438 2208.046875  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 46   2  44  44 1.0  3.180144  1.323637 0.0   4.503781  5.337406   6.514368  3.319628 2221.027344 2241.542969  0.954545  0.961213  0.876991  1.000000   1.000000  0.917521  0.837127  0.954545   0.954545 0.942204
 46   1 151 151 1.0 41.797065 17.403794 0.0  59.200859 11.177909  65.715227  5.616574 2306.156250 2352.125000  0.854305  0.737043  0.450002  0.935921   0.985957  0.629659  0.384439  0.799561   0.842308 0.775424
 47   3  20  20 1.0  1.249504  0.890855 0.0   2.140359  2.140359   2.140359  2.140359 2214.191406 2233.089844  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 47   2  44  44 1.0  3.124665  0.870394 0.0   3.995059  4.442749   6.135418  3.131418 2244.039062 2266.714844  0.954545  1.000000  0.898785  1.000000   1.000000  0.954545  0.857931  0.954545   0.954545 0.954545
 47   1 161 161 1.0 43.200597 13.217486 0.0  56.418083 10.332575  62.553502  5.353774 2294.843750 2332.750000  0.801242  0.753759  0.457018  0.959590   1.000000  0.603944  0.366182  0.768864   0.801242 0.735476
 48   3  20  20 1.0  1.248570  0.757732 0.0   2.006302  2.006302   2.006302  2.006302 2238.128906 2256.632812  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 48   2  44  44 1.0  3.142266  0.965806 0.0   4.108072  4.637154   6.114373  3.120208 2264.820312 2284.062500  0.954545  1.000000  0.900106  1.000000   1.000000  0.954545  0.859192  0.954545   0.954545 0.954545
 48   1 173 173 1.0 48.383000 33.499372 0.0  81.882372 11.951266  87.996746  7.473558 2354.417969 2397.945312  0.745665  0.723391  0.408878  0.833877   0.850506  0.539407  0.304886  0.621793   0.634193 0.639755
 49   3  20  20 1.0  1.250296  0.877251 0.0   2.127547  2.127547   2.127547  2.127547 2262.656250 2281.023438  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
 49   2  42  42 1.0  3.133902  3.075671 0.0   6.209573  7.630505   8.337121  4.233053 2344.968750 2368.457031  1.000000  0.827982  0.804256  1.000000   1.000000  0.827982  0.804256  1.000000   1.000000 0.942661
 49   1 162 162 1.0 50.388227 66.661359 0.0 117.049586 14.511952 125.386706 10.595403 2484.593750 2533.347656  0.796296  0.686145  0.359755  0.748334   0.755738  0.546375  0.286472  0.595896   0.601791 0.648154

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                      Level-wise Means                      

 AL     LE     AC  CF        GT        ST  OT        TT        LT        CT       WT         RSS         VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3  20.00  20.00 1.0  1.251063  0.871164 0.0  2.122227  2.122227  2.122227 2.122227 1562.300469 1577.203438  1.000000  1.000000  1.000000  1.000000   1.000000  1.000000  1.000000  1.000000   1.000000 1.000000
  2  43.60  43.60 1.0  3.151118  1.333649 0.0  4.484767  5.264790  6.606994 3.393226 1599.214609 1616.802813  0.963636  0.961124  0.874709  1.000000   1.000000  0.925886  0.842881  0.963636   0.963636 0.951053
  1 162.58 162.58 1.0 45.334157 25.650557 0.0 70.984714 11.367841 77.591708 6.628019 1687.559219 1722.592422  0.794827  0.734779  0.429791  0.887586   0.916801  0.583998  0.342175  0.706845   0.730310 0.703045

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
               Level-wise Standard Deviation                

 AL       LE       AC  CF       GT        ST  OT        TT       LT        CT       WT        RSS        VMS  QL_SCORE  LT_SCORE  CT_SCORE  AW_SCORE  AME_SCORE  LT_GRADE  CT_GRADE  AW_GRADE  AME_GRADE    GRADE
  3 0.000000 0.000000 0.0 0.008968  0.188389 0.0  0.189338 0.189338  0.189338 0.189338 462.482303 466.671328  0.000000  0.000000  0.000000   0.00000   0.000000  0.000000  0.000000  0.000000   0.000000 0.000000
  2 0.808122 0.808122 0.0 0.077718  0.499640 0.0  0.526068 0.773282  0.532587 0.274546 457.483844 461.503609  0.018366  0.049515  0.025941   0.00000   0.000000  0.045554  0.029275  0.018366   0.018366 0.019888
  1 6.773568 6.773568 0.0 2.597572 15.453865 0.0 17.576935 1.034673 17.721035 1.465825 453.206497 457.574346  0.033643  0.017995  0.028831   0.06485   0.077695  0.028174  0.033628  0.074613   0.084600 0.046385

               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~               
                       Partial Plans                        

 RU  AL  IT  PN        GT        ST  OT        TT         YT        WT        ET         RSS         VMS  LE  AC  CF  PSG  START_S  END_S  SIZE  SGLITS_T  FIRST_I  LAST_I   PP_EF_L   PP_EF_A   SP_ED_L   SP_ED_A  SP_EB_L  SP_EB_A  SP_EBS_L  SP_EBS_A  TOT_CHOICES  PRE_CHOICES
  0   3   1   1  1.254419  0.841139 0.0  2.095558   2.095558  2.095558  0.000000  695.527344  698.847656  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        84409            0
  0   2   1   1  2.498847  1.346252 0.0  3.845099   5.940657  5.940657  1.113944  723.054688  735.542969  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.581989  2.581989 0.860663 0.860663  0.445876  0.445876        49903            0
  0   2   2   2  0.898339  0.215604 0.0  1.113944   7.054600  1.113944  0.000000  716.656250  723.222656  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.699206  0.699206 0.499433 0.499433  0.769754  0.769754         2606            0
  0   1   1   1  4.866224  1.390087 0.0  6.256311  12.196968 12.196968 11.093133  752.519531  769.222656  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        26563            0
  0   1   2   2  7.304449  2.674740 0.0  9.979189  23.290101 11.093133  4.534663  792.093750  823.648438  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        46956            0
  0   1   3   3  3.577020  0.957643 0.0  4.534663  27.824764  4.534663  7.653355  703.851562  717.378906  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         6318            0
  0   1   4   4  5.421370  2.231985 0.0  7.653355  35.478119  7.653355  5.150328  742.816406  756.851562  19  19 1.0    0       55     73     5         5       16      20  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        54935            0
  0   1   5   5  4.138279  1.012049 0.0  5.150328  40.628447  5.150328 13.448985  732.542969  738.925781  15  15 1.0    0       74     88     5         5       21      25  3.000000  3.000000  4.472136  4.472136 1.490712 1.490712 -0.056064 -0.056064         8376            0
  0   1   6   6  8.278717  5.170268 0.0 13.448985  54.077432 13.448985  2.510397  805.503906  830.656250  26  26 1.0    0       89    114     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       104726            0
  0   1   7   7  2.099100  0.411298 0.0  2.510397  56.587829  2.510397  3.298099  720.007812  726.242188   8   8 1.0    0      115    122     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         4331            0
  0   1   8   8  2.747758  0.550341 0.0  3.298099  59.885928  3.298099  3.420125  725.304688  733.066406  10  10 1.0    0      123    132     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        14347            0
  0   1   9   9  2.997360  0.422765 0.0  3.420125  63.306053  3.420125  0.759754  730.148438  737.937500  11  11 1.0    0      133    143     2         2       35      36  5.500000  5.500000  6.363961  6.363961 1.157084 1.157084 -1.880482 -1.880482         7895            0
  0   1  10  10  0.655870  0.103883 0.0  0.759754  64.065807  0.759754  1.308564  711.378906  715.453125   2   2 1.0    0      144    145     2         2       37      38  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          449            0
  0   1  11  11  1.036372  0.272192 0.0  1.308564  65.374371  1.308564  3.732279  719.335938  725.207031   4   4 1.0    0      146    149     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          886            0
  0   1  12  12  3.121478  0.610801 0.0  3.732279  69.106650  3.732279  0.000000  743.253906  755.777344  11  11 1.0    0      150    160     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         4253            0
  1   3   1   1  1.262884  0.879900 0.0  2.142784   2.142784  2.142784  0.000000  701.664062  705.742188  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        84441            0
  1   2   1   1  2.477195  1.143725 0.0  3.620920   5.763704  5.763704  1.168030  729.574219  742.816406  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.624669  2.624669 0.874890 0.874890  0.440732  0.440732        38703            0
  1   2   2   2  0.869613  0.298417 0.0  1.168030   6.931734  1.168030  0.000000  744.773438  752.832031  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2044            0
  1   1   1   1  4.837705  1.555050 0.0  6.392755  12.156459 12.156459 11.276336  757.738281  775.429688  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        22866            0
  1   1   2   2  7.269725  2.838582 0.0 10.108306  23.432795 11.276336  4.392132  799.355469  831.695312  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        59208            0
  1   1   3   3  3.563712  0.828421 0.0  4.392132  27.824928  4.392132 11.354323  745.992188  755.371094  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         6229            0
  1   1   4   4  7.597379  3.756944 0.0 11.354323  39.179251 11.354323  1.680325  804.773438  831.070312  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        82005            0
  1   1   5   5  1.253052  0.427273 0.0  1.680325  40.859576  1.680325 14.464286  730.886719  738.039062   5   5 1.0    0       80     84     5         5       21      25  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000         1577            0
  1   1   6   6  8.294955  6.169331 0.0 14.464286  55.323861 14.464286  2.367810  835.058594  860.558594  26  26 1.0    0       85    110     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       229125            0
  1   1   7   7  2.045925  0.321886 0.0  2.367810  57.691671  2.367810  3.057886  747.457031  755.183594   8   8 1.0    0      111    118     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2864            0
  1   1   8   8  2.656642  0.401244 0.0  3.057886  60.749557  3.057886  3.433886  750.824219  756.453125  10  10 1.0    0      119    128     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        11737            0
  1   1   9   9  2.937903  0.495983 0.0  3.433886  64.183443  3.433886  0.813811  755.273438  763.421875  11  11 1.0    0      129    139     2         2       35      36  5.500000  5.500000  3.535534  3.535534 0.642824 0.642824 -1.181272 -1.181272         7969            0
  1   1  10  10  0.624090  0.189720 0.0  0.813811  64.997253  0.813811  1.258427  738.011719  743.167969   2   2 1.0    0      140    141     2         2       37      38  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          544            0
  1   1  11  11  1.049079  0.209348 0.0  1.258427  66.255681  1.258427  3.620539  747.128906  754.484375   4   4 1.0    0      142    145     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          567            0
  1   1  12  12  3.028190  0.592349 0.0  3.620539  69.876219  3.620539  0.000000  768.738281  782.539062  11  11 1.0    0      146    156     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         4393            0
  2   3   1   1  1.254705  0.893270 0.0  2.147974   2.147974  2.147974  0.000000  739.617188  744.828125  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        86809            0
  2   2   1   1  2.600417  1.246472 0.0  3.846888   5.994863  5.994863  0.811083  770.164062  784.343750  31  31 1.0   31        1     31    10        10        1      10  3.100000  3.100000  2.558211  2.558211 0.825229 0.825229  0.448768  0.448768        38877            0
  2   2   2   2  0.619015  0.192068 0.0  0.811083   6.805946  0.811083  0.000000  866.121094  877.042969  11  11 1.0   11       32     42    10        10       11      20  1.100000  1.100000  0.316228  0.316228 0.287480 0.287480  0.880669  0.880669         4519            0
  2   1   1   1  4.846710  1.411267 0.0  6.257977  12.252839 12.252839 10.890288  808.296875  828.613281  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        29578            0
  2   1   2   2  7.323687  2.755518 0.0 10.079205  23.143128 10.890288  4.479516  847.492188  881.269531  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        44119            0
  2   1   3   3  3.577060  0.902457 0.0  4.479516  27.622644  4.479516 11.126353  800.367188  810.640625  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         4159            0
  2   1   4   4  7.558986  3.567366 0.0 11.126353  38.748997 11.126353  7.690174  857.820312  885.789062  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        93579            0
  2   1   5   5  5.493620  2.196554 0.0  7.690174  46.439171  7.690174 36.854959  827.199219  841.683594  19  19 1.0    0       80     98     5         5       21      25  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        85376            0
  2   1   6   6 11.921665 24.933294 0.0 36.854959  83.294130 36.854959  0.648646 1014.738281 1051.445312  35  35 1.0    0       99    133     6         6       26      31  5.833333  5.833333  3.920034  3.920034 0.672006 0.672006  0.110754  0.110754       781136            0
  2   1   7   7  0.461901  0.186744 0.0  0.648646  83.942775  0.648646  0.907423  856.062500  866.585938   1   1 1.0    0      134    134     1         1       32      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000           72            0
  2   1   8   8  0.795201  0.112222 0.0  0.907423  84.850198  0.907423  0.846107  859.199219  869.593750   3   3 1.0    0      135    137     2         2       33      34  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          457            0
  2   1   9   9  0.629439  0.216669 0.0  0.846107  85.696305  0.846107  0.921408  859.585938  869.843750   2   2 1.0    0      138    139     2         2       35      36  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          458            0
  2   1  10  10  0.800481  0.120927 0.0  0.921408  86.617713  0.921408  0.834776  861.285156  871.277344   3   3 1.0    0      140    142     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          327            0
  2   1  11  11  0.627800  0.206976 0.0  0.834776  87.452489  0.834776 26.003151  860.496094  870.597656   2   2 1.0    0      143    144     2         2       39      40  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          286            0
  2   1  12  12  8.523824 17.479326 0.0 26.003151 113.455640 26.003151  0.000000  954.734375  975.554688  26  26 1.0    0      145    170     2         2       41      42 13.000000 13.000000 15.556349 15.556349 1.296362 1.296362 -3.049313 -3.049313       202553            0
  3   3   1   1  1.248875  0.841139 0.0  2.090014   2.090014  2.090014  0.000000  869.281250  877.347656  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        82781            0
  3   2   1   1  2.519979  1.700957 0.0  4.220936   6.310950  6.310950  1.230147  898.847656  916.058594  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.538591  2.538591 0.846197 0.846197  0.451170  0.451170        55434            0
  3   2   2   2  0.878795  0.351353 0.0  1.230147   7.541097  1.230147  0.000000  792.851562  805.730469  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2491            0
  3   1   1   1  4.844188  1.712406 0.0  6.556594  12.867544 12.867544 10.745463  931.222656  952.730469  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        25593            0
  3   1   2   2  7.213578  2.301738 0.0  9.515316  23.613007 10.745463  4.413745  970.308594 1003.898438  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        27030            0
  3   1   3   3  3.587715  0.826030 0.0  4.413745  28.026752  4.413745 11.652578  924.066406  937.292969  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         4800            0
  3   1   4   4  7.619371  4.033207 0.0 11.652578  39.679330 11.652578  1.616644  976.097656 1005.757812  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        90729            0
  3   1   5   5  1.252167  0.364477 0.0  1.616644  41.295974  1.616644 13.126535  900.039062  910.679688   5   5 1.0    0       80     84     5         5       21      25  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000         1217            0
  3   1   6   6  8.212611  4.913923 0.0 13.126535  54.422509 13.126535  2.365550  984.187500 1011.953125  26  26 1.0    0       85    110     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       115045            0
  3   1   7   7  2.052871  0.312678 0.0  2.365550  56.788059  2.365550  3.332272  818.945312  832.898438   8   8 1.0    0      111    118     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2644            0
  3   1   8   8  2.715470  0.616802 0.0  3.332272  60.120331  3.332272  3.536543  841.980469  857.636719  10  10 1.0    0      119    128     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        12314            0
  3   1   9   9  2.947419  0.589124 0.0  3.536543  63.656874  3.536543  0.732385  851.914062  866.265625  11  11 1.0    0      129    139     2         2       35      36  5.500000  5.500000  6.363961  6.363961 1.157084 1.157084 -1.880482 -1.880482         8699            0
  3   1  10  10  0.636794  0.095591 0.0  0.732385  64.389259  0.732385  1.407379  836.808594  847.523438   2   2 1.0    0      140    141     2         2       37      38  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          517            0
  3   1  11  11  1.047999  0.359380 0.0  1.407379  65.796637  1.407379  3.573908  849.609375  862.519531   4   4 1.0    0      142    145     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          472            0
  3   1  12  12  3.043194  0.530715 0.0  3.573908  69.370546  3.573908  0.000000  879.316406  897.945312  11  11 1.0    0      146    156     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         3645            0
  4   3   1   1  1.250005  0.842459 0.0  2.092465   2.092465  2.092465  0.000000  854.273438  864.398438  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        82243            0
  4   2   1   1  2.474832  1.351619 0.0  3.826451   5.918916  5.918916  1.093085  888.457031  906.917969  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.624669  2.624669 0.874890 0.874890  0.440732  0.440732        43522            0
  4   2   2   2  0.878836  0.214250 0.0  1.093085   7.012001  1.093085  0.000000  910.023438  919.335938  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2804            0
  4   1   1   1  4.872428  1.740739 0.0  6.613167  12.532082 12.532082 11.198554  924.578125  945.144531  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        29819            0
  4   1   2   2  7.352552  2.752917 0.0 10.105469  23.730636 11.198554  4.604650  972.835938 1009.011719  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        30620            0
  4   1   3   3  3.589160  1.015489 0.0  4.604650  28.335286  4.604650 11.401973  923.039062  935.488281  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.577709  3.577709 1.376042 1.376042  0.054826  0.054826         7589            0
  4   1   4   4  7.607098  3.794875 0.0 11.401973  39.737259 11.401973  1.600245  980.566406 1009.656250  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        87313            0
  4   1   5   5  1.242855  0.357390 0.0  1.600245  41.337504  1.600245 15.119686  899.726562  909.625000   5   5 1.0    0       80     84     5         5       21      25  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000         1176            0
  4   1   6   6  8.247651  6.872035 0.0 15.119686  56.457190 15.119686  2.545817  998.261719 1025.121094  26  26 1.0    0       85    110     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       151025            0
  4   1   7   7  2.054905  0.490911 0.0  2.545817  59.003006  2.545817  3.201284  913.144531  922.304688   8   8 1.0    0      111    118     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2188            0
  4   1   8   8  2.717647  0.483637 0.0  3.201284  62.204290  3.201284  3.208312  920.375000  931.558594  10  10 1.0    0      119    128     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841         5012            0
  4   1   9   9  2.642329  0.565982 0.0  3.208312  65.412602  3.208312  0.726537  919.164062  930.062500  10  10 1.0    0      129    138     2         2       35      36  5.000000  5.000000  4.242641  4.242641 0.848528 0.848528 -1.390294 -1.390294         6135            0
  4   1  10  10  0.627470  0.099067 0.0  0.726537  66.139139  0.726537  1.732441  903.996094  910.871094   2   2 1.0    0      139    140     2         2       37      38  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          415            0
  4   1  11  11  1.309790  0.422651 0.0  1.732441  67.871580  1.732441  3.583020  915.113281  923.031250   5   5 1.0    0      141    145     3         3       39      41  1.666667  1.666667  1.154701  1.154701 0.692820 0.692820  0.301253  0.301253         1923            0
  4   1  12  12  3.048284  0.534736 0.0  3.583020  71.454600  3.583020  0.000000  935.519531  951.164062  11  11 1.0    0      146    156     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         3702            0
  5   3   1   1  1.296858  0.902643 0.0  2.199501   2.199501  2.199501  0.000000  906.140625  913.234375  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        89588            0
  5   2   1   1  2.482530  1.301299 0.0  3.783830   5.983331  5.983331  1.085522  935.753906  951.804688  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.666667  2.666667 0.888889 0.888889  0.435729  0.435729        38876            0
  5   2   2   2  0.869996  0.215526 0.0  1.085522   7.068852  1.085522  0.000000  983.968750  993.273438  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2604            0
  5   1   1   1  4.818303  1.536923 0.0  6.355226  12.338556 12.338556  6.788596  967.234375  987.000000  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        42121            0
  5   1   2   2  4.511148  1.191926 0.0  5.703074  19.127152  6.788596  5.330246  965.332031  987.273438  16  16 1.0    0       18     33     5         5        6      10  3.200000  3.200000  4.919350  4.919350 1.537297 1.537297 -0.104874 -0.104874        15747            0
  5   1   3   3  4.501064  0.829181 0.0  5.330246  24.457398  5.330246 10.622524 1008.855469 1020.765625  13  13 1.0    0       34     46     5         5       11      15  2.600000  2.600000  2.607681  2.607681 1.002954 1.002954  0.202787  0.202787         4661            0
  5   1   4   4  7.529935  3.092589 0.0 10.622524  35.079922 10.622524  1.590174 1058.175781 1087.238281  25  25 1.0    0       47     71     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        82205            0
  5   1   5   5  1.254011  0.336163 0.0  1.590174  36.670096  1.590174 12.634354  986.164062  995.949219   5   5 1.0    0       72     76     5         5       21      25  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000         1660            0
  5   1   6   6  8.164905  4.469449 0.0 12.634354  49.304449 12.634354  2.358114 1072.753906 1100.062500  26  26 1.0    0       77    102     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       110138            0
  5   1   7   7  2.034861  0.323253 0.0  2.358114  51.662563  2.358114  3.223728  985.738281  994.441406   8   8 1.0    0      103    110     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         6724            0
  5   1   8   8  2.740870  0.482858 0.0  3.223728  54.886291  3.223728  3.186017  993.007812 1003.125000  10  10 1.0    0      111    120     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        20542            0
  5   1   9   9  2.602137  0.583880 0.0  3.186017  58.072309  3.186017  0.895280  987.511719 1003.675781  10  10 1.0    0      121    130     2         2       35      36  5.000000  5.000000  4.242641  4.242641 0.848528 0.848528 -1.390294 -1.390294         5514            0
  5   1  10  10  0.782931  0.112349 0.0  0.895280  58.967588  0.895280  1.404345  972.738281  984.328125   3   3 1.0    0      131    133     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          848            0
  5   1  11  11  1.011422  0.392923 0.0  1.404345  60.371933  1.404345  7.015805  981.609375  995.035156   4   4 1.0    0      134    137     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          661            0
  5   1  12  12  5.261548  1.754257 0.0  7.015805  67.387738  7.015805  0.000000 1026.015625 1045.761719  18  18 1.0    0      138    155     3         3       42      44  6.000000  6.000000  5.033223  5.033223 0.888216 0.888216 -0.635956 -0.635956        18343            0
  6   3   1   1  1.256611  0.867650 0.0  2.124261   2.124261  2.124261  0.000000  977.902344  987.527344  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        87913            0
  6   2   1   1  2.469653  1.416206 0.0  3.885859   6.010120  6.010120  1.077874 1007.750000 1025.976562  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.581989  2.581989 0.860663 0.860663  0.445876  0.445876        41084            0
  6   2   2   2  0.864545  0.213329 0.0  1.077874   7.087994  1.077874  0.000000 1014.691406 1025.253906  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2316            0
  6   1   1   1  4.862051  1.592980 0.0  6.455032  12.465152 12.465152 10.957785 1039.906250 1062.273438  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        52451            0
  6   1   2   2  7.202099  2.677813 0.0  9.879911  23.422937 10.957785  4.409815 1079.929688 1118.062500  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        69883            0
  6   1   3   3  3.588210  0.821605 0.0  4.409815  27.832753  4.409815 10.276506 1033.863281 1048.210938  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         5590            0
  6   1   4   4  7.427977  2.848529 0.0 10.276506  38.109259 10.276506  1.599749 1079.906250 1110.421875  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        66101            0
  6   1   5   5  1.254861  0.344888 0.0  1.599749  39.709007  1.599749 15.119872 1010.472656 1021.484375   5   5 1.0    0       80     84     5         5       21      25  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000         1548            0
  6   1   6   6  8.289412  6.830460 0.0 15.119872  54.828879 15.119872  2.328895 1100.265625 1128.929688  26  26 1.0    0       85    110     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       216342            0
  6   1   7   7  2.019686  0.309209 0.0  2.328895  57.157773  2.328895  3.384719 1016.406250 1026.628906   8   8 1.0    0      111    118     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         6372            0
  6   1   8   8  2.685188  0.699531 0.0  3.384719  60.542492  3.384719  2.944357 1025.183594 1037.355469  10  10 1.0    0      119    128     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841         8996            0
  6   1   9   9  2.571728  0.372629 0.0  2.944357  63.486849  2.944357  1.136111 1024.253906 1036.160156  10  10 1.0    0      129    138     2         2       35      36  5.000000  5.000000  4.242641  4.242641 0.848528 0.848528 -1.390294 -1.390294         4484            0
  6   1  10  10  0.785627  0.350484 0.0  1.136111  64.622960  1.136111  1.194980 1008.382812 1016.410156   3   3 1.0    0      139    141     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          637            0
  6   1  11  11  1.008829  0.186151 0.0  1.194980  65.817941  1.194980 20.361689 1016.621094 1026.621094   4   4 1.0    0      142    145     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          921            0
  6   1  12  12  7.408645 12.953044 0.0 20.361689  86.179629 20.361689  0.000000 1088.105469 1118.089844  24  24 1.0    0      146    169     3         3       42      44  8.000000  8.000000  3.464102  3.464102 0.433013 0.433013 -0.361780 -0.361780       152091            0
  7   3   1   1  1.254083  1.313966 0.0  2.568049   2.568049  2.568049  0.000000 1010.570312 1018.429688  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000       109038            0
  7   2   1   1  1.798937  0.493052 0.0  2.291989   4.860038  4.860038  2.077538 1030.878906 1041.488281  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.756810  2.756810 1.148671 1.148671  0.425181  0.425181        11219            0
  7   2   2   2  1.453340  0.624199 0.0  2.077538   6.937576  2.077538  0.000000 1038.957031 1050.562500  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.490712  1.490712 0.745356 0.745356  0.603676  0.603676         8568            0
  7   1   1   1  4.596566  1.227913 0.0  5.824479  10.684517 10.684517  7.566747 1065.128906 1078.789062  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        18237            0
  7   1   2   2  4.185364  1.303844 0.0  5.489208  18.251263  7.566747  3.575044 1061.351562 1082.503906  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         4172            0
  7   1   3   3  2.952344  0.622700 0.0  3.575044  21.826307  3.575044  7.154229 1048.750000 1060.179688  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         2837            0
  7   1   4   4  5.150669  2.003560 0.0  7.154229  28.980537  7.154229  4.698433 1078.968750 1106.210938  18  18 1.0    0       43     60     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        82724            0
  7   1   5   5  3.895867  0.802566 0.0  4.698433  33.678969  4.698433  1.285492 1065.117188 1082.625000  14  14 1.0    0       61     74     4         4       17      20  3.500000  3.500000  4.358899  4.358899 1.245400 1.245400 -0.210968 -0.210968         6489            0
  7   1   6   6  1.038936  0.246556 0.0  1.285492  34.964461  1.285492  0.954604 1034.921875 1044.441406   4   4 1.0    0       75     78     4         4       21      24  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          735            0
  7   1   7   7  0.782963  0.171641 0.0  0.954604  35.919065  0.954604  6.814915 1028.410156 1036.019531   3   3 1.0    0       79     81     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          460            0
  7   1   8   8  4.925177  1.889738 0.0  6.814915  42.733980  6.814915  3.461069 1075.921875 1089.800781  17  17 1.0    0       82     98     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        42253            0
  7   1   9   9  2.933922  0.527147 0.0  3.461069  46.195048  3.461069  3.725187 1057.007812 1071.175781  11  11 1.0    0       99    109     3         3       31      33  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         3166            0
  7   1  10  10  3.049643  0.675544 0.0  3.725187  49.920236  3.725187  6.637516 1060.296875 1073.343750  11  11 1.0    0      110    120     3         3       34      36  3.666667  3.666667  3.055050  3.055050 0.833196 0.833196 -0.274301 -0.274301         8979            0
  7   1  11  11  5.150852  1.486664 0.0  6.637516  56.557752  6.637516 15.949375 1089.625000 1116.640625  18  18 1.0    0      121    138     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        17923            0
  7   1  12  12  6.937631  9.011744 0.0 15.949375  72.507127 15.949375  0.000000 1101.718750 1116.398438  23  23 1.0    0      139    161     4         4       41      44  5.750000  5.750000  3.774917  3.774917 0.656507 0.656507 -0.127738 -0.127738        97173            0
  8   3   1   1  1.252039  0.973871 0.0  2.225909   2.225909  2.225909  0.000000 1034.183594 1042.031250  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        95140            0
  8   2   1   1  2.250983  1.391116 0.0  3.642100   5.868009  5.868009  1.301785 1057.750000 1066.089844  28  28 1.0   28        1     28    10        10        1      10  2.800000  2.800000  2.740641  2.740641 0.978800 0.978800  0.427054  0.427054        36890            0
  8   2   2   2  1.052470  0.249315 0.0  1.301785   7.169794  1.301785  0.000000 1071.894531 1083.320312  16  16 1.0   16       29     44    10        10       11      20  1.600000  1.600000  0.966092  0.966092 0.603807 0.603807  0.706396  0.706396         4257            0
  8   1   1   1  4.570225  1.381397 0.0  5.951623  11.819632 11.819632  6.399090 1089.394531 1102.894531  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        26572            0
  8   1   2   2  4.120059  0.977245 0.0  5.097305  18.218722  6.399090  7.623788 1083.183594 1093.617188  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         7926            0
  8   1   3   3  5.758758  1.865030 0.0  7.623788  25.842510  7.623788 12.363689 1106.980469 1122.421875  20  20 1.0    0       32     51     5         5        9      13  4.000000  4.000000  3.741657  3.741657 0.935414 0.935414  0.032963  0.032963        31082            0
  8   1   4   4  7.697519  4.666170 0.0 12.363689  38.206199 12.363689  1.920125 1137.949219 1167.976562  25  25 1.0    0       52     76     5         5       14      18  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       195791            0
  8   1   5   5  1.531886  0.388239 0.0  1.920125  40.126324  1.920125 12.839686 1067.277344 1076.265625   6   6 1.0    0       77     82     5         5       19      23  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         1493            0
  8   1   6   6  8.219150  4.620536 0.0 12.839686  52.966010 12.839686  1.026115 1152.382812 1187.273438  26  26 1.0    0       83    108     5         5       24      28  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       174144            0
  8   1   7   7  0.625685  0.400430 0.0  1.026115  53.992125  1.026115  0.905192 1060.546875 1070.218750   2   2 1.0    0      109    110     2         2       29      30  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          221            0
  8   1   8   8  0.790505  0.114687 0.0  0.905192  54.897316  0.905192  6.604851 1061.910156 1071.519531   3   3 1.0    0      111    113     2         2       31      32  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          276            0
  8   1   9   9  4.928720  1.676131 0.0  6.604851  61.502168  6.604851  3.154975 1110.492188 1127.003906  17  17 1.0    0      114    130     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        56148            0
  8   1  10  10  2.657719  0.497256 0.0  3.154975  64.657142  3.154975  1.518379 1090.828125 1108.421875  10  10 1.0    0      131    140     3         3       36      38  3.333333  3.333333  4.041452  4.041452 1.212436 1.212436 -0.472489 -0.472489         7050            0
  8   1  11  11  1.028728  0.489652 0.0  1.518379  66.175522  1.518379  5.742862 1073.253906 1085.464844   4   4 1.0    0      141    144     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          427            0
  8   1  12  12  4.582686  1.160176 0.0  5.742862  71.918383  5.742862  0.000000 1109.480469 1124.007812  16  16 1.0    0      145    160     3         3       42      44  5.333333  5.333333  7.505553  7.505553 1.407291 1.407291 -0.948567 -0.948567         9347            0
  9   3   1   1  1.257273  0.795331 0.0  2.052604   2.052604  2.052604  0.000000 1064.882812 1074.367188  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        77932            0
  9   2   1   1  2.009567  0.939231 0.0  2.948798   5.001402  5.001402  1.599104 1086.867188 1098.054688  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.913570  2.913570 1.120604 1.120604  0.407427  0.407427        16107            0
  9   2   2   2  1.256546  0.342558 0.0  1.599104   6.600506  1.599104  0.000000 1091.960938 1102.804688  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939        10586            0
  9   1   1   1  4.544196  1.306886 0.0  5.851082  10.852484 10.852484  6.760874 1119.656250 1135.230469  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        20552            0
  9   1   2   2  4.200007  0.961763 0.0  5.161770  17.613358  6.760874  4.383528 1115.781250 1139.101562  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10955            0
  9   1   3   3  3.255463  1.128065 0.0  4.383528  21.996886  4.383528  5.458733 1106.527344 1117.074219  12  12 1.0    0       32     43     4         4        9      12  3.000000  3.000000  4.000000  4.000000 1.333333 1.333333 -0.160964 -0.160964        24873            0
  9   1   4   4  4.493888  0.964845 0.0  5.458733  27.455619  5.458733 12.040007 1122.183594 1139.816406  16  16 1.0    0       44     59     4         4       13      16  4.000000  4.000000  6.000000  6.000000 1.500000 1.500000 -0.403677 -0.403677         4330            0
  9   1   5   5  7.702782  4.337225 0.0 12.040007  39.495626 12.040007  2.247752 1170.882812 1203.714844  25  25 1.0    0       60     84     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        93795            0
  9   1   6   6  1.520703  0.727050 0.0  2.247752  41.743379  2.247752  1.132996 1095.812500 1106.621094   6   6 1.0    0       85     90     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         1669            0
  9   1   7   7  0.947803  0.185192 0.0  1.132996  42.876375  1.132996  0.951563 1083.015625 1093.218750   4   4 1.0    0       91     94     3         3       27      29  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          437            0
  9   1   8   8  0.781742  0.169821 0.0  0.951563  43.827937  0.951563  6.857409 1083.121094 1093.105469   3   3 1.0    0       95     97     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          452            0
  9   1   9   9  4.935009  1.922400 0.0  6.857409  50.685346  6.857409  6.936895 1129.523438 1143.968750  17  17 1.0    0       98    114     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        33489            0
  9   1  10  10  5.137541  1.799353 0.0  6.936895  57.622240  6.936895  3.537959 1132.207031 1146.046875  18  18 1.0    0      115    132     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        35110            0
  9   1  11  11  2.979652  0.558307 0.0  3.537959  61.160199  3.537959 11.653652 1109.023438 1123.304688  11  11 1.0    0      133    143     3         3       39      41  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        14399            0
  9   1  12  12  7.200061  4.453591 0.0 11.653652  72.813852 11.653652  0.000000 1156.781250 1176.828125  24  24 1.0    0      144    167     3         3       42      44  8.000000  8.000000 12.124356 12.124356 1.515544 1.515544 -1.343383 -1.343383        39813            0
 10   3   1   1  1.254620  0.850361 0.0  2.104981   2.104981  2.104981  0.000000 1086.683594 1097.019531  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        81287            0
 10   2   1   1  2.550930  1.260458 0.0  3.811388   5.916369  5.916369  1.088221 1116.500000 1135.976562  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.748737  2.748737 0.916246 0.916246  0.426115  0.426115        45854            0
 10   2   2   2  0.872556  0.215665 0.0  1.088221   7.004590  1.088221  0.000000 1123.871094 1137.324219  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2610            0
 10   1   1   1  4.857689  1.492932 0.0  6.350621  12.266990 12.266990 10.864570 1148.343750 1171.964844  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        34300            0
 10   1   2   2  7.278163  2.498186 0.0  9.776349  23.131561 10.864570  4.413529 1189.347656 1228.375000  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        58658            0
 10   1   3   3  3.569643  0.843886 0.0  4.413529  27.545090  4.413529  7.281102 1142.242188 1157.902344  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         7655            0
 10   1   4   4  5.418026  1.863075 0.0  7.281102  34.826192  7.281102  5.447329 1161.210938 1181.636719  19  19 1.0    0       55     73     5         5       16      20  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        64335            0
 10   1   5   5  4.137925  1.309404 0.0  5.447329  40.273520  5.447329 13.932356 1147.863281 1160.656250  15  15 1.0    0       74     88     5         5       21      25  3.000000  3.000000  3.937004  3.937004 1.312335 1.312335  0.007878  0.007878         6740            0
 10   1   6   6  8.190608  5.741748 0.0 13.932356  54.205877 13.932356  2.718999 1210.128906 1241.742188  26  26 1.0    0       89    114     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       152092            0
 10   1   7   7  2.046583  0.672416 0.0  2.718999  56.924876  2.718999  3.138371 1126.699219 1139.925781   8   8 1.0    0      115    122     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2489            0
 10   1   8   8  2.679826  0.458545 0.0  3.138371  60.063247  3.138371  2.629904 1132.000000 1146.945312  10  10 1.0    0      123    132     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        11716            0
 10   1   9   9  2.310293  0.319611 0.0  2.629904  62.693151  2.629904  1.150021 1129.429688 1142.304688   9   9 1.0    0      133    141     2         2       35      36  4.500000  4.500000  4.949747  4.949747 1.099944 1.099944 -1.572828 -1.572828         5904            0
 10   1  10  10  1.014521  0.135499 0.0  1.150021  63.843172  1.150021  1.561129 1118.367188 1129.281250   4   4 1.0    0      142    145     2         2       37      38  2.000000  2.000000  1.414214  1.414214 0.707107 0.707107 -0.271553 -0.271553          445            0
 10   1  11  11  1.011065  0.550064 0.0  1.561129  65.404301  1.561129 16.516556 1125.441406 1138.312500   4   4 1.0    0      146    149     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          686            0
 10   1  12  12  7.416719  9.099836 0.0 16.516556  81.920857 16.516556  0.000000 1196.464844 1229.726562  24  24 1.0    0      150    173     3         3       42      44  8.000000  8.000000  4.725816  4.725816 0.644429 0.644429 -0.588354 -0.588354       117641            0
 11   3   1   1  1.263924  0.848757 0.0  2.112681   2.112681  2.112681  0.000000 1116.312500 1127.234375  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        88571            0
 11   2   1   1  2.532654  1.733743 0.0  4.266397   6.379078  6.379078  1.083073 1146.570312 1167.121094  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.748737  2.748737 0.916246 0.916246  0.426115  0.426115        62854            0
 11   2   2   2  0.874319  0.208755 0.0  1.083073   7.462152  1.083073  0.000000 1156.011719 1169.683594  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.699206  0.699206 0.499433 0.499433  0.769754  0.769754         3215            0
 11   1   1   1  4.883759  1.967310 0.0  6.851070  13.230148 13.230148 11.345800 1182.574219 1208.488281  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        57382            0
 11   1   2   2  7.315702  2.947025 0.0 10.262727  24.575948 11.345800  4.462679 1219.988281 1257.851562  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        46402            0
 11   1   3   3  3.580192  0.882487 0.0  4.462679  29.038627  4.462679  7.782316 1173.234375 1189.839844  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.577709  3.577709 1.376042 1.376042  0.054826  0.054826         5764            0
 11   1   4   4  5.580013  2.202303 0.0  7.782316  36.820944  7.782316  5.555238 1193.968750 1215.734375  19  19 1.0    0       55     73     5         5       16      20  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        51085            0
 11   1   5   5  4.203804  1.351433 0.0  5.555238  42.376182  5.555238 13.256133 1181.195312 1194.562500  15  15 1.0    0       74     88     5         5       21      25  3.000000  3.000000  3.937004  3.937004 1.312335 1.312335  0.007878  0.007878         5159            0
 11   1   6   6  8.224259  5.031874 0.0 13.256133  55.632314 13.256133  2.754441 1243.167969 1274.859375  26  26 1.0    0       89    114     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       104506            0
 11   1   7   7  2.038340  0.716101 0.0  2.754441  58.386755  2.754441  3.063140 1158.781250 1172.292969   8   8 1.0    0      115    122     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2395            0
 11   1   8   8  2.625974  0.437167 0.0  3.063140  61.449896  3.063140  2.949867 1163.859375 1178.984375  10  10 1.0    0      123    132     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841         5901            0
 11   1   9   9  2.580935  0.368931 0.0  2.949867  64.399762  2.949867  0.898934 1164.503906 1180.046875  10  10 1.0    0      133    142     2         2       35      36  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841         8907            0
 11   1  10  10  0.784775  0.114160 0.0  0.898934  65.298697  0.898934  1.595329 1149.394531 1160.722656   3   3 1.0    0      143    145     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          340            0
 11   1  11  11  1.009799  0.585530 0.0  1.595329  66.894025  1.595329  3.514696 1157.582031 1170.675781   4   4 1.0    0      146    149     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          788            0
 11   1  12  12  2.974954  0.539742 0.0  3.514696  70.408721  3.514696  0.000000 1181.597656 1201.250000  11  11 1.0    0      150    160     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         4700            0
 12   3   1   1  1.257941  0.887362 0.0  2.145303   2.145303  2.145303  0.000000 1151.902344 1163.035156  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        90395            0
 12   2   1   1  2.047319  0.742306 0.0  2.789625   4.934928  4.934928  1.565444 1173.492188 1186.476562  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.913570  2.913570 1.120604 1.120604  0.407427  0.407427        19350            0
 12   2   2   2  1.258989  0.306455 0.0  1.565444   6.500372  1.565444  0.000000 1179.210938 1191.136719  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  1.135292  1.135292 0.630718 0.630718  0.670543  0.670543         6436            0
 12   1   1   1  4.634738  1.318207 0.0  5.952945  10.887873 10.887873  7.048715 1207.531250 1224.613281  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        22877            0
 12   1   2   2  4.145439  1.337832 0.0  5.483271  17.936588  7.048715  1.288898 1201.039062 1215.082031  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10004            0
 12   1   3   3  1.024763  0.264135 0.0  1.288898  19.225485  1.288898  5.497935 1172.890625 1186.125000   4   4 1.0    0       32     35     4         4        9      12  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          506            0
 12   1   4   4  4.540226  0.957709 0.0  5.497935  24.723421  5.497935 12.322792 1211.246094 1228.398438  16  16 1.0    0       36     51     4         4       13      16  4.000000  4.000000  6.000000  6.000000 1.500000 1.500000 -0.403677 -0.403677         5024            0
 12   1   5   5  7.699208  4.623584 0.0 12.322792  37.046213 12.322792  1.951810 1260.121094 1292.171875  25  25 1.0    0       52     76     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        86684            0
 12   1   6   6  1.534831  0.416978 0.0  1.951810  38.998023  1.951810  0.961064 1181.195312 1193.074219   6   6 1.0    0       77     82     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         2006            0
 12   1   7   7  0.787589  0.173475 0.0  0.961064  39.959087  0.961064  6.751510 1169.792969 1181.050781   3   3 1.0    0       83     85     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          530            0
 12   1   8   8  4.970972  1.780538 0.0  6.751510  46.710597  6.751510  7.616949 1219.015625 1236.910156  17  17 1.0    0       86    102     3         3       30      32  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        42143            0
 12   1   9   9  5.182560  2.434389 0.0  7.616949  54.327546  7.616949  3.579589 1222.449219 1239.914062  18  18 1.0    0      103    120     3         3       33      35  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        48745            0
 12   1  10  10  3.001873  0.577716 0.0  3.579589  57.907134  3.579589  4.588857 1203.187500 1220.917969  11  11 1.0    0      121    131     3         3       36      38  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        18677            0
 12   1  11  11  3.856675  0.732182 0.0  4.588857  62.495991  4.588857  7.101445 1213.179688 1237.007812  14  14 1.0    0      132    145     3         3       39      41  4.666667  4.666667  6.350853  6.350853 1.360897 1.360897 -0.815760 -0.815760         4613            0
 12   1  12  12  5.261280  1.840165 0.0  7.101445  69.597435  7.101445  0.000000 1226.105469 1246.875000  18  18 1.0    0      146    163     3         3       42      44  6.000000  6.000000  8.660254  8.660254 1.443376 1.443376 -1.064441 -1.064441        17652            0
 13   3   1   1  1.261602  1.242458 0.0  2.504060   2.504060  2.504060  0.000000 1177.269531 1188.378906  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        87952            0
 13   2   1   1  1.939904  0.605559 0.0  2.545462   5.049522  5.049522  1.827574 1198.296875 1211.632812  25  25 1.0   25        1     25    10        10        1      10  2.500000  2.500000  2.915476  2.915476 1.166190 1.166190  0.407215  0.407215        14248            0
 13   2   2   2  1.358556  0.469018 0.0  1.827574   6.877096  1.827574  0.000000 1206.671875 1218.246094  19  19 1.0   19       26     44    10        10       11      20  1.900000  1.900000  1.370320  1.370320 0.721221 0.721221  0.625193  0.625193        19224            0
 13   1   1   1  4.553598  1.288750 0.0  5.842348  10.891870 10.891870  7.057140 1231.757812 1248.917969  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        13829            0
 13   1   2   2  4.192490  1.037076 0.0  5.229566  17.949011  7.057140  7.279537 1228.085938 1252.796875  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10452            0
 13   1   3   3  5.456894  1.822643 0.0  7.279537  25.228547  7.279537  1.596281 1248.464844 1279.816406  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        22335            0
 13   1   4   4  1.285883  0.310398 0.0  1.596281  26.824829  1.596281 11.573006 1202.117188 1214.113281   5   5 1.0    0       51     55     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1436            0
 13   1   5   5  7.403591  4.169416 0.0 11.573006  38.397835 11.573006  2.236493 1271.378906 1289.480469  24  24 1.0    0       56     79     4         4       17      20  6.000000  6.000000  3.464102  3.464102 0.577350 0.577350 -0.079185 -0.079185        74070            0
 13   1   6   6  1.782551  0.453943 0.0  2.236493  40.634328  2.236493  0.966457 1211.761719 1227.136719   7   7 1.0    0       80     86     5         5       21      25  1.400000  1.400000  0.547723  0.547723 0.391230 0.391230  0.728611  0.728611         1868            0
 13   1   7   7  0.777971  0.188486 0.0  0.966457  41.600785  0.966457  0.953541 1196.675781 1207.898438   3   3 1.0    0       87     89     3         3       26      28  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          371            0
 13   1   8   8  0.780463  0.173078 0.0  0.953541  42.554326  0.953541  6.644776 1197.082031 1208.441406   3   3 1.0    0       90     92     3         3       29      31  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          523            0
 13   1   9   9  4.952051  1.692725 0.0  6.644776  49.199102  6.644776  3.197469 1241.015625 1256.230469  17  17 1.0    0       93    109     3         3       32      34  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        58859            0
 13   1  10  10  2.702886  0.494583 0.0  3.197469  52.396571  3.197469  6.810316 1220.367188 1237.558594  10  10 1.0    0      110    119     3         3       35      37  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         2323            0
 13   1  11  11  4.849835  1.960481 0.0  6.810316  59.206887  6.810316 44.865919 1243.730469 1258.589844  17  17 1.0    0      120    136     3         3       38      40  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        52923            0
 13   1  12  12 11.406667 33.459252 0.0 44.865919 104.072806 44.865919  0.000000 1406.492188 1437.554688  34  34 1.0    0      137    170     4         4       41      44  8.500000  8.500000 10.847427 10.847427 1.276168 1.276168 -0.783251 -0.783251       408194            0
 14   3   1   1  1.258888  0.898614 0.0  2.157502   2.157502  2.157502  0.000000 1280.156250 1295.593750  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        88196            0
 14   2   1   1  1.812196  0.520798 0.0  2.332994   4.490496  4.490496  1.839158 1301.757812 1319.152344  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580         9451            0
 14   2   2   2  1.457048  0.382110 0.0  1.839158   6.329654  1.839158  0.000000 1315.406250 1329.246094  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  0.942809  0.942809 0.471405 0.471405  0.711570  0.711570         8375            0
 14   1   1   1  4.644623  1.460782 0.0  6.105405  10.595901 10.595901  7.434745 1339.207031 1359.375000  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        22587            0
 14   1   2   2  4.179926  1.415661 0.0  5.595587  18.030646  7.434745  3.588035 1334.789062 1362.066406  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         4810            0
 14   1   3   3  2.949250  0.638784 0.0  3.588035  21.618680  3.588035  6.860363 1326.699219 1344.300781  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         5554            0
 14   1   4   4  5.134120  1.726243 0.0  6.860363  28.479043  6.860363  4.357629 1355.605469 1389.261719  18  18 1.0    0       43     60     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        34485            0
 14   1   5   5  3.571378  0.786251 0.0  4.357629  32.836672  4.357629  2.050842 1338.996094 1363.304688  13  13 1.0    0       61     73     4         4       17      20  3.250000  3.250000  4.500000  4.500000 1.384615 1.384615 -0.229716 -0.229716         4861            0
 14   1   6   6  1.297142  0.753700 0.0  2.050842  34.887514  2.050842  0.950816 1314.152344 1329.031250   5   5 1.0    0       74     78     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1616            0
 14   1   7   7  0.778887  0.171929 0.0  0.950816  35.838330  0.950816  6.538395 1305.039062 1318.996094   3   3 1.0    0       79     81     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          491            0
 14   1   8   8  4.926090  1.612305 0.0  6.538395  42.376725  6.538395  3.489178 1352.507812 1372.550781  17  17 1.0    0       82     98     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        29201            0
 14   1   9   9  2.944216  0.544962 0.0  3.489178  45.865903  3.489178  4.279846 1333.785156 1354.164062  11  11 1.0    0       99    109     3         3       31      33  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         2919            0
 14   1  10  10  3.074949  1.204897 0.0  4.279846  50.145750  4.279846  6.512678 1336.167969 1356.085938  11  11 1.0    0      110    120     3         3       34      36  3.666667  3.666667  3.055050  3.055050 0.833196 0.833196 -0.274301 -0.274301        13514            0
 14   1  11  11  5.195726  1.316952 0.0  6.512678  56.658428  6.512678  1.635520 1366.882812 1400.351562  18  18 1.0    0      121    138     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        35436            0
 14   1  12  12  1.326122  0.309398 0.0  1.635520  58.293948  1.635520  0.000000 1323.695312 1341.191406   5   5 1.0    0      139    143     4         4       41      44  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519          888            0
 15   3   1   1  1.263751  0.781960 0.0  2.045711   2.045711  2.045711  0.000000 1308.851562 1322.996094  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        76994            0
 15   2   1   1  2.042115  0.766730 0.0  2.808845   4.854557  4.854557  1.617532 1330.765625 1346.679688  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.913570  2.913570 1.120604 1.120604  0.407427  0.407427        20570            0
 15   2   2   2  1.263682  0.353851 0.0  1.617532   6.472089  1.617532  0.000000 1337.921875 1352.000000  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939        14417            0
 15   1   1   1  4.564186  1.783201 0.0  6.347388  11.201944 11.201944  6.848347 1362.820312 1382.679688  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        18380            0
 15   1   2   2  4.199474  1.031341 0.0  5.230815  18.050292  6.848347  3.589748 1359.097656 1386.558594  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         7152            0
 15   1   3   3  2.940490  0.649258 0.0  3.589748  21.640040  3.589748  1.596837 1349.804688 1367.117188  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         4587            0
 15   1   4   4  1.289454  0.307383 0.0  1.596837  23.236877  1.596837 11.784848 1333.320312 1347.800781   5   5 1.0    0       43     47     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1655            0
 15   1   5   5  7.623920  4.160929 0.0 11.784848  35.021725 11.784848  2.435024 1413.160156 1448.953125  25  25 1.0    0       48     72     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       117396            0
 15   1   6   6  1.536671  0.898353 0.0  2.435024  37.456749  2.435024  1.146623 1341.574219 1356.058594   6   6 1.0    0       73     78     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         2017            0
 15   1   7   7  0.956840  0.189783 0.0  1.146623  38.603372  1.146623  0.953838 1328.878906 1342.417969   4   4 1.0    0       79     82     3         3       27      29  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          482            0
 15   1   8   8  0.781457  0.172381 0.0  0.953838  39.557210  0.953838  6.484713 1328.894531 1342.304688   3   3 1.0    0       83     85     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          385            0
 15   1   9   9  4.938967  1.545746 0.0  6.484713  46.041923  6.484713  7.802214 1375.539062 1393.718750  17  17 1.0    0       86    102     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        33474            0
 15   1  10  10  5.210750  2.591464 0.0  7.802214  53.844137  7.802214  3.487976 1379.203125 1396.750000  18  18 1.0    0      103    120     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        42519            0
 15   1  11  11  2.946554  0.541422 0.0  3.487976  57.332114  3.487976 50.776421 1354.316406 1372.605469  11  11 1.0    0      121    131     3         3       39      41  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        20926            0
 15   1  12  12 11.722518 39.053903 0.0 50.776421 108.108535 50.776421  0.000000 1454.917969 1484.921875  35  35 1.0    0      132    166     3         3       42      44 11.666667 11.666667 15.044379 15.044379 1.289518 1.289518 -1.526240 -1.526240       419705            0
 16   3   1   1  1.254982  0.738833 0.0  1.993814   1.993814  1.993814  0.000000 1337.007812 1351.996094  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        74358            0
 16   2   1   1  2.626524  1.481067 0.0  4.107591   6.101405  6.101405  0.816057 1368.488281 1391.953125  31  31 1.0   31        1     31    10        10        1      10  3.100000  3.100000  2.685351  2.685351 0.866242 0.866242  0.433521  0.433521        39676            0
 16   2   2   2  0.623220  0.192837 0.0  0.816057   6.917462  0.816057  0.000000 1403.023438 1420.503906  11  11 1.0   11       32     42    10        10       11      20  1.100000  1.100000  0.316228  0.316228 0.287480 0.287480  0.880669  0.880669         4213            0
 16   1   1   1  4.893655  2.097249 0.0  6.990905  13.092310 13.092310 10.322386 1406.550781 1436.312500  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        21544            0
 16   1   2   2  7.253160  2.253170 0.0  9.506330  23.414696 10.322386  4.483912 1444.507812 1486.187500  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        34010            0
 16   1   3   3  3.581563  0.902350 0.0  4.483912  27.898609  4.483912 11.658116 1396.863281 1416.617188  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  2.607681  2.607681 1.002954 1.002954  0.202787  0.202787         6621            0
 16   1   4   4  7.605014  4.053102 0.0 11.658116  39.556725 11.658116  7.855931 1454.585938 1491.531250  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       100522            0
 16   1   5   5  5.512669  2.343262 0.0  7.855931  47.412656  7.855931 37.358749 1429.339844 1453.160156  19  19 1.0    0       80     98     5         5       21      25  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        57560            0
 16   1   6   6 11.943026 25.415723 0.0 37.358749  84.771406 37.358749  0.537062 1548.589844 1591.800781  35  35 1.0    0       99    133     6         6       26      31  5.833333  5.833333  3.920034  3.920034 0.672006 0.672006  0.110754  0.110754       801567            0
 16   1   7   7  0.463275  0.073787 0.0  0.537062  85.308467  0.537062  0.728469 1393.664062 1410.687500   1   1 1.0    0      134    134     1         1       32      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000           72            0
 16   1   8   8  0.624634  0.103835 0.0  0.728469  86.036936  0.728469  0.908708 1397.085938 1413.945312   2   2 1.0    0      135    136     2         2       33      34  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          286            0
 16   1   9   9  0.792034  0.116674 0.0  0.908708  86.945645  0.908708  0.904002 1397.500000 1414.195312   3   3 1.0    0      137    139     2         2       35      36  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          340            0
 16   1  10  10  0.792289  0.111713 0.0  0.904002  87.849646  0.904002  0.719462 1397.894531 1414.699219   3   3 1.0    0      140    142     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          390            0
 16   1  11  11  0.621054  0.098408 0.0  0.719462  88.569108  0.719462  4.300480 1398.148438 1414.949219   2   2 1.0    0      143    144     2         2       39      40  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          286            0
 16   1  12  12  3.644427  0.656054 0.0  4.300480  92.869588  4.300480  0.000000 1431.988281 1452.878906  13  13 1.0    0      145    157     2         2       41      42  6.500000  6.500000  4.949747  4.949747 0.761500 0.761500 -1.572828 -1.572828         4504            0
 17   3   1   1  1.257136  0.938299 0.0  2.195435   2.195435  2.195435  0.000000 1400.832031 1417.078125  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        87069            0
 17   2   1   1  2.474370  1.254040 0.0  3.728410   5.923846  5.923846  1.659842 1425.152344 1441.484375  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.748737  2.748737 0.916246 0.916246  0.426115  0.426115        42195            0
 17   2   2   2  0.870929  0.788913 0.0  1.659842   7.583688  1.659842  0.000000 1436.265625 1454.941406  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.843274  0.843274 0.602339 0.602339  0.734410  0.734410         2431            0
 17   1   1   1  4.869088  1.386746 0.0  6.255834  12.179680 12.179680 12.602880 1466.441406 1497.007812  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        36600            0
 17   1   2   2  7.316335  3.626702 0.0 10.943038  24.782560 12.602880  4.496688 1507.875000 1553.261719  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        78969            0
 17   1   3   3  3.601758  0.894930 0.0  4.496688  29.279248  4.496688  7.887044 1457.917969 1478.582031  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  2.509980  2.509980 0.965377 0.965377  0.219845  0.219845         5209            0
 17   1   4   4  5.537632  2.349412 0.0  7.887044  37.166292  7.887044  5.191053 1483.937500 1509.898438  19  19 1.0    0       55     73     5         5       16      20  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        52907            0
 17   1   5   5  4.189188  1.001865 0.0  5.191053  42.357345  5.191053 13.274015 1462.593750 1480.652344  15  15 1.0    0       74     88     5         5       21      25  3.000000  3.000000  3.937004  3.937004 1.312335 1.312335  0.007878  0.007878        11675            0
 17   1   6   6  8.219273  5.054743 0.0 13.274015  55.631360 13.274015  2.350345 1525.476562 1562.523438  26  26 1.0    0       89    114     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       123850            0
 17   1   7   7  2.026346  0.324000 0.0  2.350345  57.981706  2.350345  3.063182 1438.675781 1456.359375   8   8 1.0    0      115    122     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2868            0
 17   1   8   8  2.631079  0.432103 0.0  3.063182  61.044888  3.063182  3.308867 1445.449219 1465.359375  10  10 1.0    0      123    132     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        10923            0
 17   1   9   9  2.862995  0.445872 0.0  3.308867  64.353755  3.308867  0.724448 1448.355469 1467.515625  11  11 1.0    0      133    143     2         2       35      36  5.500000  5.500000  6.363961  6.363961 1.157084 1.157084 -1.880482 -1.880482        14081            0
 17   1  10  10  0.623229  0.101219 0.0  0.724448  65.078203  0.724448  1.257208 1431.382812 1446.957031   2   2 1.0    0      144    145     2         2       37      38  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          491            0
 17   1  11  11  1.030967  0.226241 0.0  1.257208  66.335411  1.257208  4.133829 1440.953125 1458.781250   4   4 1.0    0      146    149     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          472            0
 17   1  12  12  3.013715  1.120115 0.0  4.133829  70.469240  4.133829  0.000000 1463.558594 1487.906250  11  11 1.0    0      150    160     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         3580            0
 18   3   1   1  1.255737  0.825491 0.0  2.081228   2.081228  2.081228  0.000000 1433.769531 1449.425781  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        79037            0
 18   2   1   1  2.008609  0.613075 0.0  2.621684   4.702913  4.702913  1.648069 1455.355469 1472.824219  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.913570  2.913570 1.120604 1.120604  0.407427  0.407427        15095            0
 18   2   2   2  1.269098  0.378971 0.0  1.648069   6.350982  1.648069  0.000000 1463.320312 1479.667969  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939        11488            0
 18   1   1   1  4.632489  1.274483 0.0  5.906972  10.609884 10.609884  6.838110 1487.500000 1509.070312  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        17600            0
 18   1   2   2  4.192560  0.997481 0.0  5.190041  17.447995  6.838110  1.289773 1483.792969 1512.929688  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         8401            0
 18   1   3   3  1.024077  0.265696 0.0  1.289773  18.737768  1.289773  6.123246 1453.042969 1470.566406   4   4 1.0    0       32     35     4         4        9      12  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          509            0
 18   1   4   4  4.532090  1.591155 0.0  6.123246  24.861013  6.123246 12.313196 1490.421875 1511.937500  16  16 1.0    0       36     51     4         4       13      16  4.000000  4.000000  6.000000  6.000000 1.500000 1.500000 -0.403677 -0.403677         3839            0
 18   1   5   5  7.687597  4.625599 0.0 12.313196  37.174209 12.313196  1.951217 1538.992188 1575.351562  25  25 1.0    0       52     76     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        82375            0
 18   1   6   6  1.528407  0.422809 0.0  1.951217  39.125426  1.951217  1.144587 1466.824219 1483.460938   6   6 1.0    0       77     82     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         2142            0
 18   1   7   7  0.954097  0.190490 0.0  1.144587  40.270012  1.144587  0.954792 1454.023438 1469.496094   4   4 1.0    0       83     86     3         3       27      29  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162         1472            0
 18   1   8   8  0.779501  0.175291 0.0  0.954792  41.224804  0.954792  6.892313 1454.207031 1469.738281   3   3 1.0    0       87     89     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          357            0
 18   1   9   9  4.918425  1.973889 0.0  6.892313  48.117118  6.892313  7.189347 1500.265625 1520.292969  17  17 1.0    0       90    106     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        51248            0
 18   1  10  10  5.152416  2.036931 0.0  7.189347  55.306465  7.189347  3.463754 1503.125000 1522.386719  18  18 1.0    0      107    124     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        37245            0
 18   1  11  11  2.926416  0.537338 0.0  3.463754  58.770218  3.463754 75.200279 1477.531250 1498.078125  11  11 1.0    0      125    135     3         3       39      41  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181         8914            0
 18   1  12  12 11.887436 63.312843 0.0 75.200279 133.970497 75.200279  0.000000 1577.835938 1608.441406  35  35 1.0    0      136    170     3         3       42      44 11.666667 11.666667 17.616280 17.616280 1.509967 1.509967 -1.661573 -1.661573       614171            0
 19   3   1   1  1.249302  0.712264 0.0  1.961566   1.961566  1.961566  0.000000 1457.371094 1473.136719  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        77975            0
 19   2   1   1  1.978842  0.624825 0.0  2.603667   4.565234  4.565234  1.536350 1477.046875 1494.605469  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.796824  2.796824 1.075701 1.075701  0.420580  0.420580        18466            0
 19   2   2   2  1.243162  0.293188 0.0  1.536350   6.101584  1.536350  0.000000 1489.847656 1506.203125  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  1.135292  1.135292 0.630718 0.630718  0.670543  0.670543         8068            0
 19   1   1   1  4.478312  1.872912 0.0  6.351225  10.916458 10.916458  6.593908 1511.746094 1533.207031  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        19658            0
 19   1   2   2  4.107832  0.949726 0.0  5.057558  17.510366  6.593908  4.007976 1508.789062 1537.292969  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         6953            0
 19   1   3   3  3.200756  0.807221 0.0  4.007976  21.518343  4.007976  5.358342 1502.453125 1519.152344  12  12 1.0    0       32     43     4         4        9      12  3.000000  3.000000  4.000000  4.000000 1.333333 1.333333 -0.160964 -0.160964        22212            0
 19   1   4   4  4.418396  0.939946 0.0  5.358342  26.876685  5.358342 11.721325 1515.039062 1538.476562  16  16 1.0    0       44     59     4         4       13      16  4.000000  4.000000  6.000000  6.000000 1.500000 1.500000 -0.403677 -0.403677         9254            0
 19   1   5   5  7.675459  4.045866 0.0 11.721325  38.598010 11.721325  2.498506 1570.054688 1606.898438  25  25 1.0    0       60     84     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        83113            0
 19   1   6   6  1.490941  1.007565 0.0  2.498506  41.096516  2.498506  0.923114 1494.175781 1510.437500   6   6 1.0    0       85     90     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         1955            0
 19   1   7   7  0.766761  0.156353 0.0  0.923114  42.019630  0.923114  6.635682 1480.394531 1495.984375   3   3 1.0    0       91     93     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          499            0
 19   1   8   8  4.886733  1.748949 0.0  6.635682  48.655312  6.635682  7.182068 1527.917969 1550.375000  17  17 1.0    0       94    110     3         3       30      32  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        51569            0
 19   1   9   9  5.088523  2.093546 0.0  7.182068  55.837380  7.182068  3.570303 1531.351562 1553.398438  18  18 1.0    0      111    128     3         3       33      35  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        53587            0
 19   1  10  10  2.976530  0.593773 0.0  3.570303  59.407683  3.570303  4.550253 1513.562500 1534.425781  11  11 1.0    0      129    139     3         3       36      38  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        18558            0
 19   1  11  11  3.346201  1.204052 0.0  4.550253  63.957936  4.550253  6.444003 1516.750000 1535.941406  13  13 1.0    0      140    152     3         3       39      41  4.333333  4.333333  5.773503  5.773503 1.332347 1.332347 -0.741304 -0.741304         5551            0
 19   1  12  12  4.843078  1.600925 0.0  6.444003  70.401939  6.444003  0.000000 1532.386719 1550.582031  17  17 1.0    0      153    169     3         3       42      44  5.666667  5.666667  8.082904  8.082904 1.426395 1.426395 -1.008346 -1.008346        18983            0
 20   3   1   1  1.243041  0.726639 0.0  1.969681   1.969681  1.969681  0.000000 1483.957031 1499.656250  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        87375            0
 20   2   1   1  1.991036  0.660033 0.0  2.651069   4.620750  4.620750  1.616807 1506.781250 1524.089844  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.913570  2.913570 1.120604 1.120604  0.407427  0.407427        19830            0
 20   2   2   2  1.248486  0.368321 0.0  1.616807   6.237557  1.616807  0.000000 1513.890625 1530.363281  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939        12312            0
 20   1   1   1  4.476516  1.186556 0.0  5.663072  10.283822 10.283822  6.674622 1539.906250 1561.414062  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        20177            0
 20   1   2   2  4.130386  0.927429 0.0  5.057816  16.958445  6.674622  3.500741 1535.996094 1565.285156  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         8795            0
 20   1   3   3  2.899034  0.601707 0.0  3.500741  20.459185  3.500741  2.179648 1524.941406 1543.644531  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         4360            0
 20   1   4   4  1.257803  0.921845 0.0  2.179648  22.638834  2.179648 12.276690 1510.968750 1527.496094   5   5 1.0    0       43     47     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519          652            0
 20   1   5   5  7.566272  4.710418 0.0 12.276690  34.915524 12.276690  1.896059 1590.722656 1627.335938  25  25 1.0    0       48     72     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       105386            0
 20   1   6   6  1.501043  0.395016 0.0  1.896059  36.811583  1.896059  1.120202 1517.703125 1534.179688   6   6 1.0    0       73     78     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         2079            0
 20   1   7   7  0.943500  0.176702 0.0  1.120202  37.931784  1.120202  0.930826 1503.140625 1518.906250   4   4 1.0    0       79     82     3         3       27      29  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162         1089            0
 20   1   8   8  0.767243  0.163583 0.0  0.930826  38.862611  0.930826  6.886317 1503.292969 1518.835938   3   3 1.0    0       83     85     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          356            0
 20   1   9   9  4.841067  2.045250 0.0  6.886317  45.748928  6.886317  6.918623 1549.480469 1569.675781  17  17 1.0    0       86    102     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        39447            0
 20   1  10  10  5.064634  1.853989 0.0  6.918623  52.667551  6.918623  3.546333 1552.343750 1571.746094  18  18 1.0    0      103    120     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        28984            0
 20   1  11  11  2.964668  0.581665 0.0  3.546333  56.213884  3.546333 12.688037 1530.167969 1549.246094  11  11 1.0    0      121    131     3         3       39      41  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        10448            0
 20   1  12  12  7.901840  4.786197 0.0 12.688037  68.901921 12.688037  0.000000 1582.933594 1603.628906  26  26 1.0    0      132    157     3         3       42      44  8.666667  8.666667 13.279056 13.279056 1.532199 1.532199 -1.420138 -1.420138        45041            0
 21   3   1   1  1.241667  0.842720 0.0  2.084387   2.084387  2.084387  0.000000 1508.101562 1523.859375  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        93896            0
 21   2   1   1  1.999529  0.630211 0.0  2.629741   4.714127  4.714127  1.556344 1530.789062 1548.289062  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.796824  2.796824 1.075701 1.075701  0.420580  0.420580        16003            0
 21   2   2   2  1.230422  0.325921 0.0  1.556344   6.270471  1.556344  0.000000 1538.667969 1555.007812  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  1.135292  1.135292 0.630718 0.630718  0.670543  0.670543         7756            0
 21   1   1   1  4.475006  1.268305 0.0  5.743311  10.457438 10.457438  7.382923 1563.769531 1585.230469  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        18770            0
 21   1   2   2  4.122918  1.703661 0.0  5.826579  17.840361  7.382923  6.835308 1559.566406 1588.843750  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10075            0
 21   1   3   3  5.353211  1.482098 0.0  6.835308  24.675669  6.835308  1.559878 1579.902344 1616.058594  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        30002            0
 21   1   4   4  1.264456  0.295421 0.0  1.559878  26.235547  1.559878 11.779442 1533.894531 1550.375000   5   5 1.0    0       51     55     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1008            0
 21   1   5   5  7.534749  4.244693 0.0 11.779442  38.014989 11.779442  2.217145 1615.796875 1652.417969  25  25 1.0    0       56     80     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       109028            0
 21   1   6   6  1.771469  0.445676 0.0  2.217145  40.232135  2.217145  1.588127 1545.421875 1565.304688   7   7 1.0    0       81     87     5         5       22      26  1.400000  1.400000  0.894427  0.894427 0.638877 0.638877  0.603019  0.603019         1751            0
 21   1   7   7  0.765234  0.822893 0.0  1.588127  41.820262  1.588127  0.928078 1529.082031 1544.910156   3   3 1.0    0       88     90     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          794            0
 21   1   8   8  0.764548  0.163530 0.0  0.928078  42.748340  0.928078  6.332155 1529.539062 1545.304688   3   3 1.0    0       91     93     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          419            0
 21   1   9   9  4.843218  1.488937 0.0  6.332155  49.080495  6.332155  6.688624 1575.796875 1596.187500  17  17 1.0    0       94    110     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        44070            0
 21   1  10  10  5.057748  1.630875 0.0  6.688624  55.769118  6.688624  3.445007 1578.851562 1598.253906  18  18 1.0    0      111    128     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        43309            0
 21   1  11  11  2.902746  0.542261 0.0  3.445007  59.214125  3.445007 10.743136 1554.328125 1574.285156  11  11 1.0    0      129    139     3         3       39      41  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        27196            0
 21   1  12  12  7.094586  3.648550 0.0 10.743136  69.957261 10.743136  0.000000 1601.968750 1627.449219  24  24 1.0    0      140    163     3         3       42      44  8.000000  8.000000 11.269428 11.269428 1.408678 1.408678 -1.282070 -1.282070        48931            0
 22   3   1   1  1.243973  0.747312 0.0  1.991285   1.991285  1.991285  0.000000 1535.304688 1551.183594  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        83578            0
 22   2   1   1  1.773381  1.184524 0.0  2.957905   4.949189  4.949189  2.480519 1555.640625 1574.496094  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        12292            0
 22   2   2   2  1.433577  1.046942 0.0  2.480519   7.429708  2.480519  0.000000 1564.417969 1584.304688  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  0.816497  0.816497 0.408248 0.408248  0.740765  0.740765         9028            0
 22   1   1   1  4.487370  1.261720 0.0  5.749090  10.698279 10.698279  7.618937 1590.093750 1611.808594  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        16310            0
 22   1   2   2  4.134130  1.004288 0.0  5.138418  18.317216  7.618937  3.484078 1586.074219 1615.683594  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10535            0
 22   1   3   3  2.893129  0.590949 0.0  3.484078  21.801294  3.484078  6.786574 1573.382812 1592.089844  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         3479            0
 22   1   4   4  5.071648  1.714926 0.0  6.786574  28.587868  6.786574  4.261864 1599.933594 1616.898438  18  18 1.0    0       43     60     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        56658            0
 22   1   5   5  3.528740  0.733124 0.0  4.261864  32.849732  4.261864  1.522506 1587.902344 1614.312500  13  13 1.0    0       61     73     4         4       17      20  3.250000  3.250000  3.201562  3.201562 0.985096 0.985096 -0.035463 -0.035463         5787            0
 22   1   6   6  1.260514  0.261992 0.0  1.522506  34.372238  1.522506  0.939770 1562.949219 1579.691406   5   5 1.0    0       74     78     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1788            0
 22   1   7   7  0.772127  0.167643 0.0  0.939770  35.312008  0.939770  6.678151 1553.968750 1569.753906   3   3 1.0    0       79     81     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          418            0
 22   1   8   8  4.868745  1.809406 0.0  6.678151  41.990159  6.678151  3.780650 1601.347656 1623.542969  17  17 1.0    0       82     98     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        43819            0
 22   1   9   9  3.196135  0.584515 0.0  3.780650  45.770809  3.780650  3.206105 1586.480469 1606.882812  12  12 1.0    0       99    110     3         3       31      33  4.000000  4.000000  5.196152  5.196152 1.299038 1.299038 -0.660211 -0.660211         5686            0
 22   1  10  10  2.604196  0.601909 0.0  3.206105  48.976914  3.206105  6.300161 1579.960938 1602.871094  10  10 1.0    0      111    120     3         3       34      36  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418        15445            0
 22   1  11  11  5.135728  1.164433 0.0  6.300161  55.277075  6.300161 31.789826 1615.828125 1651.316406  18  18 1.0    0      121    138     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        30068            0
 22   1  12  12  8.353152 23.436674 0.0 31.789826  87.066901 31.789826  0.000000 1654.660156 1699.683594  26  26 1.0    0      139    164     4         4       41      44  6.500000  6.500000  9.110434  9.110434 1.401605 1.401605 -0.668886 -0.668886       230068            0
 23   3   1   1  1.240996  0.762181 0.0  2.003176   2.003176  2.003176  0.000000 1561.957031 1577.906250  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        82991            0
 23   2   1   1  1.810516  0.526098 0.0  2.336615   4.339791  4.339791  1.804778 1582.781250 1601.218750  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        13188            0
 23   2   2   2  1.431318  0.373460 0.0  1.804778   6.144569  1.804778  0.000000 1592.191406 1612.027344  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.333333  1.333333 0.666667 0.666667  0.632023  0.632023        10137            0
 23   1   1   1  4.477491  1.366554 0.0  5.844045  10.183836 10.183836  6.921035 1616.886719 1638.519531  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        29079            0
 23   1   2   2  4.131103  0.985155 0.0  5.116257  17.104871  6.921035  7.004831 1613.000000 1642.394531  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        16930            0
 23   1   3   3  5.402858  1.601973 0.0  7.004831  24.109703  7.004831  7.097657 1633.550781 1669.371094  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        29721            0
 23   1   4   4  5.096958  2.000699 0.0  7.097657  31.207359  7.097657  3.895894 1632.621094 1667.976562  18  18 1.0    0       51     68     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        94494            0
 23   1   5   5  3.225035  0.670859 0.0  3.895894  35.103254  3.895894  1.833868 1606.648438 1623.167969  12  12 1.0    0       69     80     4         4       17      20  3.000000  3.000000  3.366502  3.366502 1.122167 1.122167 -0.063239 -0.063239         9039            0
 23   1   6   6  1.509519  0.324349 0.0  1.833868  36.937122  1.833868  0.932981 1593.257812 1612.585938   6   6 1.0    0       81     86     4         4       21      24  1.500000  1.500000  1.000000  1.000000 0.666667 0.666667  0.500000  0.500000         1108            0
 23   1   7   7  0.765697  0.167284 0.0  0.932981  37.870103  0.932981  6.224671 1581.656250 1597.476562   3   3 1.0    0       87     89     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          467            0
 23   1   8   8  4.828157  1.396514 0.0  6.224671  44.094773  6.224671  3.759012 1628.976562 1651.023438  17  17 1.0    0       90    106     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        40274            0
 23   1   9   9  3.181038  0.577974 0.0  3.759012  47.853785  3.759012  3.163780 1614.296875 1634.605469  12  12 1.0    0      107    118     3         3       31      33  4.000000  4.000000  5.196152  5.196152 1.299038 1.299038 -0.660211 -0.660211         3988            0
 23   1  10  10  2.606852  0.556928 0.0  3.163780  51.017566  3.163780  6.269661 1607.292969 1631.015625  10  10 1.0    0      119    128     3         3       34      36  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         9638            0
 23   1  11  11  5.078759  1.190902 0.0  6.269661  57.287227  6.269661 16.387476 1641.796875 1676.855469  18  18 1.0    0      129    146     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        30548            0
 23   1  12  12  6.957439  9.430037 0.0 16.387476  73.674703 16.387476  0.000000 1655.109375 1675.945312  23  23 1.0    0      147    169     4         4       41      44  5.750000  5.750000  3.593976  3.593976 0.625039 0.625039 -0.099872 -0.099872        97722            0
 24   3   1   1  1.252467  0.774017 0.0  2.026483   2.026483  2.026483  0.000000 1585.058594 1600.750000  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        90006            0
 24   2   1   1  2.581861  1.373541 0.0  3.955402   5.981886  5.981886  0.798252 1616.859375 1641.722656  31  31 1.0   31        1     31    10        10        1      10  3.100000  3.100000  2.685351  2.685351 0.866242 0.866242  0.433521  0.433521        40452            0
 24   2   2   2  0.608723  0.189528 0.0  0.798252   6.780137  0.798252  0.000000 1642.386719 1662.160156  11  11 1.0   11       32     42    10        10       11      20  1.100000  1.100000  0.316228  0.316228 0.287480 0.287480  0.880669  0.880669         4589            0
 24   1   1   1  4.780181  1.511479 0.0  6.291660  12.273546 12.273546 10.178915 1646.769531 1675.500000  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        17026            0
 24   1   2   2  7.079724  2.300939 0.0  9.380663  22.452460 10.178915  4.375441 1677.171875 1720.539062  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        24338            0
 24   1   3   3  3.529600  0.845842 0.0  4.375441  26.827902  4.375441 11.380481 1638.710938 1659.789062  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.577709  3.577709 1.376042 1.376042  0.054826  0.054826         5532            0
 24   1   4   4  7.562473  3.818008 0.0 11.380481  38.208383 11.380481  8.343452 1687.980469 1725.242188  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        61980            0
 24   1   5   5  5.416074  2.927378 0.0  8.343452  46.551834  8.343452 40.967123 1657.898438 1682.480469  19  19 1.0    0       80     98     5         5       21      25  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        59816            0
 24   1   6   6 11.649988 29.317136 0.0 40.967123  87.518958 40.967123  0.525088 1785.187500 1831.574219  35  35 1.0    0       99    133     6         6       26      31  5.833333  5.833333  3.920034  3.920034 0.672006 0.672006  0.110754  0.110754       758163            0
 24   1   7   7  0.453488  0.071600 0.0  0.525088  88.044046  0.525088  0.889310 1634.996094 1654.582031   1   1 1.0    0      134    134     1         1       32      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000           72            0
 24   1   8   8  0.775576  0.113735 0.0  0.889310  88.933357  0.889310  0.716470 1639.117188 1658.589844   3   3 1.0    0      135    137     2         2       33      34  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          318            0
 24   1   9   9  0.613365  0.103106 0.0  0.716470  89.649827  0.716470  0.902940 1638.648438 1657.843750   2   2 1.0    0      138    139     2         2       35      36  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          256            0
 24   1  10  10  0.780277  0.122663 0.0  0.902940  90.552767  0.902940  0.890167 1640.398438 1659.527344   3   3 1.0    0      140    142     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          327            0
 24   1  11  11  0.776101  0.114066 0.0  0.890167  91.442934  0.890167  6.292952 1639.773438 1658.593750   3   3 1.0    0      143    145     2         2       39      40  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          394            0
 24   1  12  12  4.487647  1.805305 0.0  6.292952  97.735886  6.292952  0.000000 1681.902344 1712.808594  16  16 1.0    0      146    161     2         2       41      42  8.000000  8.000000  9.899495  9.899495 1.237437 1.237437 -2.446189 -2.446189        12245            0
 25   3   1   1  1.248753  0.930477 0.0  2.179230   2.179230  2.179230  0.000000 1642.167969 1661.074219  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000       101030            0
 25   2   1   1  2.228428  0.857380 0.0  3.085808   5.265038  5.265038  1.294388 1665.550781 1684.859375  28  28 1.0   28        1     28    10        10        1      10  2.800000  2.800000  2.740641  2.740641 0.978800 0.978800  0.427054  0.427054        31649            0
 25   2   2   2  1.048331  0.246057 0.0  1.294388   6.559426  1.294388  0.000000 1676.847656 1696.718750  16  16 1.0   16       29     44    10        10       11      20  1.600000  1.600000  1.074968  1.074968 0.671855 0.671855  0.682989  0.682989         4543            0
 25   1   1   1  4.479411  1.233307 0.0  5.712718  10.977756 10.977756  6.370950 1699.398438 1723.621094  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        17931            0
 25   1   2   2  4.105059  0.971503 0.0  5.076562  17.348706  6.370950  3.867207 1695.562500 1727.488281  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        11408            0
 25   1   3   3  3.147319  0.719888 0.0  3.867207  21.215912  3.867207 12.688976 1691.523438 1717.683594  12  12 1.0    0       32     43     5         5        9      13  2.400000  2.400000  2.607681  2.607681 1.086534 1.086534  0.202787  0.202787         3047            0
 25   1   4   4  7.960212  4.728764 0.0 12.688976  33.904888 12.688976  1.547925 1761.417969 1799.445312  26  26 1.0    0       44     69     5         5       14      18  5.200000  5.200000  3.898718  3.898718 0.749753 0.749753  0.012715  0.012715        82730            0
 25   1   5   5  1.242995  0.304929 0.0  1.547925  35.452812  1.547925 12.184846 1674.945312 1695.277344   5   5 1.0    0       70     74     5         5       19      23  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000         2003            0
 25   1   6   6  7.957280  4.227566 0.0 12.184846  47.637658 12.184846  0.898631 1763.722656 1807.878906  26  26 1.0    0       75    100     5         5       24      28  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       140031            0
 25   1   7   7  0.782598  0.116033 0.0  0.898631  48.536289  0.898631  0.720895 1664.968750 1683.257812   3   3 1.0    0      101    103     2         2       29      30  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          264            0
 25   1   8   8  0.618951  0.101944 0.0  0.720895  49.257184  0.720895  6.328439 1664.332031 1682.476562   2   2 1.0    0      104    105     2         2       31      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          239            0
 25   1   9   9  4.825485  1.502954 0.0  6.328439  55.585623  6.328439  3.096661 1713.890625 1739.031250  17  17 1.0    0      106    122     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        66952            0
 25   1  10  10  2.614736  0.481925 0.0  3.096661  58.682284  3.096661  1.216160 1694.269531 1720.144531  10  10 1.0    0      123    132     3         3       36      38  3.333333  3.333333  4.041452  4.041452 1.212436 1.212436 -0.472489 -0.472489         6968            0
 25   1  11  11  1.012548  0.203612 0.0  1.216160  59.898444  1.216160 27.603010 1676.929688 1697.222656   4   4 1.0    0      133    136     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          427            0
 25   1  12  12  8.145860 19.457150 0.0 27.603010  87.501454 27.603010  0.000000 1762.726562 1785.613281  26  26 1.0    0      137    162     3         3       42      44  8.666667  8.666667 13.279056 13.279056 1.532199 1.532199 -1.420138 -1.420138       242694            0
 26   3   1   1  1.243464  1.044596 0.0  2.288060   2.288060  2.288060  0.000000 1667.292969 1684.929688  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000       105798            0
 26   2   1   1  1.876904  0.579054 0.0  2.455959   4.744019  4.744019  2.583130 1688.535156 1708.640625  25  25 1.0   25        1     25    10        10        1      10  2.500000  2.500000  2.915476  2.915476 1.166190 1.166190  0.407215  0.407215        15659            0
 26   2   2   2  1.345801  1.237329 0.0  2.583130   7.327150  2.583130  0.000000 1700.621094 1719.066406  19  19 1.0   19       26     44    10        10       11      20  1.900000  1.900000  1.370320  1.370320 0.721221 0.721221  0.625193  0.625193        15589            0
 26   1   1   1  4.493075  1.282839 0.0  5.775914  10.519933 10.519933  7.587083 1723.894531 1747.707031  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        18599            0
 26   1   2   2  4.065970  0.937983 0.0  5.003953  18.107017  7.587083  6.827790 1716.167969 1736.828125  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         7924            0
 26   1   3   3  5.349096  1.478693 0.0  6.827790  24.934806  6.827790  1.566754 1741.019531 1779.738281  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        28068            0
 26   1   4   4  1.266315  0.300439 0.0  1.566754  26.501560  1.566754  9.941292 1692.671875 1711.308594   5   5 1.0    0       51     55     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         2232            0
 26   1   5   5  7.169835  2.771457 0.0  9.941292  36.442853  9.941292  2.198897 1770.414062 1797.054688  24  24 1.0    0       56     79     4         4       17      20  6.000000  6.000000  3.464102  3.464102 0.577350 0.577350 -0.079185 -0.079185        72478            0
 26   1   6   6  1.758626  0.440271 0.0  2.198897  38.641750  2.198897  0.946180 1705.875000 1728.218750   7   7 1.0    0       80     86     5         5       21      25  1.400000  1.400000  0.547723  0.547723 0.391230 0.391230  0.728611  0.728611         1652            0
 26   1   7   7  0.769960  0.176220 0.0  0.946180  39.587930  0.946180  0.931739 1690.687500 1708.730469   3   3 1.0    0       87     89     3         3       26      28  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          371            0
 26   1   8   8  0.769466  0.162273 0.0  0.931739  40.519669  0.931739  6.371731 1690.996094 1709.093750   3   3 1.0    0       90     92     3         3       29      31  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          579            0
 26   1   9   9  4.827110  1.544621 0.0  6.371731  46.891400  6.371731  3.165776 1739.660156 1761.800781  17  17 1.0    0       93    109     3         3       32      34  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        47761            0
 26   1  10  10  2.680561  0.485215 0.0  3.165776  50.057176  3.165776  6.313542 1716.464844 1739.738281  10  10 1.0    0      110    119     3         3       35      37  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         2079            0
 26   1  11  11  4.806522  1.507019 0.0  6.313542  56.370717  6.313542  9.948773 1741.566406 1763.496094  17  17 1.0    0      120    136     3         3       38      40  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        60213            0
 26   1  12  12  6.853716  3.095057 0.0  9.948773  66.319490  9.948773  0.000000 1768.117188 1795.652344  23  23 1.0    0      137    159     4         4       41      44  5.750000  5.750000  6.184658  6.184658 1.075593 1.075593 -0.422460 -0.422460        33881            0
 27   3   1   1  1.245845  0.806321 0.0  2.052167   2.052167  2.052167  0.000000 1697.437500 1715.355469  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        90142            0
 27   2   1   1  2.452372  1.873077 0.0  4.325448   6.377615  6.377615  1.073748 1727.140625 1754.066406  30  30 1.0   30        1     30    10        10        1      10  3.000000  3.000000  2.666667  2.666667 0.888889 0.888889  0.435729  0.435729        38667            0
 27   2   2   2  0.859695  0.214053 0.0  1.073748   7.451363  1.073748  0.000000 1727.000000 1747.062500  14  14 1.0   14       31     44    10        10       11      20  1.400000  1.400000  0.699206  0.699206 0.499433 0.499433  0.769754  0.769754         2824            0
 27   1   1   1  4.761976  1.366307 0.0  6.128283  12.505898 12.505898 10.516355 1758.417969 1789.355469  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        33450            0
 27   1   2   2  7.102479  2.340129 0.0  9.442608  23.022254 10.516355  4.350473 1795.781250 1842.625000  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        24747            0
 27   1   3   3  3.521732  0.828740 0.0  4.350473  27.372727  4.350473  7.355468 1748.886719 1771.640625  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.049590  3.049590 1.172919 1.172919  0.130991  0.130991         5133            0
 27   1   4   4  5.343429  2.012039 0.0  7.355468  34.728195  7.355468  5.031571 1768.089844 1795.160156  19  19 1.0    0       55     73     5         5       16      20  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        65606            0
 27   1   5   5  4.095434  0.936138 0.0  5.031571  39.759766  5.031571 12.192829 1756.214844 1776.335938  15  15 1.0    0       74     88     5         5       21      25  3.000000  3.000000  4.472136  4.472136 1.490712 1.490712 -0.056064 -0.056064        10761            0
 27   1   6   6  8.042535  4.150294 0.0 12.192829  51.952595 12.192829  3.175421 1812.933594 1849.437500  26  26 1.0    0       89    114     5         5       26      30  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       110723            0
 27   1   7   7  2.010040  1.165381 0.0  3.175421  55.128016  3.175421  3.074092 1729.753906 1749.664062   8   8 1.0    0      115    122     2         2       31      32  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2903            0
 27   1   8   8  2.637759  0.436333 0.0  3.074092  58.202109  3.074092  3.291427 1735.050781 1756.687500  10  10 1.0    0      123    132     2         2       33      34  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        13109            0
 27   1   9   9  2.857138  0.434289 0.0  3.291427  61.493536  3.291427  0.714845 1739.503906 1761.074219  11  11 1.0    0      133    143     2         2       35      36  5.500000  5.500000  6.363961  6.363961 1.157084 1.157084 -1.880482 -1.880482         5264            0
 27   1  10  10  0.615615  0.099230 0.0  0.714845  62.208380  0.714845  1.221796 1720.433594 1738.097656   2   2 1.0    0      144    145     2         2       37      38  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          549            0
 27   1  11  11  1.013509  0.208287 0.0  1.221796  63.430176  1.221796  1.199328 1729.957031 1749.914062   4   4 1.0    0      146    149     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          560            0
 27   1  12  12  1.005679  0.193649 0.0  1.199328  64.629504  1.199328  0.000000 1729.394531 1749.019531   4   4 1.0    0      150    153     3         3       42      44  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          467            0
 28   3   1   1  1.244292  0.771399 0.0  2.015691   2.015691  2.015691  0.000000 1720.449219 1737.984375  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        85437            0
 28   2   1   1  1.998579  0.627929 0.0  2.626508   4.642199  4.642199  1.565313 1741.894531 1761.171875  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.796824  2.796824 1.075701 1.075701  0.420580  0.420580        17355            0
 28   2   2   2  1.252906  0.312407 0.0  1.565313   6.207512  1.565313  0.000000 1750.128906 1768.417969  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939         6822            0
 28   1   1   1  4.450539  1.177776 0.0  5.628315  10.270514 10.270514  7.566344 1776.480469 1800.285156  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        20618            0
 28   1   2   2  4.144175  1.856856 0.0  6.001031  17.836858  7.566344  1.259920 1772.640625 1803.910156  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         3780            0
 28   1   3   3  1.003988  0.255932 0.0  1.259920  19.096779  1.259920  5.330459 1742.125000 1761.789062   4   4 1.0    0       32     35     4         4        9      12  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          506            0
 28   1   4   4  4.390494  0.939966 0.0  5.330459  24.427238  5.330459 11.561353 1777.925781 1803.578125  16  16 1.0    0       36     51     4         4       13      16  4.000000  4.000000  6.000000  6.000000 1.500000 1.500000 -0.403677 -0.403677         8130            0
 28   1   5   5  7.577814  3.983539 0.0 11.561353  35.988591 11.561353  1.899048 1830.300781 1869.273438  25  25 1.0    0       52     76     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       115272            0
 28   1   6   6  1.506461  0.392587 0.0  1.899048  37.887639  1.899048  0.940976 1754.507812 1772.890625   6   6 1.0    0       77     82     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         1472            0
 28   1   7   7  0.772460  0.168516 0.0  0.940976  38.828615  0.940976  6.537331 1740.750000 1758.335938   3   3 1.0    0       83     85     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          526            0
 28   1   8   8  4.872777  1.664554 0.0  6.537331  45.365946  6.537331  8.302564 1788.152344 1812.578125  17  17 1.0    0       86    102     3         3       30      32  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        59452            0
 28   1   9   9  5.089372  3.213192 0.0  8.302564  53.668510  8.302564  3.601556 1791.558594 1815.324219  18  18 1.0    0      103    120     3         3       33      35  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        61271            0
 28   1  10  10  2.993969  0.607587 0.0  3.601556  57.270066  3.601556  4.467719 1773.285156 1796.519531  11  11 1.0    0      121    131     3         3       36      38  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        17382            0
 28   1  11  11  3.772758  0.694961 0.0  4.467719  61.737785  4.467719 20.188530 1782.109375 1812.410156  14  14 1.0    0      132    145     3         3       39      41  4.666667  4.666667  6.350853  6.350853 1.360897 1.360897 -0.815760 -0.815760         7976            0
 28   1  12  12  7.295663 12.892867 0.0 20.188530  81.926315 20.188530  0.000000 1825.636719 1866.632812  24  24 1.0    0      146    169     3         3       42      44  8.000000  8.000000  6.557439  6.557439 0.819680 0.819680 -0.840988 -0.840988       157050            0
 29   3   1   1  1.252963  0.859733 0.0  2.112695   2.112695  2.112695  0.000000 1743.820312 1761.339844  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        95822            0
 29   2   1   1  2.107326  0.678976 0.0  2.786302   4.898998  4.898998  1.194231 1766.746094 1785.710938  27  27 1.0   27        1     27    10        10        1      10  2.700000  2.700000  2.750757  2.750757 1.018799 1.018799  0.425881  0.425881        18218            0
 29   2   2   2  0.964436  0.229795 0.0  1.194231   6.093228  1.194231  0.000000 1772.773438 1792.335938  15  15 1.0   15       28     42    10        10       11      20  1.500000  1.500000  0.849837  0.849837 0.566558 0.566558  0.732867  0.732867         6178            0
 29   1   1   1  4.500073  1.391989 0.0  5.892062  10.791059 10.791059  6.322382 1800.035156 1823.679688  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        10305            0
 29   1   2   2  4.137240  0.990912 0.0  5.128152  17.113442  6.322382  6.952054 1796.195312 1827.285156  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10377            0
 29   1   3   3  5.398007  1.554047 0.0  6.952054  24.065496  6.952054  5.135604 1817.800781 1855.492188  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        37026            0
 29   1   4   4  3.185118  1.950486 0.0  5.135604  29.201100  5.135604  7.521312 1795.277344 1821.019531  12  12 1.0    0       51     62     5         5       13      17  2.400000  2.400000  2.607681  2.607681 1.086534 1.086534  0.202787  0.202787        21370            0
 29   1   5   5  5.791736  1.729576 0.0  7.521312  36.722412  7.521312  8.117868 1821.843750 1846.625000  20  20 1.0    0       63     82     5         5       18      22  4.000000  4.000000  3.741657  3.741657 0.935414 0.935414  0.032963  0.032963        38466            0
 29   1   6   6  5.491301  2.626567 0.0  8.117868  44.840280  8.117868  2.852854 1821.914062 1848.761719  19  19 1.0    0       83    101     5         5       23      27  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        90249            0
 29   1   7   7  2.455995  0.396859 0.0  2.852854  47.693134  2.852854  2.408030 1780.492188 1798.593750   9   9 1.0    0      102    110     2         2       28      29  4.500000  4.500000  3.535534  3.535534 0.785674 0.785674 -1.181272 -1.181272         2345            0
 29   1   8   8  2.052360  0.355670 0.0  2.408030  50.101164  2.408030  3.185235 1778.054688 1797.992188   8   8 1.0    0      111    118     2         2       30      31  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         5760            0
 29   1   9   9  2.695855  0.489380 0.0  3.185235  53.286399  3.185235  3.112263 1784.125000 1806.976562  10  10 1.0    0      119    128     2         2       32      33  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        19201            0
 29   1  10  10  2.624565  0.487698 0.0  3.112263  56.398662  3.112263  1.215897 1792.695312 1818.355469  10  10 1.0    0      129    138     3         3       34      36  3.333333  3.333333  4.041452  4.041452 1.212436 1.212436 -0.472489 -0.472489         8511            0
 29   1  11  11  1.013829  0.202069 0.0  1.215897  57.614560  1.215897  6.084282 1775.316406 1795.394531   4   4 1.0    0      139    142     3         3       37      39  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          427            0
 29   1  12  12  4.200205  1.884077 0.0  6.084282  63.698842  6.084282  0.000000 1808.746094 1833.414062  15  15 1.0    0      143    157     3         3       40      42  5.000000  5.000000  6.082763  6.082763 1.216553 1.216553 -0.781943 -0.781943         7108            0
 30   3   1   1  1.241770  0.799543 0.0  2.041313   2.041313  2.041313  0.000000 1766.664062 1784.296875  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        90724            0
 30   2   1   1  1.911825  0.625656 0.0  2.537481   4.578795  4.578795  2.706516 1787.964844 1807.796875  25  25 1.0   25        1     25    10        10        1      10  2.500000  2.500000  2.915476  2.915476 1.166190 1.166190  0.407215  0.407215        14648            0
 30   2   2   2  1.338605  1.367911 0.0  2.706516   7.285311  2.706516  0.000000 1795.414062 1813.414062  19  19 1.0   19       26     44    10        10       11      20  1.900000  1.900000  1.100505  1.100505 0.579213 0.579213  0.677676  0.677676        15431            0
 30   1   1   1  4.498557  1.343953 0.0  5.842510  10.421305 10.421305  7.843150 1821.632812 1844.917969  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        25197            0
 30   1   2   2  4.131742  1.004892 0.0  5.136634  18.264455  7.843150  3.505410 1817.539062 1848.785156  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         8187            0
 30   1   3   3  2.895750  0.609660 0.0  3.505410  21.769865  3.505410  1.564911 1804.734375 1825.015625  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         4660            0
 30   1   4   4  1.266569  0.298341 0.0  1.564911  23.334775  1.564911 10.707970 1791.742188 1810.035156   5   5 1.0    0       43     47     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         2095            0
 30   1   5   5  7.184537  3.523433 0.0 10.707970  34.042745 10.707970  2.199681 1861.484375 1886.238281  24  24 1.0    0       48     71     4         4       17      20  6.000000  6.000000  3.464102  3.464102 0.577350 0.577350 -0.079185 -0.079185        84379            0
 30   1   6   6  1.763720  0.435961 0.0  2.199681  36.242426  2.199681  0.948139 1800.660156 1822.304688   7   7 1.0    0       72     78     5         5       21      25  1.400000  1.400000  0.547723  0.547723 0.391230 0.391230  0.728611  0.728611         1623            0
 30   1   7   7  0.774272  0.173867 0.0  0.948139  37.190566  0.948139  0.944715 1785.453125 1803.074219   3   3 1.0    0       79     81     3         3       26      28  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          371            0
 30   1   8   8  0.770042  0.174673 0.0  0.944715  38.135281  0.944715  6.520390 1785.855469 1803.613281   3   3 1.0    0       82     84     3         3       29      31  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          530            0
 30   1   9   9  4.842760  1.677630 0.0  6.520390  44.655671  6.520390  3.171677 1832.914062 1854.214844  17  17 1.0    0       85    101     3         3       32      34  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        54593            0
 30   1  10  10  2.685512  0.486166 0.0  3.171677  47.827348  3.171677  6.609774 1809.191406 1832.164062  10  10 1.0    0      102    111     3         3       35      37  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         2110            0
 30   1  11  11  4.818656  1.791118 0.0  6.609774  54.437122  6.609774  9.179062 1834.703125 1855.671875  17  17 1.0    0      112    128     3         3       38      40  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232       131684            0
 30   1  12  12  6.809796  2.369266 0.0  9.179062  63.616184  9.179062  0.000000 1863.480469 1890.500000  23  23 1.0    0      129    151     4         4       41      44  5.750000  5.750000  5.500000  5.500000 0.956522 0.956522 -0.350220 -0.350220        21763            0
 31   3   1   1  1.243800  0.891592 0.0  2.135392   2.135392  2.135392  0.000000 1792.222656 1810.425781  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000       100558            0
 31   2   1   1  2.008613  0.787085 0.0  2.795698   4.931090  4.931090  1.548908 1814.265625 1834.101562  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.756810  2.756810 1.060311 1.060311  0.425181  0.425181        23694            0
 31   2   2   2  1.249801  0.299107 0.0  1.548908   6.479998  1.548908  0.000000 1821.031250 1839.746094  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939         6565            0
 31   1   1   1  4.486548  2.232412 0.0  6.718959  11.650049 11.650049  6.593102 1847.265625 1871.039062  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        17117            0
 31   1   2   2  4.108342  0.935852 0.0  5.044194  18.243152  6.593102  7.130210 1843.500000 1874.902344  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         9881            0
 31   1   3   3  5.438975  1.691234 0.0  7.130210  25.373361  7.130210  1.560726 1864.207031 1901.878906  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        38852            0
 31   1   4   4  1.263314  0.297413 0.0  1.560726  26.934088  1.560726 11.677722 1817.812500 1836.187500   5   5 1.0    0       51     55     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519          942            0
 31   1   5   5  7.610949  4.066773 0.0 11.677722  38.611810 11.677722  1.885925 1899.785156 1939.582031  25  25 1.0    0       56     80     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        95592            0
 31   1   6   6  1.492263  0.393662 0.0  1.885925  40.497735  1.885925  0.928810 1824.820312 1843.535156   6   6 1.0    0       81     86     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         2424            0
 31   1   7   7  0.762237  0.166574 0.0  0.928810  41.426545  0.928810  6.412591 1811.703125 1829.417969   3   3 1.0    0       87     89     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          520            0
 31   1   8   8  4.891065  1.521527 0.0  6.412591  47.839136  6.412591  7.715026 1859.292969 1883.648438  17  17 1.0    0       90    106     3         3       30      32  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        48137            0
 31   1   9   9  5.079804  2.635222 0.0  7.715026  55.554163  7.715026  3.549041 1862.390625 1886.402344  18  18 1.0    0      107    124     3         3       33      35  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        47213            0
 31   1  10  10  2.961150  0.587891 0.0  3.549041  59.103204  3.549041  4.482845 1843.304688 1866.210938  11  11 1.0    0      125    135     3         3       36      38  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        21072            0
 31   1  11  11  3.772791  0.710054 0.0  4.482845  63.586049  4.482845  3.467957 1853.101562 1883.472656  14  14 1.0    0      136    149     3         3       39      41  4.666667  4.666667  6.350853  6.350853 1.360897 1.360897 -0.815760 -0.815760         6844            0
 31   1  12  12  2.933295  0.534661 0.0  3.467957  67.054006  3.467957  0.000000 1844.902344 1871.195312  11  11 1.0    0      150    160     3         3       42      44  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         3319            0
 32   3   1   1  1.244652  0.840547 0.0  2.085199   2.085199  2.085199  0.000000 1814.601562 1832.226562  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        91028            0
 32   2   1   1  2.013145  0.663716 0.0  2.676861   4.762060  4.762060  1.556337 1836.722656 1856.160156  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.913570  2.913570 1.120604 1.120604  0.407427  0.407427        19001            0
 32   2   2   2  1.252737  0.303600 0.0  1.556337   6.318397  1.556337  0.000000 1842.218750 1860.906250  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  0.918937  0.918937 0.510520 0.510520  0.716939  0.716939         6176            0
 32   1   1   1  4.510757  1.190349 0.0  5.701106  10.463166 10.463166  6.652968 1869.750000 1893.339844  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        17485            0
 32   1   2   2  4.123330  0.973301 0.0  5.096632  17.116134  6.652968  3.949619 1865.750000 1896.250000  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         9148            0
 32   1   3   3  3.192577  0.757042 0.0  3.949619  21.065754  3.949619  5.303586 1855.550781 1874.207031  12  12 1.0    0       32     43     4         4        9      12  3.000000  3.000000  4.000000  4.000000 1.333333 1.333333 -0.160964 -0.160964        28566            0
 32   1   4   4  4.370899  0.932687 0.0  5.303586  26.369339  5.303586 12.042482 1871.953125 1897.628906  16  16 1.0    0       44     59     4         4       13      16  4.000000  4.000000  5.354126  5.354126 1.338532 1.338532 -0.333847 -0.333847         6854            0
 32   1   5   5  7.539921  4.502561 0.0 12.042482  38.411822 12.042482  1.875473 1921.253906 1960.593750  25  25 1.0    0       60     84     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        74356            0
 32   1   6   6  1.486419  0.389054 0.0  1.875473  40.287294  1.875473  0.934332 1845.515625 1864.621094   6   6 1.0    0       85     90     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         3059            0
 32   1   7   7  0.766049  0.168283 0.0  0.934332  41.221627  0.934332  6.463949 1832.828125 1850.574219   3   3 1.0    0       91     93     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          520            0
 32   1   8   8  4.869817  1.594132 0.0  6.463949  47.685576  6.463949  7.127510 1880.253906 1904.816406  17  17 1.0    0       94    110     3         3       30      32  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        19858            0
 32   1   9   9  5.103414  2.024096 0.0  7.127510  54.813085  7.127510  3.565278 1883.703125 1907.816406  18  18 1.0    0      111    128     3         3       33      35  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        83866            0
 32   1  10  10  2.968771  0.596507 0.0  3.565278  58.378363  3.565278  4.493682 1865.515625 1888.796875  11  11 1.0    0      129    139     3         3       36      38  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        24965            0
 32   1  11  11  3.771492  0.722190 0.0  4.493682  62.872045  4.493682 18.023046 1874.406250 1904.886719  14  14 1.0    0      140    153     3         3       39      41  4.666667  4.666667  6.350853  6.350853 1.360897 1.360897 -0.815760 -0.815760         9230            0
 32   1  12  12  7.354465 10.668581 0.0 18.023046  80.895091 18.023046  0.000000 1916.664062 1956.554688  24  24 1.0    0      154    177     3         3       42      44  8.000000  8.000000  5.507571  5.507571 0.869616 0.869616 -0.704847 -0.704847       147592            0
 33   3   1   1  1.246570  0.831776 0.0  2.078346   2.078346  2.078346  0.000000 1838.437500 1856.132812  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        84747            0
 33   2   1   1  1.799067  1.498336 0.0  3.297404   5.375749  5.375749  1.818330 1859.406250 1879.695312  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.756810  2.756810 1.148671 1.148671  0.425181  0.425181        11711            0
 33   2   2   2  1.430654  0.387677 0.0  1.818330   7.194080  1.818330  0.000000 1868.917969 1886.644531  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.247219  1.247219 0.623610 0.623610  0.648355  0.648355         9572            0
 33   1   1   1  4.482514  1.186906 0.0  5.669420  11.045169 11.045169  6.950043 1894.378906 1917.964844  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        23033            0
 33   1   2   2  4.132910  0.998803 0.0  5.131713  17.995212  6.950043  3.515309 1890.488281 1921.132812  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         7085            0
 33   1   3   3  2.903111  0.612197 0.0  3.515309  21.510521  3.515309  7.229781 1877.984375 1898.515625  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         4938            0
 33   1   4   4  5.109239  2.120542 0.0  7.229781  28.740302  7.229781  4.650505 1904.695312 1923.035156  18  18 1.0    0       43     60     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        62484            0
 33   1   5   5  3.846500  0.804005 0.0  4.650505  33.390807  4.650505  1.257935 1895.289062 1922.765625  14  14 1.0    0       61     74     4         4       17      20  3.500000  3.500000  4.358899  4.358899 1.245400 1.245400 -0.210968 -0.210968         6669            0
 33   1   6   6  1.026677  0.231259 0.0  1.257935  34.648743  1.257935  0.940667 1865.093750 1884.593750   4   4 1.0    0       75     78     4         4       21      24  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          487            0
 33   1   7   7  0.773018  0.167649 0.0  0.940667  35.589410  0.940667  6.488223 1858.503906 1876.148438   3   3 1.0    0       79     81     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          482            0
 33   1   8   8  4.868947  1.619275 0.0  6.488223  42.077633  6.488223  4.188237 1905.984375 1929.953125  17  17 1.0    0       82     98     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        66203            0
 33   1   9   9  3.507050  0.681187 0.0  4.188237  46.265870  4.188237  2.590423 1894.089844 1913.851562  13  13 1.0    0       99    111     3         3       31      33  4.333333  4.333333  5.773503  5.773503 1.332347 1.332347 -0.741304 -0.741304         7190            0
 33   1  10  10  2.199138  0.391285 0.0  2.590423  48.856293  2.590423  6.380526 1877.128906 1896.519531   9   9 1.0    0      112    120     3         3       34      36  3.000000  3.000000  2.645751  2.645751 0.881917 0.881917 -0.177451 -0.177451         2953            0
 33   1  11  11  5.096097  1.284429 0.0  6.380526  55.236819  6.380526 16.911711 1919.687500 1956.519531  18  18 1.0    0      121    138     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        36794            0
 33   1  12  12  6.784471 10.127240 0.0 16.911711  72.148530 16.911711  0.000000 1933.656250 1958.261719  23  23 1.0    0      139    161     4         4       41      44  5.750000  5.750000  5.188127  5.188127 0.902283 0.902283 -0.314751 -0.314751       117922            0
 34   3   1   1  1.245677  0.820871 0.0  2.066548   2.066548  2.066548  0.000000 1862.320312 1879.871094  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        92751            0
 34   2   1   1  2.261446  0.942349 0.0  3.203795   5.270343  5.270343  1.300905 1884.039062 1902.542969  28  28 1.0   28        1     28    10        10        1      10  2.800000  2.800000  2.658320  2.658320 0.949400 0.949400  0.436718  0.436718        32669            0
 34   2   2   2  1.050297  0.250608 0.0  1.300905   6.571248  1.300905  0.000000 1892.121094 1911.765625  16  16 1.0   16       29     44    10        10       11      20  1.600000  1.600000  0.966092  0.966092 0.603807 0.603807  0.706396  0.706396         4671            0
 34   1   1   1  4.513918  1.301105 0.0  5.815023  11.085365 11.085365  6.422112 1917.820312 1941.312500  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        19853            0
 34   1   2   2  4.119529  1.001678 0.0  5.121207  17.507477  6.422112  3.912854 1913.757812 1945.179688  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         4235            0
 34   1   3   3  3.178238  0.734616 0.0  3.912854  21.420331  3.912854 10.681499 1911.378906 1936.781250  12  12 1.0    0       32     43     5         5        9      13  2.400000  2.400000  2.607681  2.607681 1.086534 1.086534  0.202787  0.202787         2998            0
 34   1   4   4  7.529513  3.151985 0.0 10.681499  32.101830 10.681499  1.905176 1974.062500 2014.410156  25  25 1.0    0       44     68     5         5       14      18  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        79324            0
 34   1   5   5  1.502812  0.402364 0.0  1.905176  34.007006  1.905176 12.606438 1893.351562 1911.941406   6   6 1.0    0       69     74     5         5       19      23  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         4733            0
 34   1   6   6  8.072575  4.533863 0.0 12.606438  46.613444 12.606438  0.722995 1979.484375 2023.710938  26  26 1.0    0       75    100     5         5       24      28  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       120406            0
 34   1   7   7  0.619742  0.103253 0.0  0.722995  47.336440  0.722995  0.898799 1880.812500 1898.667969   2   2 1.0    0      101    102     2         2       29      30  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          221            0
 34   1   8   8  0.782714  0.116084 0.0  0.898799  48.235238  0.898799  6.244729 1882.238281 1900.218750   3   3 1.0    0      103    105     2         2       31      32  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          276            0
 34   1   9   9  4.830962  1.413767 0.0  6.244729  54.479968  6.244729  3.113150 1930.859375 1955.707031  17  17 1.0    0      106    122     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        31398            0
 34   1  10  10  2.622870  0.490280 0.0  3.113150  57.593118  3.113150  1.220203 1911.289062 1936.871094  10  10 1.0    0      123    132     3         3       36      38  3.333333  3.333333  4.041452  4.041452 1.212436 1.212436 -0.472489 -0.472489         9104            0
 34   1  11  11  1.014642  0.205561 0.0  1.220203  58.813320  1.220203 23.766356 1893.792969 1913.910156   4   4 1.0    0      133    136     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          427            0
 34   1  12  12  8.158429 15.607928 0.0 23.766356  82.579677 23.766356  0.000000 1969.304688 1995.511719  26  26 1.0    0      137    162     3         3       42      44  8.666667  8.666667 13.279056 13.279056 1.532199 1.532199 -1.420138 -1.420138       207176            0
 35   3   1   1  1.247002  0.835434 0.0  2.082436   2.082436  2.082436  0.000000 1882.441406 1902.320312  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        90953            0
 35   2   1   1  2.583581  2.438411 0.0  5.021992   7.104428  7.104428  0.805780 1914.492188 1942.488281  31  31 1.0   31        1     31    10        10        1      10  3.100000  3.100000  2.601282  2.601282 0.839123 0.839123  0.443543  0.443543        46360            0
 35   2   2   2  0.614468  0.191311 0.0  0.805780   7.910208  0.805780  0.000000 1846.000000 1867.566406  11  11 1.0   11       32     42    10        10       11      20  1.100000  1.100000  0.316228  0.316228 0.287480 0.287480  0.880669  0.880669         3952            0
 35   1   1   1  4.774674  1.500804 0.0  6.275478  13.379906 13.379906 10.371100 1945.828125 1978.203125  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        35135            0
 35   1   2   2  7.103705  2.461615 0.0  9.565320  23.751006 10.371100  4.319459 1989.109375 2034.671875  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        78880            0
 35   1   3   3  3.502011  0.817447 0.0  4.319459  28.070464  4.319459 10.569986 1937.992188 1962.949219  13  13 1.0    0       42     54     5         5       11      15  2.600000  2.600000  3.577709  3.577709 1.376042 1.376042  0.054826  0.054826         4739            0
 35   1   4   4  7.384691  3.185295 0.0 10.569986  38.640450 10.569986  7.996246 1993.429688 2034.648438  25  25 1.0    0       55     79     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        91113            0
 35   1   5   5  5.438990  2.557255 0.0  7.996246  46.636696  7.996246 43.838599 1964.632812 1991.960938  19  19 1.0    0       80     98     5         5       21      25  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        79666            0
 35   1   6   6 11.656820 32.181779 0.0 43.838599  90.475295 43.838599  0.529588 2107.226562 2155.046875  35  35 1.0    0       99    133     6         6       26      31  5.833333  5.833333  3.920034  3.920034 0.672006 0.672006  0.110754  0.110754       543365            0
 35   1   7   7  0.455667  0.073921 0.0  0.529588  91.004883  0.529588  0.895444 1842.167969 1863.496094   1   1 1.0    0      134    134     1         1       32      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000           72            0
 35   1   8   8  0.777249  0.118195 0.0  0.895444  91.900327  0.895444  0.715540 1850.992188 1872.628906   3   3 1.0    0      135    137     2         2       33      34  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          491            0
 35   1   9   9  0.614817  0.100723 0.0  0.715540  92.615867  0.715540  1.974827 1850.921875 1872.273438   2   2 1.0    0      138    139     2         2       35      36  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          369            0
 35   1  10  10  0.777019  1.197808 0.0  1.974827  94.590695  1.974827  0.709034 1852.656250 1874.281250   3   3 1.0    0      140    142     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          401            0
 35   1  11  11  0.612955  0.096079 0.0  0.709034  95.299729  0.709034 24.986749 1853.089844 1874.710938   2   2 1.0    0      143    144     2         2       39      40  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          286            0
 35   1  12  12  8.127507 16.859242 0.0 24.986749 120.286477 24.986749  0.000000 2002.273438 2034.527344  26  26 1.0    0      145    170     2         2       41      42 13.000000 13.000000 13.435029 13.435029 1.279527 1.279527 -2.851502 -2.851502       233145            0
 36   3   1   1  1.247966  0.692625 0.0  1.940591   1.940591  1.940591  0.000000 1923.019531 1943.601562  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        79964            0
 36   2   1   1  1.792123  0.527994 0.0  2.320117   4.260708  4.260708  2.932367 1948.210938 1970.656250  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        12207            0
 36   2   2   2  1.433957  1.498410 0.0  2.932367   7.193075  2.932367  0.000000 1967.511719 1990.242188  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  0.816497  0.816497 0.408248 0.408248  0.740765  0.740765         9311            0
 36   1   1   1  4.484925  1.260377 0.0  5.745301  10.006009 10.006009  8.022291 1985.824219 2011.089844  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        25486            0
 36   1   2   2  4.117461  0.972462 0.0  5.089923  18.028300  8.022291  3.525666 1984.480469 2016.222656  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         4044            0
 36   1   3   3  2.903417  0.622249 0.0  3.525666  21.553966  3.525666  6.944970 1977.062500 1999.222656  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408        10266            0
 36   1   4   4  5.103904  1.841066 0.0  6.944970  28.498936  6.944970  4.275101 2005.257812 2043.222656  18  18 1.0    0       43     60     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        76351            0
 36   1   5   5  3.515146  0.759955 0.0  4.275101  32.774037  4.275101  1.533982 1989.707031 2019.457031  13  13 1.0    0       61     73     4         4       17      20  3.250000  3.250000  4.500000  4.500000 1.384615 1.384615 -0.229716 -0.229716         4642            0
 36   1   6   6  1.266992  0.266990 0.0  1.533982  34.308019  1.533982  0.939970 1965.414062 1985.101562   5   5 1.0    0       74     78     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1328            0
 36   1   7   7  0.772266  0.167704 0.0  0.939970  35.247989  0.939970  6.484984 1957.011719 1975.695312   3   3 1.0    0       79     81     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          442            0
 36   1   8   8  4.858185  1.626800 0.0  6.484984  41.732973  6.484984  3.442519 2004.828125 2029.375000  17  17 1.0    0       82     98     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        44940            0
 36   1   9   9  2.904350  0.538170 0.0  3.442519  45.175493  3.442519  3.843827 1987.171875 2012.503906  11  11 1.0    0       99    109     3         3       31      33  3.666667  3.666667  3.785939  3.785939 1.032529 1.032529 -0.425145 -0.425145         2474            0
 36   1  10  10  3.015918  0.827910 0.0  3.843827  49.019320  3.843827  6.398368 1989.683594 2013.382812  11  11 1.0    0      110    120     3         3       34      36  3.666667  3.666667  3.055050  3.055050 0.833196 0.833196 -0.274301 -0.274301         9322            0
 36   1  11  11  5.131703  1.266665 0.0  6.398368  55.417688  6.398368  6.240426 2019.093750 2056.449219  18  18 1.0    0      121    138     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        44530            0
 36   1  12  12  4.896977  1.343448 0.0  6.240426  61.658114  6.240426  0.000000 2013.667969 2032.574219  17  17 1.0    0      139    155     4         4       41      44  4.250000  4.250000  6.500000  6.500000 1.529412 1.529412 -0.453445 -0.453445         8463            0
 37   3   1   1  1.247957  0.911779 0.0  2.159737   2.159737  2.159737  0.000000 1962.039062 1980.304688  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        95538            0
 37   2   1   1  2.113546  0.704929 0.0  2.818475   4.978212  4.978212  1.197360 1985.210938 2004.843750  27  27 1.0   27        1     27    10        10        1      10  2.700000  2.700000  2.790858  2.790858 1.033651 1.033651  0.421262  0.421262        20760            0
 37   2   2   2  0.959873  0.237487 0.0  1.197360   6.175572  1.197360  0.000000 1989.605469 2009.933594  15  15 1.0   15       28     42    10        10       11      20  1.500000  1.500000  0.849837  0.849837 0.566558 0.566558  0.732867  0.732867         4757            0
 37   1   1   1  4.485981  1.210155 0.0  5.696137  10.674349 10.674349  6.277782 2017.570312 2041.621094  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        16424            0
 37   1   2   2  4.151914  0.928508 0.0  5.080422  16.952131  6.277782  8.011691 2013.757812 2045.539062  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        14424            0
 37   1   3   3  5.377038  2.634654 0.0  8.011691  24.963822  8.011691  4.276816 2034.957031 2073.449219  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        47321            0
 37   1   4   4  3.179507  1.097309 0.0  4.276816  29.240638  4.276816  7.626526 2013.628906 2039.683594  12  12 1.0    0       51     62     5         5       13      17  2.400000  2.400000  2.607681  2.607681 1.086534 1.086534  0.202787  0.202787        76996            0
 37   1   5   5  5.846060  1.780465 0.0  7.626526  36.867164  7.626526  7.707238 2044.773438 2070.492188  20  20 1.0    0       63     82     5         5       18      22  4.000000  4.000000  3.741657  3.741657 0.935414 0.935414  0.032963  0.032963        36769            0
 37   1   6   6  5.535100  2.172139 0.0  7.707238  44.574402  7.707238  2.859366 2040.925781 2068.464844  19  19 1.0    0       83    101     5         5       23      27  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        79400            0
 37   1   7   7  2.461986  0.397381 0.0  2.859366  47.433768  2.859366  2.397182 1998.851562 2017.289062   9   9 1.0    0      102    110     2         2       28      29  4.500000  4.500000  3.535534  3.535534 0.785674 0.785674 -1.181272 -1.181272         2587            0
 37   1   8   8  2.056788  0.340394 0.0  2.397182  49.830950  2.397182  3.224894 1995.753906 2016.191406   8   8 1.0    0      111    118     2         2       30      31  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2394            0
 37   1   9   9  2.720090  0.504803 0.0  3.224894  53.055844  3.224894  3.123581 2003.781250 2027.828125  10  10 1.0    0      119    128     2         2       32      33  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841         4200            0
 37   1  10  10  2.625517  0.498065 0.0  3.123581  56.179425  3.123581  1.216844 2010.625000 2036.636719  10  10 1.0    0      129    138     3         3       34      36  3.333333  3.333333  4.041452  4.041452 1.212436 1.212436 -0.472489 -0.472489        14054            0
 37   1  11  11  1.013801  0.203043 0.0  1.216844  57.396270  1.216844  6.183089 1993.414062 2014.148438   4   4 1.0    0      139    142     3         3       37      39  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          427            0
 37   1  12  12  4.871843  1.311247 0.0  6.183089  63.579359  6.183089  0.000000 2032.613281 2053.277344  17  17 1.0    0      143    159     3         3       40      42  5.666667  5.666667  8.082904  8.082904 1.426395 1.426395 -1.008346 -1.008346        10554            0
 38   3   1   1  1.245242  1.922089 0.0  3.167331   3.167331  3.167331  0.000000 1985.867188 2003.851562  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        92460            0
 38   2   1   1  1.794032  0.514059 0.0  2.308091   5.475422  5.475422  1.806543 2005.574219 2026.410156  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        13067            0
 38   2   2   2  1.438187  0.368356 0.0  1.806543   7.281965  1.806543  0.000000 2017.093750 2039.246094  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.333333  1.333333 0.666667 0.666667  0.632023  0.632023         9496            0
 38   1   1   1  4.454242  1.220611 0.0  5.674853  11.150275 11.150275  6.950259 2041.484375 2065.652344  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        43356            0
 38   1   2   2  4.139957  1.003759 0.0  5.143716  18.100534  6.950259  6.982029 2037.617188 2068.820312  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         4428            0
 38   1   3   3  5.366066  1.615964 0.0  6.982029  25.082563  6.982029  6.908344 2058.167969 2096.554688  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        52954            0
 38   1   4   4  5.102663  1.805681 0.0  6.908344  31.990907  6.908344  4.283783 2057.398438 2095.230469  18  18 1.0    0       51     68     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        57998            0
 38   1   5   5  3.539982  0.743801 0.0  4.283783  36.274689  4.283783  1.546733 2040.402344 2069.246094  13  13 1.0    0       69     81     4         4       17      20  3.250000  3.250000  4.500000  4.500000 1.384615 1.384615 -0.229716 -0.229716         4336            0
 38   1   6   6  1.276128  0.270605 0.0  1.546733  37.821423  1.546733  0.934749 2015.664062 2034.722656   5   5 1.0    0       82     86     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         2717            0
 38   1   7   7  0.765434  0.169315 0.0  0.934749  38.756172  0.934749  6.437504 2006.675781 2024.703125   3   3 1.0    0       87     89     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          462            0
 38   1   8   8  4.876284  1.561219 0.0  6.437504  45.193675  6.437504  4.956966 2054.074219 2078.496094  17  17 1.0    0       90    106     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        46356            0
 38   1   9   9  3.180252  1.776714 0.0  4.956966  50.150642  4.956966  3.155849 2039.457031 2062.156250  12  12 1.0    0      107    118     3         3       31      33  4.000000  4.000000  5.196152  5.196152 1.299038 1.299038 -0.660211 -0.660211         3059            0
 38   1  10  10  2.613986  0.541863 0.0  3.155849  53.306491  3.155849  6.432110 2033.835938 2060.187500  10  10 1.0    0      119    128     3         3       34      36  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         8665            0
 38   1  11  11  5.100480  1.331630 0.0  6.432110  59.738601  6.432110 17.119808 2068.949219 2106.515625  18  18 1.0    0      129    146     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        23362            0
 38   1  12  12  6.910967 10.208841 0.0 17.119808  76.858409 17.119808  0.000000 2090.863281 2115.941406  23  23 1.0    0      147    169     4         4       41      44  5.750000  5.750000  5.852350  5.852350 1.017800 1.017800 -0.388299 -0.388299       126667            0
 39   3   1   1  1.246057  0.801142 0.0  2.047199   2.047199  2.047199  0.000000 2009.562500 2027.539062  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        88886            0
 39   2   1   1  1.761327  0.488969 0.0  2.250296   4.297495  4.297495  3.012850 2030.398438 2051.089844  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        12783            0
 39   2   2   2  1.443858  1.568992 0.0  3.012850   7.310345  3.012850  0.000000 2039.003906 2061.214844  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.054093  1.054093 0.527046 0.527046  0.687380  0.687380         8084            0
 39   1   1   1  4.494723  1.276067 0.0  5.770790  10.068285 10.068285  8.220764 2066.210938 2090.613281  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        11158            0
 39   1   2   2  4.129615  1.078299 0.0  5.207914  18.289049  8.220764  3.527209 2061.460938 2092.554688  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         7027            0
 39   1   3   3  2.905601  0.621608 0.0  3.527209  21.816258  3.527209  7.097133 2052.457031 2073.824219  11  11 1.0    0       32     42     4         4        9      12  2.750000  2.750000  2.872281  2.872281 1.044466 1.044466  0.023408  0.023408         3354            0
 39   1   4   4  5.106544  1.990588 0.0  7.097133  28.913391  7.097133  4.279464 2079.750000 2116.968750  18  18 1.0    0       43     60     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        73145            0
 39   1   5   5  3.530378  0.749086 0.0  4.279464  33.192855  4.279464  1.546177 2063.347656 2092.152344  13  13 1.0    0       61     73     4         4       17      20  3.250000  3.250000  3.304038  3.304038 1.016627 1.016627 -0.052845 -0.052845         3699            0
 39   1   6   6  1.275962  0.270215 0.0  1.546177  34.739032  1.546177  0.942187 2038.617188 2057.882812   5   5 1.0    0       74     78     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         2249            0
 39   1   7   7  0.771578  0.170609 0.0  0.942187  35.681218  0.942187  6.489609 2028.496094 2046.664062   3   3 1.0    0       79     81     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          448            0
 39   1   8   8  4.870373  1.619235 0.0  6.489609  42.170827  6.489609  4.160122 2076.972656 2101.148438  17  17 1.0    0       82     98     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        43581            0
 39   1   9   9  3.488023  0.672099 0.0  4.160122  46.330949  4.160122  2.607395 2065.152344 2085.546875  13  13 1.0    0       99    111     3         3       31      33  4.333333  4.333333  4.932883  4.932883 1.138358 1.138358 -0.620690 -0.620690         3119            0
 39   1  10  10  2.199823  0.407573 0.0  2.607395  48.938345  2.607395  6.264481 2048.582031 2068.433594   9   9 1.0    0      112    120     3         3       34      36  3.000000  3.000000  2.645751  2.645751 0.881917 0.881917 -0.177451 -0.177451         3175            0
 39   1  11  11  5.085978  1.178504 0.0  6.264481  55.202826  6.264481 24.335492 2092.933594 2130.437500  18  18 1.0    0      121    138     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        29269            0
 39   1  12  12  8.178671 16.156821 0.0 24.335492  79.538318 24.335492  0.000000 2137.953125 2186.878906  26  26 1.0    0      139    164     4         4       41      44  6.500000  6.500000 11.000000 11.000000 1.692308 1.692308 -0.792481 -0.792481       208428            0
 40   3   1   1  1.242392  0.798620 0.0  2.041012   2.041012  2.041012  0.000000 2036.007812 2053.960938  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        82894            0
 40   2   1   1  2.578367  1.426797 0.0  4.005164   6.046176  6.046176  0.802083 2067.750000 2094.601562  31  31 1.0   31        1     31    10        10        1      10  3.100000  3.100000  2.558211  2.558211 0.825229 0.825229  0.448768  0.448768        41205            0
 40   2   2   2  0.612539  0.189545 0.0  0.802083   6.848260  0.802083  0.000000 2071.199219 2089.250000  11  11 1.0   11       32     42    10        10       11      20  1.100000  1.100000  0.316228  0.316228 0.287480 0.287480  0.880669  0.880669         4495            0
 40   1   1   1  4.768321  1.431087 0.0  6.199408  12.245584 12.245584 10.638253 2100.023438 2132.343750  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        32234            0
 40   1   2   2  7.153098  2.683071 0.0  9.836169  22.883837 10.638253 23.379434 2138.117188 2185.105469  24  24 1.0    0       18     41     5         5        6      10  4.800000  4.800000  5.310367  5.310367 1.106327 1.106327 -0.144619 -0.144619        74398            0
 40   1   3   3  8.101103 15.278332 0.0 23.379434  46.263271 23.379434  6.326427 2161.128906 2203.300781  26  26 1.0    0       42     67     5         5       11      15  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       350648            0
 40   1   4   4  4.872197  1.454230 0.0  6.326427  52.589698  6.326427  7.885525 2110.984375 2141.660156  17  17 1.0    0       68     84     5         5       16      20  3.400000  3.400000  3.286335  3.286335 0.966569 0.966569  0.095689  0.095689        40497            0
 40   1   5   5  6.123672  1.761853 0.0  7.885525  60.475223  7.885525 11.416844 2126.976562 2151.734375  21  21 1.0    0       85    105     5         5       21      25  4.200000  4.200000  3.962323  3.962323 0.943410 0.943410  0.004700  0.004700        34982            0
 40   1   6   6  7.725381  3.691462 0.0 11.416844  71.892067 11.416844  0.525860 2163.289062 2187.496094  26  26 1.0    0      106    131     6         6       26      31  4.333333  4.333333  3.723797  3.723797 0.859338 0.859338  0.133470  0.133470       106805            0
 40   1   7   7  0.452661  0.073199 0.0  0.525860  72.417928  0.525860  0.895797 2064.562500 2082.769531   1   1 1.0    0      132    132     1         1       32      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000           72            0
 40   1   8   8  0.779731  0.116066 0.0  0.895797  73.313725  0.895797  0.715509 2067.746094 2085.777344   3   3 1.0    0      133    135     2         2       33      34  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          465            0
 40   1   9   9  0.615519  0.099990 0.0  0.715509  74.029234  0.715509  0.889061 2068.058594 2086.031250   2   2 1.0    0      136    137     2         2       35      36  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          448            0
 40   1  10  10  0.778293  0.110768 0.0  0.889061  74.918295  0.889061  0.707321 2068.558594 2086.531250   3   3 1.0    0      138    140     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          411            0
 40   1  11  11  0.611797  0.095525 0.0  0.707321  75.625617  0.707321 25.767124 2068.832031 2087.031250   2   2 1.0    0      141    142     2         2       39      40  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          286            0
 40   1  12  12  8.148415 17.618709 0.0 25.767124 101.392741 25.767124  0.000000 2150.421875 2182.406250  26  26 1.0    0      143    168     2         2       41      42 13.000000 13.000000 15.556349 15.556349 1.296362 1.296362 -3.049313 -3.049313       235026            0
 41   3   1   1  1.245722  0.836527 0.0  2.082249   2.082249  2.082249  0.000000 2068.652344 2086.726562  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        86403            0
 41   2   1   1  1.785094  0.481322 0.0  2.266416   4.348664  4.348664  1.827224 2088.761719 2109.531250  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        11375            0
 41   2   2   2  1.442701  0.384523 0.0  1.827224   6.175889  1.827224  0.000000 2099.097656 2121.058594  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.054093  1.054093 0.527046 0.527046  0.687380  0.687380         9462            0
 41   1   1   1  4.489637  2.455089 0.0  6.944725  11.293390 11.293390  6.896489 2122.703125 2146.597656  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        22637            0
 41   1   2   2  4.114755  0.954509 0.0  5.069265  18.189879  6.896489  7.000023 2117.941406 2149.503906  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        13064            0
 41   1   3   3  5.388663  1.611359 0.0  7.000023  25.189901  7.000023  6.973944 2139.257812 2177.710938  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        24542            0
 41   1   4   4  5.090794  1.883150 0.0  6.973944  32.163845  6.973944  4.321435 2139.433594 2177.015625  18  18 1.0    0       51     68     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        69449            0
 41   1   5   5  3.549885  0.771551 0.0  4.321435  36.485281  4.321435  1.533573 2122.398438 2151.066406  13  13 1.0    0       69     81     4         4       17      20  3.250000  3.250000  3.862210  3.862210 1.188372 1.188372 -0.140806 -0.140806         6514            0
 41   1   6   6  1.268407  0.265166 0.0  1.533573  38.018854  1.533573  0.933440 2097.441406 2116.449219   5   5 1.0    0       82     86     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1295            0
 41   1   7   7  0.765217  0.168223 0.0  0.933440  38.952293  0.933440  6.327729 2088.578125 2106.761719   3   3 1.0    0       87     89     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          466            0
 41   1   8   8  4.874499  1.453230 0.0  6.327729  45.280022  6.327729  3.770190 2136.054688 2160.300781  17  17 1.0    0       90    106     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        79360            0
 41   1   9   9  3.181120  0.589070 0.0  3.770190  49.050212  3.770190  3.275061 2121.292969 2143.890625  12  12 1.0    0      107    118     3         3       31      33  4.000000  4.000000  5.196152  5.196152 1.299038 1.299038 -0.660211 -0.660211         5628            0
 41   1  10  10  2.618767  0.656293 0.0  3.275061  52.325273  3.275061  6.293603 2117.000000 2143.281250  10  10 1.0    0      119    128     3         3       34      36  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418        15617            0
 41   1  11  11  5.084376  1.209227 0.0  6.293603  58.618876  6.293603 30.411023 2148.890625 2186.117188  18  18 1.0    0      129    146     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        28663            0
 41   1  12  12  8.150933 22.260090 0.0 30.411023  89.029899 30.411023  0.000000 2188.140625 2235.750000  26  26 1.0    0      147    172     4         4       41      44  6.500000  6.500000 11.000000 11.000000 1.692308 1.692308 -0.792481 -0.792481       234655            0
 42   3   1   1  1.247578  0.838899 0.0  2.086477   2.086477  2.086477  0.000000 2094.542969 2112.796875  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        86250            0
 42   2   1   1  2.002624  0.637037 0.0  2.639660   4.726137  4.726137  1.565749 2116.730469 2136.722656  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.796824  2.796824 1.075701 1.075701  0.420580  0.420580        18074            0
 42   2   2   2  1.229849  0.335901 0.0  1.565749   6.291887  1.565749  0.000000 2121.632812 2140.269531  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  1.135292  1.135292 0.630718 0.630718  0.670543  0.670543         8228            0
 42   1   1   1  4.497404  1.398841 0.0  5.896245  10.622382 10.622382  6.622870 2149.589844 2173.664062  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        25540            0
 42   1   2   2  4.080636  0.976485 0.0  5.057120  17.245252  6.622870  6.962822 2143.398438 2164.378906  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220        10638            0
 42   1   3   3  5.376620  1.586201 0.0  6.962822  24.208073  6.962822  1.568114 2164.843750 2203.480469  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        24463            0
 42   1   4   4  1.267364  0.300750 0.0  1.568114  25.776187  1.568114 12.510748 2119.089844 2137.898438   5   5 1.0    0       51     55     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519          879            0
 42   1   5   5  7.649601  4.861148 0.0 12.510748  38.286936 12.510748  2.213684 2202.585938 2242.988281  25  25 1.0    0       56     80     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        85859            0
 42   1   6   6  1.768762  0.444922 0.0  2.213684  40.500620  2.213684  0.925554 2127.769531 2149.929688   7   7 1.0    0       81     87     5         5       22      26  1.400000  1.400000  0.547723  0.547723 0.391230 0.391230  0.728611  0.728611         2033            0
 42   1   7   7  0.767782  0.157772 0.0  0.925554  41.426173  0.925554  0.931912 2112.226562 2130.476562   3   3 1.0    0       88     90     3         3       27      29  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          807            0
 42   1   8   8  0.765508  0.166405 0.0  0.931912  42.358086  0.931912  6.215052 2112.796875 2130.871094   3   3 1.0    0       91     93     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          407            0
 42   1   9   9  4.866384  1.348668 0.0  6.215052  48.573137  6.215052  8.421373 2158.855469 2181.507812  17  17 1.0    0       94    110     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        34295            0
 42   1  10  10  5.074642  3.346731 0.0  8.421373  56.994511  8.421373  3.607835 2162.109375 2184.304688  18  18 1.0    0      111    128     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        74783            0
 42   1  11  11  2.992786  0.615049 0.0  3.607835  60.602346  3.607835 10.768894 2139.601562 2160.917969  11  11 1.0    0      129    139     3         3       39      41  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181        12708            0
 42   1  12  12  7.144198  3.624695 0.0 10.768894  71.371240 10.768894  0.000000 2184.992188 2213.128906  24  24 1.0    0      140    163     3         3       42      44  8.000000  8.000000  6.244998  6.244998 0.780625 0.780625 -0.802557 -0.802557        34891            0
 43   3   1   1  1.248882  0.785785 0.0  2.034667   2.034667  2.034667  0.000000 2117.703125 2136.003906  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        83148            0
 43   2   1   1  1.780096  0.505977 0.0  2.286074   4.320741  4.320741  1.802948 2138.132812 2159.312500  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.756810  2.756810 1.148671 1.148671  0.425181  0.425181        12707            0
 43   2   2   2  1.436857  0.366091 0.0  1.802948   6.123689  1.802948  0.000000 2147.921875 2170.117188  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.054093  1.054093 0.527046 0.527046  0.687380  0.687380        10957            0
 43   1   1   1  4.505444  1.393592 0.0  5.899036  10.219777 10.219777  6.916619 2172.519531 2196.617188  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        29130            0
 43   1   2   2  4.137917  0.975754 0.0  5.113671  17.136396  6.916619  7.018005 2168.625000 2200.496094  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         8790            0
 43   1   3   3  5.389899  1.628106 0.0  7.018005  24.154401  7.018005  6.792475 2189.101562 2227.468750  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        37385            0
 43   1   4   4  5.042003  1.750472 0.0  6.792475  30.946876  6.792475  4.275837 2188.183594 2225.824219  18  18 1.0    0       51     68     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        90203            0
 43   1   5   5  3.530210  0.745628 0.0  4.275837  35.222714  4.275837  1.535135 2171.335938 2199.867188  13  13 1.0    0       69     81     4         4       17      20  3.250000  3.250000  4.500000  4.500000 1.384615 1.384615 -0.229716 -0.229716         7585            0
 43   1   6   6  1.266359  0.268776 0.0  1.535135  36.757849  1.535135  0.936438 2146.300781 2165.257812   5   5 1.0    0       82     86     4         4       21      24  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1282            0
 43   1   7   7  0.769038  0.167400 0.0  0.936438  37.694287  0.936438  6.528617 2137.441406 2155.574219   3   3 1.0    0       87     89     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          596            0
 43   1   8   8  4.881375  1.647242 0.0  6.528617  44.222904  6.528617  4.153607 2184.734375 2209.121094  17  17 1.0    0       90    106     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        48973            0
 43   1   9   9  3.478625  0.674982 0.0  4.153607  48.376511  4.153607  2.603865 2172.828125 2193.265625  13  13 1.0    0      107    119     3         3       31      33  4.333333  4.333333  5.773503  5.773503 1.332347 1.332347 -0.741304 -0.741304         5483            0
 43   1  10  10  2.189133  0.414732 0.0  2.603865  50.980376  2.603865  6.338395 2155.996094 2175.933594   9   9 1.0    0      120    128     3         3       34      36  3.000000  3.000000  2.645751  2.645751 0.881917 0.881917 -0.177451 -0.177451         7442            0
 43   1  11  11  5.080945  1.257450 0.0  6.338395  57.318770  6.338395  6.296592 2198.277344 2235.886719  18  18 1.0    0      129    146     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        29587            0
 43   1  12  12  4.873475  1.423118 0.0  6.296592  63.615363  6.296592  0.000000 2192.769531 2211.812500  17  17 1.0    0      147    163     4         4       41      44  4.250000  4.250000  5.852350  5.852350 1.377024 1.377024 -0.388299 -0.388299         9623            0
 44   3   1   1  1.246720  0.768310 0.0  2.015030   2.015030  2.015030  0.000000 2141.722656 2159.796875  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        85511            0
 44   2   1   1  1.919109  0.650716 0.0  2.569825   4.584855  4.584855  1.433892 2163.273438 2183.675781  25  25 1.0   25        1     25    10        10        1      10  2.500000  2.500000  2.838231  2.838231 1.135292 1.135292  0.415869  0.415869        16765            0
 44   2   2   2  1.154618  0.279274 0.0  1.433892   6.018747  1.433892  0.000000 2167.984375 2190.882812  17  17 1.0   17       26     42    10        10       11      20  1.700000  1.700000  0.948683  0.948683 0.558049 0.558049  0.710259  0.710259         6119            0
 44   1   1   1  4.499233  1.239733 0.0  5.738967  10.323822 10.323822  6.568050 2196.972656 2220.785156  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        16646            0
 44   1   2   2  4.130197  1.003961 0.0  5.134158  16.891872  6.568050  3.927857 2192.855469 2224.660156  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         9798            0
 44   1   3   3  3.217298  0.710560 0.0  3.927857  20.819729  3.927857  5.445213 2182.601562 2201.902344  12  12 1.0    0       32     43     4         4        9      12  3.000000  3.000000  4.000000  4.000000 1.333333 1.333333 -0.160964 -0.160964        17576            0
 44   1   4   4  4.455284  0.989929 0.0  5.445213  26.264943  5.445213 11.108965 2195.714844 2225.570312  16  16 1.0    0       44     59     4         4       13      16  4.000000  4.000000  6.000000  6.000000 1.500000 1.500000 -0.403677 -0.403677         7057            0
 44   1   5   5  7.295045  3.813920 0.0 11.108965  37.373908 11.108965  3.547380 2231.402344 2260.800781  24  24 1.0    0       60     83     4         4       17      20  6.000000  6.000000  3.464102  3.464102 0.577350 0.577350 -0.079185 -0.079185        76722            0
 44   1   6   6  1.752818  1.794562 0.0  3.547380  40.921288  3.547380  0.717194 2174.257812 2200.101562   7   7 1.0    0       84     90     5         5       21      25  1.400000  1.400000  0.547723  0.547723 0.391230 0.391230  0.728611  0.728611         1602            0
 44   1   7   7  0.614488  0.102706 0.0  0.717194  41.638481  0.717194  6.483506 2156.726562 2178.304688   2   2 1.0    0       91     92     2         2       26      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          256            0
 44   1   8   8  4.880631  1.602874 0.0  6.483506  48.121987  6.483506  3.223494 2205.468750 2231.042969  17  17 1.0    0       93    109     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        22042            0
 44   1   9   9  2.708742  0.514753 0.0  3.223494  51.345481  3.223494  6.430209 2186.160156 2213.390625  10  10 1.0    0      110    119     3         3       31      33  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         2239            0
 44   1  10  10  4.843350  1.586859 0.0  6.430209  57.775690  6.430209  3.413876 2209.062500 2234.351562  17  17 1.0    0      120    136     3         3       34      36  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        39788            0
 44   1  11  11  2.884200  0.529676 0.0  3.413876  61.189566  3.413876 22.913395 2186.914062 2211.453125  11  11 1.0    0      137    147     3         3       37      39  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181         5919            0
 44   1  12  12  7.715517 15.197879 0.0 22.913395  84.102961 22.913395  0.000000 2245.562500 2272.949219  25  25 1.0    0      148    172     3         3       40      42  8.333333  8.333333  9.451631  9.451631 1.134196 1.134196 -1.136111 -1.136111       226403            0
 45   3   1   1  1.245533  0.753213 0.0  1.998747   1.998747  1.998747  0.000000 2165.347656 2184.835938  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        79966            0
 45   2   1   1  2.148673  0.879464 0.0  3.028137   5.026884  5.026884  1.197576 2188.222656 2208.707031  27  27 1.0   27        1     27    10        10        1      10  2.700000  2.700000  2.750757  2.750757 1.018799 1.018799  0.425881  0.425881        26815            0
 45   2   2   2  0.964069  0.233506 0.0  1.197576   6.224459  1.197576  0.000000 2195.718750 2216.660156  15  15 1.0   15       28     42    10        10       11      20  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.767739  0.767739         5368            0
 45   1   1   1  4.483904  1.257351 0.0  5.741255  10.768139 10.768139  6.286809 2219.621094 2244.785156  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        17802            0
 45   1   2   2  4.127078  0.962156 0.0  5.089234  17.054948  6.286809  6.802534 2216.746094 2249.589844  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         9293            0
 45   1   3   3  5.353453  1.449082 0.0  6.802534  23.857482  6.802534  4.199386 2237.867188 2277.539062  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        38819            0
 45   1   4   4  3.173206  1.026180 0.0  4.199386  28.056868  4.199386  8.919729 2216.453125 2243.316406  12  12 1.0    0       51     62     5         5       13      17  2.400000  2.400000  2.190890  2.190890 0.912871 0.912871  0.279065  0.279065        19188            0
 45   1   5   5  5.793056  3.126673 0.0  8.919729  36.976598  8.919729  7.933425 2242.339844 2267.617188  20  20 1.0    0       63     82     5         5       18      22  4.000000  4.000000  3.741657  3.741657 0.935414 0.935414  0.032963  0.032963        40292            0
 45   1   6   6  5.464803  2.468622 0.0  7.933425  44.910022  7.933425  2.863129 2241.890625 2269.187500  19  19 1.0    0       83    101     5         5       23      27  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        79406            0
 45   1   7   7  2.464235  0.398894 0.0  2.863129  47.773152  2.863129  2.414747 2203.609375 2223.011719   9   9 1.0    0      102    110     2         2       28      29  4.500000  4.500000  3.535534  3.535534 0.785674 0.785674 -1.181272 -1.181272         3217            0
 45   1   8   8  2.061355  0.353392 0.0  2.414747  50.187899  2.414747  3.174210 2201.148438 2222.410156   8   8 1.0    0      111    118     2         2       30      31  4.000000  4.000000  4.242641  4.242641 1.060660 1.060660 -1.390294 -1.390294         2734            0
 45   1   9   9  2.701506  0.472704 0.0  3.174210  53.362109  3.174210  3.469221 2207.343750 2231.394531  10  10 1.0    0      119    128     2         2       32      33  5.000000  5.000000  5.656854  5.656854 1.131371 1.131371 -1.734841 -1.734841        12218            0
 45   1  10  10  2.920734  0.548486 0.0  3.469221  56.831329  3.469221  1.228506 2219.847656 2244.734375  11  11 1.0    0      129    139     3         3       34      36  3.666667  3.666667  4.618802  4.618802 1.259673 1.259673 -0.571181 -0.571181         5712            0
 45   1  11  11  1.017070  0.211436 0.0  1.228506  58.059836  1.228506  6.957416 2198.976562 2220.144531   4   4 1.0    0      140    143     3         3       37      39  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          467            0
 45   1  12  12  5.164359  1.793057 0.0  6.957416  65.017252  6.957416  0.000000 2238.707031 2267.042969  18  18 1.0    0      144    161     3         3       40      42  6.000000  6.000000  8.082904  8.082904 1.426395 1.426395 -1.008346 -1.008346        20934            0
 46   3   1   1  1.248146  0.762441 0.0  2.010587   2.010587  2.010587  0.000000 2189.148438 2208.046875  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        84478            0
 46   2   1   1  2.238432  1.088387 0.0  3.326819   5.337406  5.337406  1.301850 2212.917969 2232.613281  28  28 1.0   28        1     28    10        10        1      10  2.800000  2.800000  2.820559  2.820559 1.007343 1.007343  0.417873  0.417873        41345            0
 46   2   2   2  1.047415  0.254435 0.0  1.301850   6.639257  1.301850  0.000000 2221.027344 2241.542969  16  16 1.0   16       29     44    10        10       11      20  1.600000  1.600000  0.966092  0.966092 0.603807 0.603807  0.706396  0.706396         5242            0
 46   1   1   1  4.495243  1.345260 0.0  5.840503  11.177909 11.177909  6.416732 2244.667969 2269.414062  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        28348            0
 46   1   2   2  4.125680  0.989202 0.0  5.114882  17.594641  6.416732  5.332558 2240.792969 2273.046875  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         6639            0
 46   1   3   3  3.169424  2.163134 0.0  5.332558  22.927200  5.332558 12.113368 2237.355469 2264.437500  12  12 1.0    0       32     43     5         5        9      13  2.400000  2.400000  2.607681  2.607681 1.086534 1.086534  0.202787  0.202787         4543            0
 46   1   4   4  7.586438  4.526929 0.0 12.113368  35.040567 12.113368  1.888586 2293.585938 2334.582031  25  25 1.0    0       44     68     5         5       14      18  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963       143032            0
 46   1   5   5  1.496301  0.392285 0.0  1.888586  36.929153  1.888586 12.842785 2219.171875 2238.929688   6   6 1.0    0       69     74     5         5       19      23  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         1638            0
 46   1   6   6  8.085649  4.757137 0.0 12.842785  49.771939 12.842785  0.725749 2306.156250 2352.125000  26  26 1.0    0       75    100     5         5       24      28  5.200000  5.200000  3.492850  3.492850 0.671702 0.671702  0.066452  0.066452       151121            0
 46   1   7   7  0.621044  0.104705 0.0  0.725749  50.497688  0.725749  0.902957 2209.851562 2228.691406   2   2 1.0    0      101    102     2         2       29      30  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          221            0
 46   1   8   8  0.785733  0.117224 0.0  0.902957  51.400645  0.902957  6.430382 2211.277344 2229.996094   3   3 1.0    0      103    105     2         2       31      32  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          276            0
 46   1   9   9  4.870058  1.560324 0.0  6.430382  57.831027  6.430382  3.113787 2259.753906 2285.484375  17  17 1.0    0      106    122     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        48850            0
 46   1  10  10  2.631773  0.482014 0.0  3.113787  60.944814  3.113787  1.220698 2240.027344 2266.609375  10  10 1.0    0      123    132     3         3       36      38  3.333333  3.333333  4.041452  4.041452 1.212436 1.212436 -0.472489 -0.472489         5826            0
 46   1  11  11  1.014262  0.206436 0.0  1.220698  62.165512  1.220698  5.233379 2222.550781 2243.933594   4   4 1.0    0      133    136     3         3       39      41  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          427            0
 46   1  12  12  4.228953  1.004427 0.0  5.233379  67.398891  5.233379  0.000000 2256.253906 2281.953125  15  15 1.0    0      137    151     3         3       42      44  5.000000  5.000000  3.464102  3.464102 0.692820 0.692820 -0.361780 -0.361780         7034            0
 47   3   1   1  1.249504  0.890855 0.0  2.140359   2.140359  2.140359  0.000000 2214.191406 2233.089844  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000       100008            0
 47   2   1   1  1.791349  0.511041 0.0  2.302390   4.442749  4.442749  1.820087 2234.511719 2256.152344  24  24 1.0   24        1     24    10        10        1      10  2.400000  2.400000  2.796824  2.796824 1.165343 1.165343  0.420580  0.420580        13889            0
 47   2   2   2  1.440894  0.379193 0.0  1.820087   6.262836  1.820087  0.000000 2244.039062 2266.714844  20  20 1.0   20       25     44    10        10       11      20  2.000000  2.000000  1.333333  1.333333 0.666667 0.666667  0.632023  0.632023         9045            0
 47   1   1   1  4.486265  1.403560 0.0  5.889825  10.332575 10.332575  8.378437 2268.562500 2293.457031  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        22271            0
 47   1   2   2  4.141688  2.416662 0.0  6.558350  18.711012  8.378437  6.904654 2264.621094 2297.089844  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         8548            0
 47   1   3   3  5.361724  1.542930 0.0  6.904654  25.615666  6.904654  6.833665 2284.968750 2324.058594  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        51626            0
 47   1   4   4  5.114999  1.718666 0.0  6.833665  32.449331  6.833665  3.903183 2284.324219 2322.726562  18  18 1.0    0       51     68     4         4       13      16  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509       108073            0
 47   1   5   5  3.227812  0.675371 0.0  3.903183  36.352514  3.903183  1.890777 2258.542969 2277.863281  12  12 1.0    0       69     80     4         4       17      20  3.000000  3.000000  3.366502  3.366502 1.122167 1.122167 -0.063239 -0.063239         5515            0
 47   1   6   6  1.560369  0.330409 0.0  1.890777  38.243292  1.890777  0.933761 2246.414062 2268.406250   6   6 1.0    0       81     86     4         4       21      24  1.500000  1.500000  1.000000  1.000000 0.666667 0.666667  0.500000  0.500000         1839            0
 47   1   7   7  0.766917  0.166844 0.0  0.933761  39.177053  0.933761  6.626284 2233.574219 2252.164062   3   3 1.0    0       87     89     3         3       25      27  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          494            0
 47   1   8   8  4.895322  1.730962 0.0  6.626284  45.803336  6.626284  3.759108 2281.144531 2305.953125  17  17 1.0    0       90    106     3         3       28      30  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        45383            0
 47   1   9   9  3.161833  0.597274 0.0  3.759108  49.562444  3.759108  3.194164 2265.878906 2289.230469  12  12 1.0    0      107    118     3         3       31      33  4.000000  4.000000  4.358899  4.358899 1.089725 1.089725 -0.528072 -0.528072         2694            0
 47   1  10  10  2.608388  0.585776 0.0  3.194164  52.756608  3.194164  6.468272 2258.992188 2284.289062  10  10 1.0    0      119    128     3         3       34      36  3.333333  3.333333  3.214550  3.214550 0.964365 0.964365 -0.309418 -0.309418         9642            0
 47   1  11  11  5.136389  1.331883 0.0  6.468272  59.224881  6.468272  5.020402 2294.843750 2332.750000  18  18 1.0    0      129    146     4         4       37      40  4.500000  4.500000  4.123106  4.123106 0.916246 0.916246 -0.178509 -0.178509        14755            0
 47   1  12  12  4.057298  0.963104 0.0  5.020402  64.245283  5.020402  0.000000 2281.261719 2305.410156  15  15 1.0    0      147    161     4         4       41      44  3.750000  3.750000  4.272002  4.272002 1.139200 1.139200 -0.199175 -0.199175         6398            0
 48   3   1   1  1.248570  0.757732 0.0  2.006302   2.006302  2.006302  0.000000 2238.128906 2256.632812  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        80881            0
 48   2   1   1  1.996509  0.634343 0.0  2.630852   4.637154  4.637154  1.603262 2259.757812 2280.062500  26  26 1.0   26        1     26    10        10        1      10  2.600000  2.600000  2.756810  2.756810 1.060311 1.060311  0.425181  0.425181        16205            0
 48   2   2   2  1.251988  0.351274 0.0  1.603262   6.240416  1.603262  0.000000 2264.820312 2284.062500  18  18 1.0   18       27     44    10        10       11      20  1.800000  1.800000  1.032796  1.032796 0.573775 0.573775  0.691906  0.691906        11867            0
 48   1   1   1  4.488814  2.825298 0.0  7.314112  11.951266 11.951266  6.791257 2292.437500 2316.996094  16  16 1.0    0        1     16     4         4        1       4  4.000000  4.000000  2.943920  2.943920 0.735980 0.735980  0.010185  0.010185        19784            0
 48   1   2   2  4.139899  1.048096 0.0  5.187995  18.742523  6.791257  6.862165 2288.753906 2320.625000  15  15 1.0    0       17     31     4         4        5       8  3.750000  3.750000  5.500000  5.500000 1.466667 1.466667 -0.350220 -0.350220         9130            0
 48   1   3   3  5.381213  1.480952 0.0  6.862165  25.604688  6.862165  1.564218 2309.039062 2347.839844  19  19 1.0    0       32     50     4         4        9      12  4.750000  4.750000  3.862210  3.862210 0.813097 0.813097 -0.140806 -0.140806        30405            0
 48   1   4   4  1.265626  0.298592 0.0  1.564218  27.168906  1.564218 12.257248 2262.941406 2282.144531   5   5 1.0    0       51     55     4         4       13      16  1.250000  1.250000  0.500000  0.500000 0.400000 0.400000  0.707519  0.707519         1102            0
 48   1   5   5  7.685880  4.571368 0.0 12.257248  39.426154 12.257248  1.895856 2346.683594 2387.449219  25  25 1.0    0       56     80     5         5       17      21  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        94984            0
 48   1   6   6  1.496801  0.399055 0.0  1.895856  41.322010  1.895856  1.212301 2269.156250 2288.273438   6   6 1.0    0       81     86     5         5       22      26  1.200000  1.200000  0.447214  0.447214 0.372678 0.372678  0.770330  0.770330         1319            0
 48   1   7   7  1.010666  0.201635 0.0  1.212301  42.534311  1.212301  0.936415 2255.871094 2274.394531   4   4 1.0    0       87     90     3         3       27      29  1.333333  1.333333  0.577350  0.577350 0.433013 0.433013  0.585162  0.585162          582            0
 48   1   8   8  0.768591  0.167824 0.0  0.936415  43.470726  0.936415  6.480026 2255.750000 2274.332031   3   3 1.0    0       91     93     3         3       30      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          386            0
 48   1   9   9  4.848292  1.631735 0.0  6.480026  49.950753  6.480026  6.944357 2302.898438 2325.917969  17  17 1.0    0       94    110     3         3       33      35  5.666667  5.666667  4.163332  4.163332 0.734706 0.734706 -0.494232 -0.494232        40753            0
 48   1  10  10  5.073422  1.870935 0.0  6.944357  56.895110  6.944357  6.129694 2305.656250 2328.000000  18  18 1.0    0      111    128     3         3       36      38  6.000000  6.000000  4.582576  4.582576 0.763763 0.763763 -0.565293 -0.565293        41842            0
 48   1  11  11  5.063053  1.066641 0.0  6.129694  63.024804  6.129694 26.657897 2307.257812 2329.128906  18  18 1.0    0      129    146     3         3       39      41  6.000000  6.000000  3.605551  3.605551 0.600925 0.600925 -0.390174 -0.390174        25870            0
 48   1  12  12  8.473876 18.184021 0.0 26.657897  89.682701 26.657897  0.000000 2354.417969 2397.945312  27  27 1.0    0      147    173     3         3       42      44  9.000000  9.000000 10.583005 10.583005 1.175889 1.175889 -1.229666 -1.229666       232266            0
 49   3   1   1  1.250296  0.877251 0.0  2.127547   2.127547  2.127547  0.000000 2262.656250 2281.023438  20  20 1.0   20        1     20     1         0        1       1  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000        89769            0
 49   2   1   1  2.618239  2.884719 0.0  5.502958   7.630505  7.630505  0.835601 2293.832031 2321.234375  31  31 1.0   31        1     31    10        10        1      10  3.100000  3.100000  2.685351  2.685351 0.866242 0.866242  0.433521  0.433521        40600            0
 49   2   2   2  0.624406  0.211194 0.0  0.835601   8.466106  0.835601  0.000000 2344.968750 2368.457031  11  11 1.0   11       32     42    10        10       11      20  1.100000  1.100000  0.316228  0.316228 0.287480 0.287480  0.880669  0.880669         5038            0
 49   1   1   1  5.170730  1.710717 0.0  6.881447  14.511952 14.511952  6.974318 2323.601562 2355.023438  17  17 1.0    0        1     17     5         5        1       5  3.400000  3.400000  2.880972  2.880972 0.847345 0.847345  0.157417  0.157417        34629            0
 49   1   2   2  4.828377  1.310340 0.0  6.138717  21.486270  6.974318  4.945404 2321.777344 2355.296875  16  16 1.0    0       18     33     5         5        6      10  3.200000  3.200000  4.919350  4.919350 1.537297 1.537297 -0.104874 -0.104874        19936            0
 49   1   3   3  3.962238  0.983166 0.0  4.945404  26.431673  4.945404 12.029081 2314.828125 2338.398438  13  13 1.0    0       34     46     5         5       11      15  2.600000  2.600000  3.577709  3.577709 1.376042 1.376042  0.054826  0.054826         4215            0
 49   1   4   4  8.229066  3.800016 0.0 12.029081  38.460755 12.029081  8.295257 2367.742188 2407.242188  25  25 1.0    0       47     71     5         5       16      20  5.000000  5.000000  3.741657  3.741657 0.748331 0.748331  0.032963  0.032963        90635            0
 49   1   5   5  5.881311  2.413946 0.0  8.295257  46.756012  8.295257 50.673650 2340.558594 2368.210938  19  19 1.0    0       72     90     5         5       21      25  3.800000  3.800000  3.898718  3.898718 1.025978 1.025978  0.012715  0.012715        68190            0
 49   1   6   6 12.048743 38.624906 0.0 50.673650  97.429662 50.673650  0.541504 2484.593750 2533.347656  35  35 1.0    0       91    125     6         6       26      31  5.833333  5.833333  3.920034  3.920034 0.672006 0.672006  0.110754  0.110754       873390            0
 49   1   7   7  0.465333  0.076171 0.0  0.541504  97.971166  0.541504  0.926686 2338.191406 2361.484375   1   1 1.0    0      126    126     1         1       32      32  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000           72            0
 49   1   8   8  0.795527  0.131159 0.0  0.926686  98.897852  0.926686  0.730210 2342.648438 2365.992188   3   3 1.0    0      127    129     2         2       33      34  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          492            0
 49   1   9   9  0.625217  0.104993 0.0  0.730210  99.628062  0.730210  0.928035 2342.023438 2365.242188   2   2 1.0    0      130    131     2         2       35      36  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          502            0
 49   1  10  10  0.798788  0.129247 0.0  0.928035 100.556097  0.928035  0.732719 2343.617188 2366.675781   3   3 1.0    0      132    134     2         2       37      38  1.500000  1.500000  0.707107  0.707107 0.471405 0.471405  0.228447  0.228447          432            0
 49   1  11  11  0.631905  0.100814 0.0  0.732719 101.288816  0.732719 25.856022 2342.753906 2365.992188   2   2 1.0    0      135    136     2         2       39      40  1.000000  1.000000  0.000000  0.000000 0.000000 0.000000  1.000000  1.000000          286            0
 49   1  12  12  8.324196 17.531826 0.0 25.856022 127.144838 25.856022  0.000000 2439.093750 2473.871094  26  26 1.0    0      137    162     2         2       41      42 13.000000 13.000000 16.970563 16.970563 1.305428 1.305428 -3.167564 -3.167564       240871            0

[22-02-2022_03-44-47] INFO :: __main__ >> Saving results to excel file: ./experiments/results/ASH_Excel_2022-02-22_02-22-54_PL2_hcr_online_2_6.xlsx

[22-02-2022_03-44-55] INFO :: __main__ >> Saving results to data file: ./experiments/results/ASH_Data_2022-02-22_02-22-54_PL2_hcr_online_2_6.dat

[22-02-2022_03-44-55] INFO :: __main__ >> Saving results to figure file: ./experiments/results/ASH_Figure_2022-02-22_02-22-54_PL2_hcr_online_2_6.png

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999.

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscbi.ttf) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swissck.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdOul BT' (swissbo.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbell.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscli.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisseb.ttf) normal normal 700 expanded>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissci.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtCn BT' (swisscl.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptC' (scriptc_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Lt BT' (bgothl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT' (AMGDT___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'PanRoman' (panroman.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanD' (romand__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 7' (mtproxy7.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkOul BT' (swissko.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 XBd BT' (dutcheb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialPi BT' (compi.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Simplex' (simplex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicE' (gothice_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MT Extra' (MTEXTRA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaral.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 4' (mtproxy4.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanT' (romant__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swiss.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV25' (gdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Technic' (technic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swissc.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicLite' (techl___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Cn BT' (swisscb.ttf) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 5' (mtproxy5.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CityBlueprint' (cityb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicT' (italict_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ItalicC' (italicc_.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sansso__.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BdCnOul BT' (swisscbo.ttf) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissl.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GENISO' (GENISO.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT_IV50' (gdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AIGDT' (AIGDT___.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-MEDIUM.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkCn BT' (swisscki.ttf) italic normal 400 condensed>) = 11.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Syastro' (syastro_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutch.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanss___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWDB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurr____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common Italic.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 6' (mtproxy6.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romantic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 LtEx BT' (swissel.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 3' (mtproxy3.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal 300 normal>) = 11.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romab___.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal 900 normal>) = 11.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Lt BT' (swissli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symath' (symath_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Vineta BT' (vinet.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 2' (mtproxy2.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swissk.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SuperFrench' (supef___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee' (LEELAWAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Romantic' (romai___.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'TechnicBold' (techb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-LIGHT.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ScriptS' (scripts_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanC' (romanc__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekC' (greekc_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'BankGothic Md BT' (bgothm.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicG' (gothicg_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'RomanS' (romans__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariblk.ttf) normal normal 900 normal>) = 6.888636363636364

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV50.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GDT' (gdt_____.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal 350 normal>) = 11.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP3' (isocp3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monos.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'EuroRoman' (eurro___.ttf) oblique normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Complex' (complex_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchbi.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 1' (mtproxy1.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CommercialScript BT' (comsc.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Txt' (txt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal 290 normal>) = 10.1545

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BlkEx BT' (swissek.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssb__.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 8' (mtproxy8.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symusic' (symusic_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT' (isoct_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monospac821 BT' (monosb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal 900 normal>) = 10.525

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 BT' (swissb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Times New Roman' (times.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-REGULAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GreekS' (greeks__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT2' (isoct2_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Uighur' (MSUIGHUB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal 350 normal>) = 10.0975

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GothicI' (gothici_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'UniversalMath1 BT' (umath.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'SansSerif' (sanssbo_.ttf) oblique normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic__.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Stylus BT' (stylu.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'CountryBlueprint' (counb___.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dutch801 Rm BT' (dutchi.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candarali.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV50' (Amgdt_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Calibri' (calibril.ttf) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symap' (symap_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Dubai' (DUBAI-BOLD.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal 300 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Ex BT' (swisse.ttf) normal normal 400 expanded>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Swis721 Blk BT' (swisski.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 600 normal>) = 11.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCPEUR' (isocpeui.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AMGDT_IV25' (Amgdt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Italic' (italic_IV25.ttf) italic normal 400 normal>) = 11.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Monotxt' (monotxt_IV25.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AcadEref' (AcadEref.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'GOST Common' (GOST Common.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Symeteo' (symeteo_.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP' (isocp_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCP2' (isocp2_IV50.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCTEUR' (isocteur.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'ISOCT3' (isoct3__.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'AmdtSymbols' (AMDT_Symbols.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Proxy 9' (mtproxy9.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal 800 normal>) = 10.43

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 600 normal>) = 10.24

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 500 normal>) = 10.145

[22-02-2022_03-44-55] DEBUG :: matplotlib.font_manager >> findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=5.789999999999999 to DejaVu Sans ('C:\\Users\\ollie\\anaconda3\\envs\\ASH\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.

[22-02-2022_03-44-59] INFO :: __main__ >> Overall time: Real = 4924.3306201000005, Process = 9224.5

[22-02-2022_03-44-59] INFO :: __main__ >> Exiting with code 0

